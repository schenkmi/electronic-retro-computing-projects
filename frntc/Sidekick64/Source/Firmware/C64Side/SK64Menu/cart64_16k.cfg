# this file has been adapted from the great example found here:
# http://swut.net/c64cart-c.html

SYMBOLS {
    __STACKSIZE__: value = $0800, type = weak; # 2k stack
}
MEMORY {
    ZP:   start = $0002, size = $001A, type = rw, define = yes;
#This CRT header stuff is refereced cart64_8k.s but not written to cart binary
    CHEADER:  start = $0000, size = $0040, type = ro, file = "", fill=yes;
    ROMCHIP:  start = $0000, size = $0010, type = ro, file = "", fill=yes;
#16k catridge data.
#    ROM:  start = $8000, size = $4000, file = %O, fill=yes, define = yes;
    ROM1:  start = $8000, size = $1900, file = %O, fill=yes, define = yes;
    ROM2:  start = $9900, size = $1200, file = %O, fill=yes, define = yes;
    ROM_LUT: start = $9c00, size = $0100, file = %O, fill=yes, define = yes;
    ROMblocked: start = $9d00, size = $0300, file = %O, fill=yes, define = yes;
    ROM3:  start = $a000, size = $2000, file = %O, fill=yes, define = yes;
#Usable RAM for data.
    RAM:  start = $0800, size = $0800, type = rw, define = yes;
    RAM2:  start = $1000, size = $7000, type = rw, define = yes;
#Data at $C000.  Not normally used but made available to your cartridge.
#Top 2k is for the stack.
    HIRAM:  start = $C000, size = $1000-__STACKSIZE__, type = rw;
}
SEGMENTS {
#Cartridge ID and settings - these are not written to cart binary but still req
#because referenced in cart64_8k.S
    HEADERDATA: load = CHEADER, type = ro;
    CHIP0:  load = ROMCHIP, type = ro;
#-----------------------------------------
    STARTUP:  load = ROM1, type = ro;
    LOWCODE:  load = ROM1, type = ro,               optional = yes;
    INIT: load = ROM1, type = ro, define = yes, optional = yes;
    CODE: load = ROM1, type = ro;
    CODE2: load = ROM2, type = ro;
    CODE_TEMPORARY: load = ROM3, type = ro;
    RODATA: load = ROM1, type = ro;
    DATA: load = ROM1, run = RAM, type = rw, define = yes;
    ONCE:     load = ROM1,     type = ro,  define   = yes; # MAX ADDED THIS
    BSS:  load = RAM, type = bss, define = yes;
    HEAP: load = RAM, type = bss, optional = yes; # must sit just below stack
#Data stored at $C000.
    BSSHI:  load = HIRAM, type = bss, define = yes, optional = yes;
    ZEROPAGE: load = ZP,  type = zp;
}
FEATURES {
    CONDES: segment = INIT,
      type = constructor,
      label = __CONSTRUCTOR_TABLE__,
      count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
      type = destructor,
      label = __DESTRUCTOR_TABLE__,
      count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
      type = interruptor,
      label = __INTERRUPTOR_TABLE__,
      count = __INTERRUPTOR_COUNT__;
}