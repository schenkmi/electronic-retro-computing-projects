//
//
//  File Name   :  MCL6809.ino
//  Used on     :  
//  Author      :  Ted Fried, MicroCore Labs
//  Creation    :  6/18/2024
//
//   Description:
//   ============
//   
//  Motorola 6809 emulator running on a Teensy 4.1.
//
//------------------------------------------------------------------------
//
// Modification History:
// =====================
//
// Revision 1 6/18/2024
// Initial revision
//
//------------------------------------------------------------------------
//
// Copyright (c) 2024 Ted Fried
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//------------------------------------------------------------------------
                                                  


#include <stdint.h>
#include <stdio.h>


// Teensy 4.1 pin assignments
//
#define PIN_RESET_n          5 // In-Buffer       1/8       
#define PIN_FIRQ_n           2 // In-Buffer       2/8        
#define PIN_IRQ_n            3 // In-Buffer       3/8
#define PIN_HALT_n           4 // In-Buffer       4/8        
#define PIN_NMI_n           33 // In-Buffer       5/8        
#define PIN_CLK_E           29 // In-Buffer       6/8        
#define PIN_CLK_Q            1 // In-Buffer       7/8        
#define PIN_RDWR_n          25 // Out-direct-HiZ  
      

#define PIN_ADDR15          27 // Out-Buffer-HiZ     
#define PIN_ADDR14          26 // Out-Buffer-HiZ    
#define PIN_ADDR13          39 // Out-Buffer-HiZ    
#define PIN_ADDR12          38 // Out-Buffer-HiZ    
#define PIN_ADDR11          21 // Out-Buffer-HiZ    
#define PIN_ADDR10          20 // Out-Buffer-HiZ    
#define PIN_ADDR9           23 // Out-Buffer-HiZ    
#define PIN_ADDR8           22 // Out-Buffer-HiZ                                          
#define PIN_ADDR7           16 // Out-Buffer-HiZ       
#define PIN_ADDR6           17 // Out-Buffer-HiZ       
#define PIN_ADDR5           41 // Out-Buffer-HiZ       
#define PIN_ADDR4           40 // Out-Buffer-HiZ       
#define PIN_ADDR3           15 // Out-Buffer-HiZ       
#define PIN_ADDR2           14 // Out-Buffer-HiZ       
#define PIN_ADDR1           18 // Out-Buffer-HiZ       
#define PIN_ADDR0           19 // Out-Buffer-HiZ       
#define PIN_ADDR_OE_n       24 // Out-direct        
                                                   
#define PIN_DATA_IN7        37 // In-Buffer        
#define PIN_DATA_IN6        36 // In-Buffer        
#define PIN_DATA_IN5         7 // In-Buffer        
#define PIN_DATA_IN4         8 // In-Buffer        
#define PIN_DATA_IN3        13 // In-Buffer        
#define PIN_DATA_IN2        11 // In-Buffer        
#define PIN_DATA_IN1        12 // In-Buffer        
#define PIN_DATA_IN0        10 // In-Buffer     
                                                      
#define PIN_DATA_OUT7       34 // Out-Buffer-HiZ        
#define PIN_DATA_OUT6       35 // Out-Buffer-HiZ        
#define PIN_DATA_OUT5       32 // Out-Buffer-HiZ        
#define PIN_DATA_OUT4        9 // Out-Buffer-HiZ        
#define PIN_DATA_OUT3        6 // Out-Buffer-HiZ        
#define PIN_DATA_OUT2       30 // Out-Buffer-HiZ        
#define PIN_DATA_OUT1       31 // Out-Buffer-HiZ        
#define PIN_DATA_OUT0       28 // Out-Buffer-HiZ     
#define PIN_DATA_OE_n        0 // Out-direct         
   

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------


#define REGISTER_CC  ( (flag_e<<7) | (flag_f<<6) | (flag_h<<5) | (flag_i<<4) | (flag_n<<3) | (flag_z<<2) | (flag_v<<1) | (flag_c) )

#define REGISTER_D   ( (register_A<<8) | register_B )

#define TRUE  1
#define FALSE 0

#define DIRECT   1    
#define EXTENDED 2    
#define INDEXED  3    


// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------

int       incomingByte;   
uint8_t   mode              = 0;
uint8_t   cart              = 0;
uint8_t   halt_occured      = 0;
uint8_t   ea_data8          = 0;
uint8_t   flag_e            = 0;
uint8_t   flag_f            = 0;
uint8_t   flag_h            = 0;
uint8_t   flag_i            = 0;
uint8_t   flag_n            = 0;
uint8_t   flag_z            = 0;
uint8_t   flag_v            = 0;
uint8_t   flag_c            = 0;
uint8_t   temp8             = 0;
uint8_t   page2set          = 0;
uint8_t   page3set          = 0;
uint8_t   register_A        = 0;
uint8_t   register_B        = 0;
uint8_t   register_DP       = 0; 
uint8_t   nmi_enabled       = 0;
uint8_t   nmi_latched       = 0;
uint8_t   opcode_byte       = 0;
  
uint16_t  register_X        = 0;   
uint16_t  register_Y        = 0;   
uint16_t  register_USP      = 0;   
uint16_t  register_SSP      = 0;   
uint16_t  register_PC       = 0;   
uint16_t  ea                = 0;   
uint16_t  ea_address        = 0;
uint16_t  ea_data16         = 0;
uint16_t  temp16            = 0;
                            
uint32_t  direct_reset_n    = 1; 
uint32_t  direct_nmi_n      = 1; 
uint32_t  direct_nmi_n_d1   = 1; 
uint32_t  direct_nmi_n_d2   = 1; 
uint32_t  direct_irq_n_d1   = 1;
uint32_t  direct_firq_n_d1  = 1;
uint32_t  direct_halt_n     = 1; 
uint32_t  direct_irq_n      = 1; 
uint32_t  direct_firq_n     = 1; 
uint32_t  GPIO7_raw_data    = 0; 
uint32_t  GPIO9_raw_data    = 0; 
uint32_t  old_GPIO6         = 0; 

uint8_t internal_RAM[0x10000];


// Tandy Diagnostics v2.0
uint8_t CARTRIDGE_0[0x4000] = {0xb7,0xff,0xc7,0xb7,0xff,0xc8,0x10,0xce,0x2,0x0,0xce,0xff,0x20,0x8e,0xc4,0xd9,0x10,0x8e,0x2,0x1,0x17,0x3,0x67,0x17,0x6,0x11,0x84,0xdf,0xc6,0xb,0x8e,0xc7,0x3e,0xa1,0x80,0x27,0x5,0x5a,0x26,0xf9,0x20,0xdc,0x8e,0xc7,0x47,0x58,0x6e,0x95,0xad,0x9f,0xa0,0xa,0xce,0xff,0x20,0x39,0xb7,0xff,0xc1,0x86,0x81,0xa7,0x42,0xcc,0xff,0xaa,0x97,0x1,0xd7,0x5,0x8d,0xe8,0xfc,0x1,0x5c,0xdd,0x2,0xfc,0x1,0x5a,0xdd,0x6,0x86,0x55,0x97,0x10,0xd6,0x10,0xd7,0x4,0xd7,0x8,0xbd,0xc3,0xc4,0x8d,0xcf,0x86,0x1,0x10,0x8e,0x1,0x5a,0x8e,0x0,0x1,0x8d,0x4e,0x86,0x2,0x31,0x22,0x30,0x4,0x8d,0x46,0xad,0x9f,0xa0,0x0,0x81,0x20,0x27,0x1d,0x81,0xc,0x27,0x21,0x81,0x3,0x27,0x25,0x8e,0x0,0x1,0x81,0x8,0x27,0x6,0x81,0x9,0x26,0xd0,0x30,0x4,0xa6,0x84,0x8d,0x1e,0xe7,0x84,0x20,0xc6,0xa6,0x42,0x88,0x8,0xa7,0x42,0x20,0xbe,0x96,0x10,0x8d,0xe,0xd7,0x10,0x20,0xad,0x6f,0x42,0xb7,0xff,0xc0,0x6f,0x42,0x7e,0xc0,0x6,0x4c,0x84,0x3,0xc6,0x55,0x3d,0x39,0x97,0x0,0xec,0xa4,0x10,0xa3,0x1,0x26,0x3,0x8d,0x1c,0x39,0x86,0xff,0xb7,0xff,0x2,0xb6,0xff,0x0,0x94,0x0,0x26,0x8,0xa6,0x3,0x97,0xd,0xec,0x1,0x8d,0xf,0x8d,0x5,0x96,0xc,0xa7,0x3,0x39,0xa6,0x84,0x97,0xd,0xec,0xa4,0xed,0x1,0x34,0x30,0xdd,0xe,0x86,0x10,0x3d,0x4c,0x4c,0x1f,0x1,0xd6,0xe,0x54,0x54,0x3a,0x96,0xe,0x84,0x3,0x31,0x8c,0x14,0xe6,0xa6,0x53,0xd4,0xd,0xd7,0xb,0xe6,0x84,0xd7,0xc,0xe4,0xa6,0xda,0xb,0xe7,0x84,0x35,0x30,0x39,0x3f,0xcf,0xf3,0xfc,0x86,0x3c,0xa7,0x43,0x86,0x4b,0x20,0x30,0xad,0x9f,0xa0,0x0,0x4d,0x27,0x5c,0x8e,0xc1,0xaf,0xc6,0xa,0xa1,0x81,0x27,0x5,0x5a,0x26,0xf9,0x20,0x2,0xa6,0x1f,0x97,0xa,0x8e,0xc1,0x97,0x81,0xd,0x27,0x2a,0x30,0x8,0x81,0xc,0x27,0x24,0x30,0x8,0x81,0x20,0x27,0x1e,0x81,0x3,0x27,0x15,0x81,0x5f,0x2f,0x4,0x80,0x60,0x20,0x6,0x81,0x3f,0x2e,0x2,0x8b,0x40,0x1f,0x89,0xbd,0xc3,0xc4,0x20,0xbb,0x8d,0x62,0x7e,0xc0,0x6,0x9f,0xb,0x10,0x8e,0x2,0x0,0x9e,0xb,0xc6,0x8,0xa6,0x80,0xa7,0xa0,0x5a,0x26,0xf9,0x10,0x8c,0x4,0x0,0x2d,0xef,0x20,0x9d,0xc6,0x5,0x96,0xa,0x48,0x8a,0x2,0xa7,0xc4,0x80,0x4,0x81,0x2,0x26,0xf6,0x5a,0x26,0xf0,0x20,0x89,0x60,0x45,0x4e,0x54,0x45,0x52,0x60,0x60,0x60,0x43,0x4c,0x45,0x41,0x52,0x60,0x60,0x60,0x53,0x50,0x41,0x43,0x45,0x60,0x60,0x5e,0x5e,0x5f,0x5e,0xa,0x5c,0x5b,0x5c,0x8,0x5f,0x15,0x5f,0x9,0x2f,0x5d,0x2f,0x5c,0xc,0x13,0x40,0xc6,0x30,0xe7,0x43,0xa7,0x42,0x86,0x34,0xa7,0x43,0x39,0x86,0x3c,0xa7,0x43,0x10,0x8e,0xc2,0x43,0xf,0x10,0xa,0x10,0xf,0x12,0x96,0x12,0xa6,0xa6,0x97,0x11,0x8e,0xc2,0x2f,0xc6,0x14,0xa6,0x80,0xa7,0xc4,0x96,0x10,0x4a,0x26,0xfd,0x5a,0x26,0xf4,0xa,0x11,0x26,0xeb,0xc,0x12,0x96,0x10,0xc6,0xdf,0x3d,0x97,0x10,0x26,0xda,0x8d,0xc5,0x86,0x7,0x97,0x11,0x86,0xfa,0x8d,0xb7,0xf,0x10,0xc,0x10,0x8d,0x11,0x8d,0xf,0xc,0x10,0x26,0xf8,0x86,0xf8,0x8d,0xa7,0xa,0x11,0x26,0xe8,0x7e,0xc0,0x6,0x86,0x2,0xa8,0x42,0xa7,0x42,0x96,0x10,0x4a,0x26,0xfd,0x39,0x82,0xaa,0xca,0xe6,0xf6,0xfe,0xf6,0xe6,0xca,0xaa,0x82,0x5a,0x3a,0x1e,0xe,0x6,0xe,0x1e,0x3a,0x5a,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xe,0x10,0x12,0x14,0x17,0x1a,0x1e,0x22,0x27,0x2d,0x33,0x3a,0x42,0x4c,0x57,0x64,0x73,0x84,0x97,0xac,0xc6,0xe2,0xff,0x4f,0x97,0x0,0x97,0x1,0x91,0x0,0x27,0x5,0x98,0x0,0x7e,0xc3,0x36,0x91,0x1,0x27,0x5,0x98,0x1,0x7e,0xc3,0x36,0x4c,0x26,0xe7,0xf,0x1,0xa6,0x42,0x84,0x4,0x27,0x6,0x86,0x40,0x97,0x0,0x20,0x4,0x86,0x10,0x97,0x0,0xb7,0xff,0xc0,0xb7,0xff,0xc3,0xb7,0xff,0xc4,0x39,0x8d,0xc8,0x86,0xa8,0xa7,0x42,0x4f,0x8e,0x0,0x2,0xa7,0x80,0x9c,0x0,0x26,0xfa,0x8e,0x0,0x2,0xa1,0x80,0x10,0x26,0x0,0x84,0x9c,0x0,0x26,0xf6,0x4c,0x26,0xe7,0x20,0x71,0x8d,0xa6,0x86,0xa0,0xa7,0x42,0xb7,0xff,0xc6,0xf,0x4,0x86,0xff,0x97,0x5,0x96,0x4,0x8e,0x0,0x8,0xa7,0x80,0x9c,0x0,0x26,0xfa,0x8e,0x0,0x8,0xd6,0x5,0xe7,0x80,0x9f,0x2,0x10,0x8e,0x0,0x8,0xa6,0xa0,0x91,0x4,0x27,0x11,0x91,0x5,0x27,0xd,0xd,0x4,0x27,0x1,0x43,0x10,0x9c,0x2,0x26,0x42,0x43,0x20,0x3f,0x10,0x9c,0x0,0x26,0xe4,0x96,0x4,0xa7,0x1f,0x1f,0x10,0x44,0x44,0x44,0x9f,0x6,0x8e,0xff,0xca,0xc6,0x5,0x44,0x25,0x4,0xa7,0x84,0x20,0x2,0xa7,0x1,0x30,0x2,0x5a,0x26,0xf2,0x9e,0x6,0x9c,0x0,0x26,0xb6,0xd,0x5,0x27,0x6,0x3,0x4,0x3,0x5,0x20,0x9e,0x17,0x0,0xab,0x8e,0xc4,0xa,0x8d,0x48,0x20,0x18,0xa8,0x1f,0xc6,0x70,0x44,0x25,0x3,0x5c,0x20,0xfa,0xd7,0x2,0x17,0x0,0x95,0x8e,0xc3,0xee,0x8d,0x32,0x96,0x2,0xa7,0xa4,0x96,0x0,0x81,0x10,0x27,0xe,0x8e,0xc3,0x67,0x86,0x7,0x10,0x8e,0x2,0xc5,0x8d,0x29,0x7e,0xc7,0xb9,0x8e,0xc3,0x6e,0x86,0x6,0x20,0xf0,0x71,0x76,0x4b,0x60,0x52,0x41,0x4d,0x74,0x4b,0x60,0x52,0x41,0x4d,0x10,0x8e,0x2,0xe1,0x20,0x6,0x10,0x8e,0x2,0xe1,0xa6,0x80,0x9f,0xb,0x8d,0x3e,0x9e,0xb,0xe6,0x80,0xc1,0xff,0x26,0x12,0x34,0x12,0x8e,0xc7,0xfb,0x86,0x5,0xe6,0x80,0xe7,0xa0,0x4a,0x26,0xf9,0x35,0x12,0x20,0x13,0xc1,0xfe,0x26,0x9,0x34,0x12,0x8e,0xc3,0xcf,0x86,0x9,0x20,0xe8,0xc1,0x20,0x2d,0x6,0xe7,0xa0,0x4a,0x26,0xd2,0x39,0x97,0xb,0x86,0x60,0xa7,0xa0,0x5a,0x26,0xfb,0x96,0xb,0x20,0xc4,0xc6,0x60,0x8e,0x2,0x0,0xe7,0x80,0x8c,0x6,0x0,0x26,0xf9,0x39,0x43,0x41,0x53,0x53,0x45,0x54,0x54,0x45,0x60,0x8e,0xff,0xc0,0xa7,0x81,0xa7,0x81,0xa7,0x81,0xa7,0x1,0xa7,0x4,0xa7,0x6,0xa7,0x8,0xa7,0xa,0x6f,0x42,0x39,0x1b,0x52,0x41,0x4d,0x60,0x45,0x52,0x52,0x4f,0x52,0x6e,0x6e,0x6e,0x52,0x45,0x50,0x4c,0x41,0x43,0x45,0x60,0x43,0x48,0x49,0x50,0x60,0x55,0x72,0x1a,0x52,0x41,0x4d,0xff,0x60,0x43,0x4f,0x4d,0x50,0x4c,0x45,0x54,0x45,0x6e,0x6e,0x52,0x41,0x4d,0x60,0x49,0x53,0x60,0x47,0x4f,0x4f,0x44,0x8e,0xc5,0x12,0x86,0xa,0x17,0xff,0x47,0x8e,0xbf,0xff,0x9f,0x5,0x8e,0xa0,0x0,0x8d,0xe,0x8e,0xc4,0xb1,0x10,0x8e,0x2,0xeb,0x86,0x7,0x17,0xff,0x43,0x20,0x4d,0xf,0x8,0xf,0x9,0x86,0x1,0x97,0xa,0x4f,0xd6,0x9,0x58,0x58,0x49,0x97,0x7,0x96,0x8,0x44,0x24,0x2,0xc,0x7,0x96,0x8,0x84,0x8,0x27,0x2,0xc,0x7,0x96,0x8,0x2a,0x2,0xc,0x7,0xa6,0x84,0xb7,0x2,0x50,0x94,0xa,0x27,0x2,0xc,0x7,0x96,0x7,0x44,0x9,0x9,0x9,0x8,0x8,0xa,0x26,0xcd,0x30,0x1,0x9c,0x5,0x2f,0xc3,0x39,0x81,0xa,0x2d,0x2,0x8b,0xc7,0x8b,0x70,0xa7,0xa0,0x39,0x96,0x8,0x44,0x44,0x44,0x44,0x8d,0xed,0x96,0x8,0x84,0xf,0x8d,0xe7,0x96,0x9,0x44,0x44,0x44,0x44,0x8d,0xdf,0x96,0x9,0x84,0xf,0x8d,0xd9,0x7e,0xc7,0xb9,0x43,0x52,0x43,0x60,0x49,0x53,0x60,0x8e,0xc5,0x1f,0x86,0xe,0x17,0xfe,0xb4,0x8e,0x9f,0xff,0x9f,0x5,0x8e,0x80,0x0,0x17,0xff,0x7a,0x8e,0xc4,0xb1,0x86,0x7,0x10,0x8e,0x2,0xef,0x17,0xfe,0xaf,0x20,0xb9,0xa9,0x43,0x4f,0x50,0x59,0x52,0x49,0x47,0x48,0x54,0x60,0x68,0x43,0x69,0x60,0x71,0x79,0x78,0x70,0x60,0x54,0x41,0x4e,0x44,0x59,0x60,0x43,0x4f,0x52,0x50,0x6e,0x11,0x12,0x44,0x49,0x41,0x47,0x4e,0x4f,0x53,0x54,0x49,0x43,0xff,0x60,0x4f,0x50,0x54,0x49,0x4f,0x4e,0x53,0x7a,0x17,0x14,0x42,0x60,0x42,0x41,0x53,0x49,0x43,0x60,0x52,0x4f,0x4d,0xff,0x10,0x45,0x60,0x45,0x58,0x50,0x41,0x4e,0x53,0x49,0x4f,0x4e,0x60,0x52,0x4f,0x4d,0xff,0xc,0x51,0x60,0x51,0x55,0x49,0x43,0x4b,0x60,0x52,0x41,0x4d,0xff,0x10,0x4c,0x60,0x4c,0x4f,0x4e,0x47,0x60,0x52,0x41,0x4d,0xff,0x11,0x56,0x60,0x56,0x49,0x44,0x45,0x4f,0xff,0x14,0x52,0x60,0x52,0x53,0x6d,0x72,0x73,0x72,0xff,0x13,0x53,0x60,0x53,0x4f,0x55,0x4e,0x44,0xff,0x14,0x43,0x60,0x43,0x41,0x53,0x53,0x45,0x54,0x54,0x45,0xff,0x11,0x4b,0x60,0x4b,0x45,0x59,0x42,0x4f,0x41,0x52,0x44,0xff,0x11,0x4a,0x60,0x4a,0x4f,0x59,0x53,0x54,0x49,0x43,0x4b,0xff,0x11,0x50,0x60,0x50,0x52,0x49,0x4e,0x54,0x45,0x52,0xff,0x4f,0x8e,0x2,0x0,0xa7,0x80,0x4c,0x8c,0x4,0x0,0x2d,0xf8,0x17,0x0,0x81,0x86,0x8,0xa7,0x42,0x8d,0x7b,0x6f,0x42,0x5f,0xbd,0xc3,0xc4,0x31,0x8d,0x0,0x97,0xa6,0xa0,0x81,0xee,0x27,0xc,0xe6,0xa0,0xd7,0xd,0x8d,0x7c,0xa,0xd,0x26,0xfa,0x20,0xee,0xb7,0xff,0xc1,0x86,0x80,0xa7,0x42,0x8e,0x2,0x0,0xec,0x81,0xed,0x89,0x1,0xfe,0x8c,0x18,0x0,0x2d,0xf5,0x4f,0x20,0x19,0x8d,0x45,0x96,0xb,0x4c,0x97,0xb,0x81,0x8,0x26,0xe,0xb7,0xff,0xc0,0xb7,0xff,0xc2,0xb7,0xff,0xc4,0x6f,0x42,0x7e,0xc0,0x6,0x97,0xb,0x26,0x1,0x4c,0x81,0x7,0x26,0x2,0x86,0x6,0x8e,0xff,0xc0,0x44,0x25,0x4,0xa7,0x81,0x20,0x4,0xa7,0x80,0xa7,0x80,0x8c,0xff,0xc6,0x2c,0x2,0x20,0xee,0x96,0xb,0x48,0x48,0x48,0x48,0x8b,0x80,0xa7,0x42,0x97,0xc,0x20,0xb9,0x8d,0x0,0x8e,0x0,0x0,0x30,0x1f,0x26,0xfc,0x39,0x86,0xa,0xb7,0x1,0x1b,0xad,0x9f,0xa0,0x0,0x4d,0x27,0xf4,0x39,0x8e,0x2,0x0,0xe6,0xa0,0x3a,0xc4,0xf0,0x3a,0xa7,0x84,0xa7,0x88,0x10,0x39,0x55,0x24,0x65,0x69,0x16,0x17,0x18,0x24,0x25,0x29,0x2a,0x33,0x3b,0x43,0x4b,0x53,0x5b,0x62,0x6c,0x72,0x7c,0x82,0x8c,0x92,0x9c,0xa3,0xab,0xb3,0xbb,0xc3,0xcb,0xd4,0xd5,0xd9,0xda,0xe6,0xe7,0xe8,0xff,0xd,0x55,0x59,0x64,0x66,0x68,0x6a,0x75,0x79,0xa5,0xa9,0xb6,0xb7,0xb8,0xaa,0x2,0x87,0x97,0xee,0x8e,0xc5,0x52,0x10,0x8e,0x2,0xea,0x86,0x7,0x17,0xfc,0xf3,0x8e,0x0,0x0,0x6f,0xc4,0x86,0x36,0x8d,0x1b,0x81,0x81,0x26,0x12,0x86,0x34,0x8d,0x13,0x81,0x80,0x26,0xa,0x30,0x1f,0x26,0xec,0x8e,0xc6,0xce,0x7e,0xc7,0xb6,0x8e,0xc6,0xe0,0x20,0xf8,0xa7,0x41,0xe6,0xc4,0x80,0x34,0xa7,0xc4,0x7c,0x2,0x70,0x86,0x9,0x4a,0x26,0xfd,0xa6,0x41,0x84,0x80,0x97,0xb,0xa6,0x42,0x84,0x1,0x9b,0xb,0x39,0x10,0x6,0x52,0x53,0x6d,0x72,0x73,0x72,0x60,0x50,0x4f,0x52,0x54,0x60,0x47,0x4f,0x4f,0x44,0x10,0x6,0x52,0x53,0x6d,0x72,0x73,0x72,0x60,0x50,0x4f,0x52,0x54,0x60,0x42,0x41,0x44,0x8e,0xc7,0x27,0x8d,0x69,0x86,0xfe,0x97,0x6f,0x86,0x39,0xb7,0x1,0x67,0x8e,0x0,0x1,0x9f,0x97,0x8e,0x0,0x58,0x9f,0x95,0xf,0x9c,0x86,0x84,0x97,0x9b,0x86,0xd,0xad,0x9f,0xa0,0x2,0x86,0x20,0xad,0x9f,0xa0,0x2,0x4c,0x2a,0xf9,0x86,0xd,0xad,0x9f,0xa0,0x2,0x7e,0xc0,0x6,0x15,0x4,0x49,0x53,0x60,0x54,0x48,0x45,0x60,0x50,0x52,0x49,0x4e,0x54,0x45,0x52,0x60,0x52,0x45,0x41,0x44,0x59,0x7f,0x42,0x45,0x51,0x56,0x52,0x53,0x43,0x4b,0x4a,0x4c,0x50,0xc6,0xf1,0xc2,0xb9,0xc0,0x38,0xc1,0x18,0xc7,0x69,0xc1,0xce,0xc6,0x81,0xc5,0x91,0xc2,0x97,0xc4,0xb8,0xc4,0x25,0xbd,0xc3,0x7a,0xbd,0xc6,0x2b,0xbd,0xc3,0xc2,0x39,0x8e,0xc7,0xcb,0x8d,0xf1,0x8e,0x6,0x0,0x9f,0x7e,0xcc,0x12,0x18,0xdd,0x8f,0xcc,0x2,0xff,0xdd,0x7c,0xcc,0xa,0x1,0xdd,0x91,0x4f,0xa7,0x80,0x4c,0x26,0xfb,0xad,0x9f,0xa0,0xc,0xad,0x9f,0xa0,0x8,0x8d,0x32,0x8e,0xc7,0xdf,0x8d,0xc8,0x8e,0x2,0x80,0x9f,0x7e,0xad,0x9f,0xa0,0x4,0xad,0x9f,0xa0,0x6,0x8d,0x1e,0x8e,0x2,0x80,0x4f,0xa1,0x80,0x26,0x11,0x4c,0x81,0xff,0x26,0xf7,0x8e,0xc7,0xe9,0xbd,0xc3,0x7a,0xbd,0xc6,0x2b,0x7e,0xc0,0x6,0x8e,0xc7,0xf3,0x20,0xf2,0xa6,0x41,0x84,0xf7,0xa7,0x41,0x39,0x12,0x5,0x49,0x53,0x60,0x52,0x45,0x43,0x4f,0x52,0x44,0x45,0x52,0x60,0x52,0x45,0x41,0x44,0x59,0x7f,0x8,0x7,0x52,0x45,0x57,0x49,0x4e,0x44,0x60,0xfe,0x8,0x7,0xfe,0x49,0x53,0x60,0x47,0x4f,0x4f,0x44,0x6,0x8,0xfe,0x45,0x52,0x52,0x4f,0x52,0x60,0x54,0x45,0x53,0x54 };

// DragonFire
uint8_t CARTRIDGE_1[0x4000] = {0x1a,0xff,0x86,0xff,0x1f,0x8b,0x97,0xc0,0x97,0xc3,0x97,0xc5,0x97,0xc6,0x97,0xc8,0x97,0xca,0x97,0xcd,0x97,0xce,0x97,0xd0,0x97,0xd2,0x97,0xd4,0x97,0xda,0x97,0xdd,0x97,0xde,0xf,0x23,0xc6,0xfa,0xd7,0x22,0xc6,0x34,0xd7,0x23,0xc6,0xe0,0xd7,0x22,0xf,0x21,0xc6,0xfe,0xd7,0x20,0xc6,0x34,0xd7,0x21,0xf,0x20,0xf,0x3,0xc6,0xff,0xd7,0x2,0xd7,0x3,0x8e,0x40,0x0,0x6f,0x84,0x30,0x1f,0x26,0xfa,0xcc,0xa5,0xa5,0xfd,0x0,0x24,0xcc,0x28,0x0,0xfd,0x0,0x29,0xfd,0x0,0x2b,0xfd,0x0,0x33,0xfd,0x0,0x2d,0xfd,0x0,0x2f,0xfd,0x0,0x31,0x10,0xce,0x8,0x0,0xbd,0xd2,0x30,0xcc,0x0,0xaf,0xfd,0x0,0x39,0xfd,0x0,0x3b,0x86,0x31,0xb7,0x0,0x50,0x86,0xff,0xb7,0x0,0x7b,0x7e,0xd0,0x59,0x86,0x34,0xb7,0xff,0x1,0xb6,0x0,0x12,0x81,0x2,0x26,0x5,0x86,0x35,0x7e,0xc0,0x98,0x86,0x37,0xb7,0xff,0x3,0xb6,0xff,0x2,0xb6,0xff,0x0,0x13,0x86,0x34,0xb7,0xff,0x3,0xb6,0xff,0x2,0xb6,0xff,0x0,0x86,0x37,0xb7,0xff,0x1,0xb6,0x0,0x12,0xb1,0x0,0x13,0x27,0x6,0xb7,0x0,0x13,0x7e,0xd0,0x59,0xbe,0x0,0x0,0x30,0x1,0xbf,0x0,0x0,0x8e,0x0,0x6a,0xb6,0x0,0x45,0xa6,0x86,0xb7,0x0,0x6a,0x10,0xce,0x8,0x0,0xbd,0xd2,0xd7,0x7f,0xff,0x20,0x86,0x34,0xb7,0xff,0x23,0x8e,0x0,0x0,0x86,0x7f,0xb7,0x0,0x5,0x86,0x80,0xb7,0x0,0x4,0xa6,0x89,0xd3,0x44,0xb7,0xff,0x1,0xa6,0x89,0xd3,0x48,0xb7,0xff,0x3,0x86,0x40,0xb7,0xff,0x20,0x1e,0x88,0x1e,0x88,0xb6,0xff,0x0,0x2a,0x25,0x86,0xc0,0xb7,0xff,0x20,0x1e,0x88,0x1e,0x88,0xb6,0xff,0x0,0x2b,0x38,0xf4,0x0,0x5,0x1a,0x1,0x76,0x0,0x5,0xf4,0x0,0x5,0x76,0x0,0x5,0x74,0x0,0x4,0x74,0x0,0x4,0x7e,0xc1,0x67,0xfa,0x0,0x4,0x74,0x0,0x4,0x74,0x0,0x4,0x1a,0x1,0x76,0x0,0x5,0xf4,0x0,0x5,0x76,0x0,0x5,0x1e,0x88,0x1e,0x88,0x1e,0x88,0x10,0xbe,0x0,0x0,0x7e,0xc1,0x67,0x74,0x0,0x4,0xfa,0x0,0x4,0x74,0x0,0x4,0xf4,0x0,0x5,0x1a,0x1,0x76,0x0,0x5,0x76,0x0,0x5,0x12,0x12,0x30,0x1,0x8c,0x0,0x4,0x10,0x26,0xff,0x7f,0xb6,0x0,0x45,0x3d,0xc4,0xf0,0xb6,0x0,0x7b,0x27,0x1,0x5f,0xf7,0x0,0x2,0xb6,0x0,0x12,0x81,0x2,0x26,0x8,0x86,0xe5,0xb7,0xff,0x22,0x7e,0xca,0x69,0x8e,0x1a,0x20,0xec,0x89,0x18,0x0,0xed,0x84,0xa7,0x2,0xec,0x89,0x18,0x1d,0xed,0x88,0x1d,0xa7,0x88,0x1f,0x30,0x88,0x20,0x8c,0x1c,0x60,0x26,0xe6,0x8e,0x0,0x14,0x10,0xce,0x7f,0x0,0xb6,0xff,0x0,0x13,0xb6,0xff,0x0,0x13,0xcc,0xe5,0xed,0x97,0x22,0x34,0xfe,0x34,0xc1,0xd7,0x22,0x34,0xc7,0x30,0x1f,0x26,0xef,0x34,0x0,0x97,0x22,0x34,0xc3,0x34,0xc3,0xd7,0x22,0x34,0xc1,0x30,0x1,0x8c,0x0,0x3,0x26,0xed,0x34,0x3,0x97,0x22,0x34,0xff,0xf7,0xff,0x22,0x34,0xc7,0x30,0x1,0x8c,0x0,0x1a,0x26,0xee,0x34,0x1,0x97,0x22,0x34,0xc1,0x34,0xc1,0xd7,0x22,0x34,0xc3,0x30,0x1,0x8c,0x0,0x3f,0x26,0xed,0x34,0x0,0x97,0x22,0x34,0xc3,0x34,0xc3,0xd7,0x22,0x34,0xc1,0x30,0x1,0x8c,0x0,0x57,0x26,0xed,0x34,0x1,0x97,0x22,0x34,0xc1,0x34,0xc1,0xd7,0x22,0x34,0xc3,0x30,0x1,0x8c,0x0,0x5b,0x26,0xed,0x34,0x1,0x97,0x22,0x1f,0x88,0xd7,0x22,0x97,0x22,0x1f,0x88,0xd7,0x22,0x34,0xc3,0x30,0x1,0x8c,0x0,0x61,0x26,0xe9,0xfe,0x0,0x2d,0x10,0x8e,0x0,0x12,0xa6,0xc9,0x18,0x2,0xa7,0x42,0x33,0xc8,0x20,0x31,0x3f,0x26,0xf3,0xfe,0x0,0x29,0x10,0x8e,0x0,0x6,0xec,0xc9,0x18,0x0,0xed,0xc4,0x33,0xc8,0x20,0x31,0x3f,0x26,0xf3,0xfe,0x0,0x33,0x10,0x8e,0x0,0xd,0xec,0xc9,0x18,0x0,0xed,0xc0,0x33,0xc8,0x1f,0x31,0x3f,0x26,0xf3,0xfe,0x0,0x2f,0x10,0x8e,0x0,0x4,0xec,0xc9,0x18,0x0,0xed,0xc1,0xa6,0xc9,0x18,0x0,0xa7,0xc1,0x33,0xc8,0x1c,0x31,0x3f,0x26,0xed,0xfe,0x0,0x31,0x10,0x8e,0x0,0x4,0xec,0xc9,0x18,0x0,0xed,0xc1,0xa6,0xc9,0x18,0x0,0xa7,0xc1,0x33,0xc8,0x1c,0x31,0x3f,0x26,0xed,0x34,0x7,0xb6,0xff,0x0,0x13,0xcc,0xe5,0xed,0xcc,0xe5,0xed,0x97,0x22,0xd7,0x22,0x34,0xc7,0x97,0x22,0xd7,0x22,0x34,0xc3,0x30,0x1,0x8c,0x0,0x62,0x26,0xe7,0x34,0x1,0x97,0x22,0x1f,0x88,0xd7,0x22,0x97,0x22,0x1f,0x88,0xd7,0x22,0x34,0xc3,0x30,0x1,0x8c,0x0,0x66,0x26,0xe9,0x34,0x0,0x97,0x22,0x34,0x3,0xd7,0x22,0x97,0x22,0x34,0x3,0xd7,0x22,0x34,0xc1,0x30,0x1,0x8c,0x0,0x68,0x26,0xe9,0x12,0x12,0x97,0x22,0x12,0xd7,0x22,0x97,0x22,0x12,0x12,0xd7,0x22,0xb7,0xff,0x22,0xf7,0xff,0x22,0x34,0xf,0x30,0x1,0x8c,0x0,0x69,0x26,0xe4,0x12,0x12,0x97,0x22,0xd7,0x22,0x1a,0x0,0x97,0x22,0x12,0xd7,0x22,0x1a,0x0,0x97,0x22,0xd7,0x22,0x34,0xc1,0x34,0xc3,0x1a,0x0,0x97,0x22,0xf7,0xff,0x22,0x12,0x12,0x97,0x22,0xd7,0x22,0x12,0x12,0x97,0x22,0xf7,0xff,0x22,0x34,0xc1,0x34,0xc1,0x1a,0x0,0x97,0x22,0xd7,0x22,0x34,0xf,0x34,0xf,0x97,0x22,0xd7,0x22,0x10,0xfe,0x0,0x2d,0x8e,0x0,0x12,0xec,0xe9,0x18,0x0,0xed,0xe4,0x32,0xe8,0x20,0x30,0x1f,0x26,0xf3,0xb6,0x0,0x6a,0x81,0x3,0x25,0x21,0xb6,0x0,0x1,0x84,0x3,0x26,0x1a,0xbe,0x0,0x16,0x27,0x5,0x8c,0x0,0x40,0x26,0x8,0xb6,0x0,0x15,0x88,0xf8,0xb7,0x0,0x15,0xb6,0x0,0x15,0x30,0x86,0xbf,0x0,0x16,0xbe,0x0,0x16,0xec,0x89,0xef,0x27,0xfd,0x1c,0xa6,0xfd,0x1c,0xc6,0x84,0xaa,0xc4,0xaa,0xfd,0x1c,0x66,0xfd,0x1c,0x86,0xec,0x89,0xef,0x29,0xfd,0x1c,0xa8,0xfd,0x1c,0xc8,0x84,0xaa,0xc4,0xaa,0xfd,0x1c,0x68,0xfd,0x1c,0x88,0xb6,0x0,0x6a,0x81,0x5,0x24,0x5,0x8e,0x0,0x8,0x20,0x21,0xb6,0x0,0x26,0x27,0x6,0x7a,0x0,0x26,0x7e,0xc4,0xa,0xb6,0x0,0x1,0x8b,0x1,0x84,0x3,0x26,0x2d,0xb6,0x0,0x23,0x81,0x8,0x27,0x26,0xbe,0x0,0x22,0x7c,0x0,0x23,0xa6,0x89,0xd3,0x4e,0x10,0x8e,0x10,0xc2,0xc6,0x1e,0x3d,0x8e,0xef,0xab,0x3a,0xec,0x81,0xed,0xa1,0xa6,0x80,0xa7,0xa4,0x31,0xa8,0x1e,0x10,0x8c,0x12,0x2,0x26,0xef,0xb6,0x0,0x28,0x81,0x5,0x26,0x9,0xcc,0x28,0x0,0xfd,0x0,0x2b,0x7e,0xc4,0x73,0xb6,0x0,0x28,0x26,0xb,0x86,0xf0,0xb7,0x1,0x4a,0xcc,0x0,0xf0,0xfd,0x1,0x48,0xfc,0x1,0x48,0x27,0x7,0x10,0xce,0x8,0x0,0xbd,0xd2,0xe9,0xfc,0x0,0x29,0x83,0x0,0xa0,0xfd,0x0,0x33,0xfd,0x0,0x2b,0x1f,0x3,0xbe,0x0,0x27,0xe6,0x89,0xd3,0x56,0x86,0x1a,0x3d,0x8e,0xf0,0x41,0x3a,0x10,0x8e,0x0,0x0,0xec,0xc4,0xaa,0x80,0xea,0x80,0xed,0xc4,0x33,0xc8,0x20,0x31,0x21,0x10,0x8c,0x0,0xd,0x26,0xed,0xb6,0x0,0x1,0x84,0x7,0x26,0x3,0x7c,0x0,0x28,0xb6,0x0,0x6a,0x81,0x5,0x10,0x25,0x0,0xc4,0xb6,0x0,0x23,0x81,0x4,0x10,0x23,0x0,0xbb,0xb6,0x0,0x28,0x81,0x4,0x10,0x23,0x0,0xb2,0xb6,0x0,0x18,0x81,0x5c,0x26,0x34,0xb6,0x0,0x24,0x8a,0x8,0x84,0x2f,0xb7,0x0,0x26,0x84,0x7,0x48,0xb7,0x0,0x21,0xcc,0x4,0x0,0xfd,0x0,0x18,0xcc,0x14,0xff,0xfd,0x0,0x1a,0xcc,0x0,0x0,0xfd,0x0,0x1c,0xcc,0x0,0xfe,0xfd,0x0,0x1e,0x7f,0x0,0x23,0x7f,0x0,0x28,0x7f,0x0,0x27,0x7e,0xc5,0x40,0xbe,0x0,0x20,0xb6,0x0,0x1d,0x81,0xf0,0x24,0x7,0xab,0x89,0xef,0x9b,0xb7,0x0,0x1d,0xb6,0x0,0x1,0x84,0x1,0x26,0xe,0xb6,0x0,0x1f,0x81,0x10,0x23,0x7,0xa0,0x89,0xef,0x9c,0xb7,0x0,0x1f,0x7f,0x0,0x1c,0xfc,0x0,0x1c,0xf3,0x0,0x18,0xfd,0x0,0x18,0x7f,0x0,0x1e,0xfc,0x0,0x1e,0xf3,0x0,0x1a,0xfd,0x0,0x1a,0x86,0x20,0xf6,0x0,0x18,0x3d,0xc3,0x10,0x0,0x1f,0x1,0xf6,0x0,0x1a,0x54,0x54,0x3a,0xbf,0x0,0x29,0x1f,0x13,0xf6,0x0,0x1a,0xc4,0x3,0x86,0xc,0x3d,0x8e,0xef,0x6b,0x3a,0x10,0x8e,0x0,0x0,0xec,0xc4,0xaa,0x80,0xea,0x80,0xed,0xc4,0x33,0xc8,0x20,0x31,0x21,0x10,0x8c,0x0,0x6,0x26,0xed,0xb6,0x0,0x35,0x81,0x74,0x26,0x36,0x86,0x4,0xb7,0x0,0x35,0xb6,0x0,0x41,0x81,0x3d,0x25,0x8,0xb6,0x0,0x4b,0x26,0x3,0x7e,0xc5,0x63,0x86,0xff,0xb7,0x0,0x3d,0x7e,0xc5,0x6b,0xb6,0x0,0x24,0x84,0x7f,0xb7,0x0,0x3d,0xf6,0x0,0x24,0xb6,0x0,0x6a,0x81,0x9,0x25,0x2,0xca,0xc0,0xca,0x80,0x4f,0xfd,0x0,0x39,0xb6,0x0,0x37,0x81,0x74,0x26,0x32,0xcc,0x4,0x0,0xfd,0x0,0x37,0xb6,0x0,0x41,0x81,0x3d,0x2c,0x8,0x86,0xff,0xb7,0x0,0x3e,0x7e,0xc5,0xa4,0xb6,0x0,0x24,0xbb,0x0,0x1,0x84,0x7f,0xb7,0x0,0x3e,0xf6,0x0,0x25,0xb6,0x0,0x6a,0x81,0x9,0x25,0x2,0xca,0xc0,0xca,0x80,0x4f,0xfd,0x0,0x3b,0xb6,0x0,0x3d,0x27,0x6,0x7a,0x0,0x3d,0x7e,0xc5,0xff,0xfc,0x0,0x39,0xf3,0x0,0x35,0xfd,0x0,0x35,0x84,0x3,0xc6,0xc,0x3d,0x8e,0xf0,0x8f,0x3a,0x4f,0xf6,0x0,0x35,0x54,0x54,0xc3,0x1a,0x20,0x1f,0x2,0x10,0xbf,0x0,0x2f,0x10,0xce,0x0,0x0,0xec,0xa4,0xaa,0x80,0xea,0x80,0xed,0xa1,0xa6,0xa4,0xaa,0x80,0xa7,0xa4,0x31,0xa8,0x1e,0x32,0x61,0x11,0x8c,0x0,0x4,0x26,0xe7,0xb6,0x0,0x3e,0x27,0x6,0x7a,0x0,0x3e,0x7e,0xc6,0x48,0xfc,0x0,0x3b,0xf3,0x0,0x37,0xfd,0x0,0x37,0x84,0x3,0xc6,0xc,0x3d,0x8e,0xf0,0x8f,0x3a,0x4f,0xf6,0x0,0x37,0x54,0x54,0xc3,0x1b,0xa0,0x1f,0x2,0x10,0xbf,0x0,0x31,0x10,0xce,0x0,0x0,0xec,0xa4,0xaa,0x80,0xea,0x80,0xed,0xa1,0xa6,0xa4,0xaa,0x80,0xa7,0xa4,0x31,0xa8,0x1e,0x32,0x61,0x11,0x8c,0x0,0x4,0x26,0xe7,0xb6,0x0,0x57,0x81,0x1,0x26,0x5,0x86,0x20,0xb7,0x0,0x58,0xb6,0x0,0x4b,0x10,0x27,0x0,0x5e,0xb6,0x0,0x3f,0x81,0x90,0x26,0x5,0xc6,0x27,0xf7,0x0,0x57,0x81,0x90,0x10,0x23,0x0,0x2d,0xf6,0x0,0x57,0x10,0x26,0x0,0x38,0xf6,0x0,0x58,0x27,0x6,0x7a,0x0,0x58,0x7e,0xc8,0x5,0xb6,0x0,0x3d,0x10,0x27,0x1,0x7f,0xb6,0x0,0x3e,0x10,0x27,0x1,0x78,0x10,0xce,0x8,0x0,0xbd,0xd2,0x30,0xbd,0xd2,0xab,0x7e,0xc8,0x5,0x7c,0x0,0x3f,0xf6,0x0,0x41,0xc4,0xfc,0xf7,0x0,0x41,0x81,0x80,0x23,0x3,0x7a,0x0,0x4d,0xf6,0x0,0x3f,0xc4,0xc,0x57,0x8e,0xd3,0x81,0x3a,0x7e,0xc7,0xca,0xb6,0x0,0x41,0x81,0xc,0x23,0x6c,0x81,0x70,0x2c,0x68,0xf6,0x0,0x2,0xc5,0x10,0x27,0x6,0x7f,0x0,0x49,0x7e,0xc7,0x2c,0xb6,0x0,0x49,0x26,0x29,0xb6,0x0,0x4a,0x26,0x4e,0xb6,0x0,0x7b,0x26,0x4c,0xb6,0xff,0x0,0xf6,0x0,0x45,0xc1,0x1,0x27,0x1,0x48,0x85,0x2,0x26,0x3d,0x8e,0xd3,0x6d,0xbf,0x0,0x43,0x86,0x18,0xb7,0x0,0x49,0x86,0x10,0xb7,0x0,0x4a,0x7a,0x0,0x49,0xf6,0x0,0x2,0xc5,0x20,0x27,0xf,0xbe,0x0,0x41,0x30,0x88,0x88,0xbf,0x0,0x41,0x8e,0xd3,0x71,0x7e,0xc7,0x1b,0x8e,0xd3,0x6f,0xb6,0x0,0x3f,0x81,0x4d,0x27,0x1,0x4a,0xb7,0x0,0x3f,0x7e,0xc7,0xca,0x7a,0x0,0x4a,0xf6,0x0,0x2,0xc5,0x40,0x27,0x11,0x8e,0xd3,0x79,0x86,0x51,0xb7,0x0,0x3f,0x7f,0x0,0x4a,0x7f,0x0,0x49,0x7e,0xc7,0xca,0xf6,0x0,0x2,0xb6,0x0,0x41,0x81,0x14,0x22,0x2,0xca,0x20,0x86,0x51,0xb7,0x0,0x3f,0x8e,0x0,0x0,0xc5,0x10,0x27,0x17,0x8e,0xd3,0x63,0xb6,0x0,0x41,0x81,0x74,0x2c,0xa,0xfe,0x0,0x41,0x33,0xc9,0x0,0xd0,0xff,0x0,0x41,0x7e,0xc7,0x8b,0xc5,0x20,0x27,0x17,0x8e,0xd3,0x5b,0xb6,0x0,0x41,0x81,0x4,0x23,0xa,0xfe,0x0,0x41,0x33,0xc9,0xff,0x70,0xff,0x0,0x41,0xbf,0x0,0x43,0x8c,0x0,0x0,0x26,0x37,0xbe,0x0,0x43,0x8c,0xd3,0x63,0x26,0x19,0xb6,0x0,0x41,0x84,0x3,0x26,0x6,0x8e,0xd3,0x6b,0x7e,0xc7,0xca,0xfe,0x0,0x41,0x33,0xc8,0x40,0xff,0x0,0x41,0x7e,0xc7,0xca,0xb6,0x0,0x41,0x84,0x3,0x26,0x6,0x8e,0xd3,0x6d,0x7e,0xc7,0xca,0xfe,0x0,0x41,0x33,0xc8,0xc0,0xff,0x0,0x41,0xf6,0x0,0x41,0x58,0xc4,0x7,0xae,0x85,0x1f,0x12,0x86,0x20,0xf6,0x0,0x3f,0x3d,0xc3,0x10,0x0,0x1f,0x1,0xf6,0x0,0x41,0x54,0x54,0x3a,0xbf,0x0,0x2d,0x10,0xce,0x0,0x0,0xec,0xa1,0xaa,0x84,0xea,0x1,0xed,0x81,0xa6,0xa0,0xaa,0x84,0xa7,0x84,0x30,0x88,0x1e,0x32,0x61,0x11,0xbc,0x0,0x4c,0x26,0xe7,0xb6,0x0,0x57,0x27,0x4d,0x7a,0x0,0x57,0x44,0x44,0x84,0xfe,0x8e,0xd3,0xb3,0xae,0x86,0xce,0x0,0x0,0x10,0x8e,0x21,0x0,0xb6,0x0,0x41,0x44,0x44,0x31,0xa6,0xec,0xa9,0x18,0x0,0xa4,0x80,0xe4,0x80,0xed,0xa4,0x31,0xa8,0x20,0x33,0x41,0x11,0x83,0x0,0xc,0x26,0xeb,0xb6,0x0,0x57,0x81,0x26,0x26,0xb,0x86,0xfc,0xb7,0x1,0x4a,0xcc,0x0,0x80,0xfd,0x1,0x48,0xfc,0x1,0x48,0x27,0x7,0x10,0xce,0x8,0x0,0xbd,0xd2,0xe9,0xb6,0x0,0x4b,0x10,0x26,0x0,0x92,0xb6,0x0,0x41,0x81,0x6b,0x10,0x24,0x0,0x89,0x81,0x8,0x10,0x23,0x0,0x83,0xb6,0x0,0x49,0x26,0x18,0xb6,0x0,0x37,0x8b,0x4,0xb0,0x0,0x41,0x81,0x5,0x22,0x5,0x86,0x1,0xb7,0x0,0x4b,0xf6,0x0,0x2,0xc5,0x40,0x26,0x11,0xb6,0x0,0x35,0x8b,0x4,0xb0,0x0,0x41,0x81,0x5,0x22,0x5,0x86,0x1,0xb7,0x0,0x4b,0xb6,0x0,0x18,0x81,0x4e,0x23,0x11,0xb6,0x0,0x1a,0x8b,0x2,0xb0,0x0,0x41,0x81,0x9,0x24,0x5,0x86,0x1,0xb7,0x0,0x4b,0xb6,0x0,0x2c,0x84,0x1f,0x48,0x48,0x8b,0x6,0xb0,0x0,0x41,0x81,0xc,0x24,0x5,0x86,0x1,0xb7,0x0,0x4b,0xb6,0x0,0x49,0x26,0x23,0xfc,0x0,0x16,0x54,0x54,0xc8,0xff,0xc4,0xf,0xf7,0x0,0x56,0xf6,0x0,0x41,0xc1,0x24,0x22,0x10,0xc1,0x14,0x23,0xc,0xc0,0x15,0xf1,0x0,0x56,0x23,0x5,0x86,0x1,0xb7,0x0,0x4b,0xb6,0x0,0x41,0x81,0xc,0x26,0xf,0x86,0x2,0xb7,0x0,0x12,0x86,0x64,0xb7,0x0,0x41,0x86,0x32,0xb7,0x0,0x3f,0xb6,0x0,0x4b,0x26,0x5,0x7f,0x1,0x4b,0x20,0x21,0xbe,0x1,0x48,0x26,0x15,0xb6,0x1,0x4b,0x26,0x10,0x86,0xe0,0xb7,0x1,0x4b,0xb7,0x1,0x4a,0x10,0xce,0x1,0x80,0x10,0xff,0x1,0x48,0x10,0xce,0x8,0x0,0xbd,0xd2,0xe9,0xb6,0x0,0x12,0x10,0x27,0x0,0x99,0x8e,0x0,0x9,0x10,0x8e,0xfd,0x90,0xb6,0x0,0x1,0x84,0x7,0x81,0x5,0x27,0xd,0x81,0x6,0x26,0x24,0x10,0xce,0x26,0xca,0xb6,0x0,0x5a,0x20,0xc,0x10,0xce,0x26,0xd9,0xb6,0x0,0x7a,0x27,0x12,0xb6,0x0,0x69,0xc6,0x9,0x3d,0xa6,0xa5,0xa7,0xe4,0x5c,0x32,0xe8,0x20,0x30,0x1f,0x26,0xf4,0x8e,0x0,0x9,0x10,0x8e,0xfd,0x90,0xb6,0x0,0x1,0x84,0x7,0x27,0xe,0x81,0x1,0x27,0x19,0x81,0x2,0x27,0x20,0x81,0x3,0x27,0x2b,0x20,0x45,0x10,0xce,0x26,0xc3,0xb6,0x0,0x6b,0x44,0x44,0x44,0x44,0x27,0x2,0x20,0x27,0x10,0xce,0x26,0xc5,0xb6,0x0,0x6b,0x84,0xf,0x20,0x1c,0x10,0xce,0x26,0xd2,0xb6,0x0,0x7a,0x44,0x44,0x44,0x44,0x27,0x2,0x20,0xd,0x10,0xce,0x26,0xd4,0xb6,0x0,0x7a,0x27,0x13,0x84,0xf,0x20,0x0,0xc6,0x9,0x3d,0xa6,0xa5,0xa7,0xe4,0x5c,0x32,0xe8,0x20,0x30,0x1f,0x26,0xf4,0xb6,0x1,0x47,0x26,0x79,0xb6,0x0,0x7b,0x27,0x74,0xb6,0x0,0x12,0x27,0x6,0x81,0x6,0x27,0x2,0x20,0x69,0x86,0xfd,0xb7,0xff,0x2,0xb6,0xff,0x0,0x85,0x10,0x27,0x1e,0x86,0xfb,0xb7,0xff,0x2,0xb6,0xff,0x0,0x85,0x10,0x27,0x28,0xb6,0xff,0x0,0x48,0xb4,0xff,0x0,0x85,0x2,0x26,0x46,0xb6,0x1,0x46,0x81,0x2,0x27,0x16,0xc6,0x5,0xf7,0x0,0x5a,0xc6,0x1,0xf7,0x0,0x6b,0xf7,0x1,0x46,0x5f,0xf7,0x0,0x7a,0xf7,0x0,0x69,0x20,0x15,0xc6,0x6,0xf7,0x0,0x69,0x5a,0xf7,0x0,0x5a,0xc6,0x1,0xf7,0x0,0x7a,0xf7,0x0,0x6b,0x5c,0xf7,0x1,0x46,0xc6,0x4,0xf7,0x0,0x12,0x86,0x1,0xb7,0x0,0x45,0x10,0xce,0x8,0x0,0xbd,0xd2,0x30,0xbd,0xd1,0xda,0x86,0xfb,0xb7,0xff,0x2,0xb6,0xff,0x0,0x85,0x40,0x26,0x3,0x7e,0xc0,0x2,0xb6,0x1,0x47,0x27,0x3,0x7a,0x1,0x47,0x7e,0xc0,0x85,0x8e,0x0,0x18,0x10,0xfe,0x0,0x2d,0xec,0xe9,0x18,0x0,0xed,0xe4,0xec,0xe9,0x18,0x2,0xed,0x62,0x32,0xe8,0x20,0x30,0x1f,0x26,0xed,0x8e,0x0,0xe,0x10,0xbe,0x0,0x2f,0xec,0xa9,0x18,0x0,0xed,0xa4,0xa6,0xa9,0x18,0x2,0xa7,0x22,0x31,0xa8,0x20,0x30,0x1f,0x26,0xed,0xcc,0xaa,0xaa,0x8e,0x21,0x81,0xed,0x84,0xed,0x2,0xa7,0x4,0x30,0x88,0x20,0x8c,0x24,0x81,0x26,0xf2,0xb6,0x0,0xc3,0x10,0x27,0x0,0x84,0x10,0xbe,0x0,0x2d,0xb6,0x0,0x1,0x84,0x3,0x26,0x7,0x31,0xa8,0xe0,0x10,0xbf,0x0,0x2d,0x8e,0x0,0xc6,0x10,0xce,0x0,0x0,0xb6,0x0,0x24,0x84,0x1,0x27,0x1e,0xec,0x81,0xaa,0xa4,0xea,0x21,0xed,0xa1,0xec,0x81,0xaa,0xa4,0xea,0x21,0xed,0xa1,0x31,0xa8,0x1c,0x32,0x61,0x11,0x8c,0x0,0x18,0x26,0xe5,0x7e,0xcb,0x15,0xec,0x81,0x43,0x53,0xa4,0xa4,0xe4,0x21,0xed,0xa1,0xec,0x81,0x43,0x53,0xa4,0xa4,0xe4,0x21,0xed,0xa1,0x31,0xa8,0x1c,0x32,0x61,0x11,0x8c,0x0,0x18,0x26,0xe1,0x10,0x8e,0x0,0xc6,0x8e,0xcb,0x38,0xf6,0x0,0x24,0xc4,0x3f,0xb6,0x0,0x25,0x84,0x3,0xa6,0x86,0xa4,0xa5,0xa7,0xa5,0xfb,0x0,0x25,0xc4,0x7f,0xa4,0xa5,0xa7,0xa5,0x7e,0xcc,0xa7,0x3f,0xcf,0xf3,0xfc,0xf6,0x0,0x2,0x27,0x6,0xf7,0x0,0x53,0x7e,0xcb,0x57,0xb6,0x0,0x41,0x84,0x3,0x26,0x9,0x7f,0x0,0x53,0xce,0xd3,0xa9,0x7e,0xcc,0x46,0xb6,0x0,0x53,0x81,0x80,0x27,0x6,0x81,0x40,0x27,0x2,0x20,0xb,0xb6,0x0,0x89,0x84,0x30,0xba,0x0,0x53,0xb7,0x0,0x53,0x8e,0xed,0xed,0xb6,0x0,0x41,0x84,0xfc,0x44,0xec,0x86,0xb1,0x0,0x3f,0x25,0x17,0xb6,0x0,0x41,0x81,0x38,0x25,0x5,0x86,0x20,0x7e,0xcb,0x8d,0x86,0x10,0xb7,0x0,0x89,0xf4,0x0,0x53,0xf7,0x0,0x53,0xf6,0x0,0x53,0xb6,0x0,0x41,0x81,0x4,0x22,0x2,0xc4,0xd0,0x81,0x74,0x25,0x2,0xc4,0xe0,0xb6,0x0,0x3f,0x81,0x8f,0x25,0x2,0xc4,0xb0,0x81,0x70,0x25,0x9,0xb6,0x0,0x41,0x81,0x18,0x22,0x2,0xc4,0xb0,0x81,0x18,0x22,0x9,0xb6,0x0,0x3f,0x81,0x70,0x25,0x2,0xc4,0xd0,0xf7,0x0,0x53,0xb6,0x0,0x53,0x10,0xbe,0x0,0x3f,0xbe,0x0,0x41,0xfe,0x0,0x54,0x81,0xa0,0x26,0xe,0x31,0xa9,0xfe,0x80,0x30,0x89,0xfe,0xe0,0xce,0xd3,0xa1,0xb7,0x0,0x89,0x81,0x90,0x26,0xe,0x31,0xa9,0xfe,0x80,0x30,0x89,0x1,0x20,0xce,0xd3,0x99,0xb7,0x0,0x89,0x81,0x60,0x26,0xe,0x31,0xa9,0x1,0x80,0x30,0x89,0xfe,0xe0,0xce,0xd3,0xa1,0xb7,0x0,0x89,0x81,0x50,0x26,0xe,0x31,0xa9,0x1,0x80,0x30,0x89,0x1,0x20,0xce,0xd3,0x99,0xb7,0x0,0x89,0x81,0x20,0x26,0xa,0x30,0x89,0xfe,0xe0,0xce,0xd3,0xa1,0xb7,0x0,0x89,0x81,0x10,0x26,0xa,0x30,0x89,0x1,0x20,0xce,0xd3,0x99,0xb7,0x0,0x89,0x10,0xbf,0x0,0x3f,0xbf,0x0,0x41,0xff,0x0,0x54,0xb6,0x0,0x3f,0xc6,0x20,0x3d,0xc3,0x10,0x0,0x1f,0x2,0xb6,0x0,0x41,0x44,0x44,0x31,0xa6,0x10,0xbf,0x0,0x2d,0xb6,0x0,0x41,0x84,0x3,0x48,0xbe,0x0,0x54,0xae,0x86,0x4f,0xce,0xee,0x27,0x10,0xce,0x0,0x0,0xe6,0x84,0xe6,0xcb,0xe4,0xa4,0xea,0x84,0xe7,0xa4,0xe6,0x1,0xe6,0xcb,0xe4,0x21,0xea,0x1,0xe7,0x21,0xe6,0x2,0xe6,0xcb,0xe4,0x22,0xea,0x2,0xe7,0x22,0xe6,0x3,0xe6,0xcb,0xe4,0x23,0xea,0x3,0xe7,0x23,0x30,0x4,0x31,0xa8,0x20,0x32,0x61,0x11,0x8c,0x0,0x18,0x26,0xcb,0xb6,0x0,0x7e,0x81,0x74,0x24,0x12,0x8e,0xed,0xed,0xb6,0x0,0x7e,0x84,0xfc,0x44,0xec,0x86,0xb1,0x0,0x7c,0x10,0x25,0x0,0xa5,0x86,0x90,0xb7,0x0,0x7c,0x86,0x5,0xb7,0x0,0x7e,0x7f,0x0,0x86,0xb6,0x0,0x41,0x8b,0x4,0xb7,0x0,0x85,0xb6,0x0,0x3f,0x8b,0x8,0xb7,0x0,0x84,0x8e,0xf9,0x41,0xb6,0x0,0x84,0x88,0xff,0x80,0x65,0xf6,0x0,0x85,0xb1,0x0,0x85,0x22,0x23,0xe6,0x85,0x3d,0x44,0x56,0x44,0x56,0x44,0x56,0x44,0x56,0x44,0x56,0xfd,0x0,0x80,0x88,0xff,0xc8,0xff,0x83,0xfc,0x0,0xfd,0x0,0x87,0xcc,0x1,0x0,0xfd,0x0,0x82,0x7e,0xcd,0x2b,0xa6,0x86,0x3d,0x44,0x56,0x44,0x56,0x44,0x56,0x44,0x56,0x44,0x56,0xfd,0x0,0x82,0xfd,0x0,0x87,0xcc,0x1,0x0,0xfd,0x0,0x80,0xb6,0x0,0x6a,0x81,0x7,0x25,0x16,0xfc,0x0,0x82,0x44,0x56,0xf3,0x0,0x82,0xfd,0x0,0x82,0xfc,0x0,0x80,0x44,0x56,0xf3,0x0,0x80,0xfd,0x0,0x80,0xb6,0x0,0x6a,0x81,0x11,0x25,0x16,0xfc,0x0,0x82,0x44,0x56,0xf3,0x0,0x82,0xfd,0x0,0x82,0xfc,0x0,0x80,0x44,0x56,0xf3,0x0,0x80,0xfd,0x0,0x80,0xb6,0x0,0x86,0x26,0x32,0x8e,0xfd,0xea,0xf6,0x0,0x4e,0xc4,0xe,0x58,0x3a,0xfc,0x0,0x87,0x10,0xa3,0x84,0x25,0x3b,0x10,0xa3,0x2,0x22,0x36,0x86,0x1,0xb7,0x0,0x86,0x86,0x20,0xb7,0x0,0x52,0x8e,0xfe,0xa,0xf6,0x0,0x4e,0xc4,0xe,0x3a,0xec,0x84,0xb7,0x0,0x7e,0xf7,0x0,0x7c,0xbe,0x0,0x7e,0xfc,0x0,0x82,0x30,0x8b,0xbf,0x0,0x7e,0xbe,0x0,0x7c,0xfc,0x0,0x80,0x43,0x53,0xc3,0x0,0x1,0x30,0x8b,0xbf,0x0,0x7c,0xb6,0x0,0x86,0x27,0x59,0x10,0x8e,0xd3,0xab,0xb6,0x0,0x7e,0x84,0x3,0x48,0x10,0xae,0xa6,0xb6,0x0,0x7c,0xc6,0x20,0x3d,0xc3,0x10,0x0,0x1f,0x1,0xf6,0x0,0x7e,0x54,0x54,0x3a,0xbf,0x0,0x2f,0x10,0xce,0x0,0x0,0xce,0xee,0x27,0xb6,0x0,0xc3,0x26,0x2c,0x4f,0xe6,0xa4,0xe6,0xcb,0xe4,0x84,0xea,0xa4,0xe7,0x84,0xe6,0x21,0xe6,0xcb,0xe4,0x1,0xea,0x21,0xe7,0x1,0xe6,0x22,0xe6,0xcb,0xe4,0x2,0xea,0x22,0xe7,0x2,0x30,0x88,0x20,0x31,0x23,0x32,0x61,0x11,0x8c,0x0,0xe,0x26,0xd5,0xb6,0x0,0x51,0x26,0x14,0xb6,0x0,0x24,0x84,0x50,0x8a,0x1f,0xb7,0x0,0x50,0xbb,0x0,0x1,0x84,0x1f,0x8a,0x8,0xb7,0x0,0x51,0x7a,0x0,0x51,0xb6,0x0,0x52,0x27,0x5,0x7a,0x0,0x52,0x20,0xb,0xb6,0x0,0x50,0xbe,0x0,0x4e,0x30,0x86,0xbf,0x0,0x4e,0xb6,0x0,0x4e,0x84,0xe,0x8e,0xd3,0x89,0xae,0x86,0x10,0xce,0x0,0x0,0x10,0x8e,0x21,0x81,0xce,0xee,0x27,0x4f,0xe6,0x84,0xe6,0xcb,0xe4,0xa4,0xe7,0xa4,0xe6,0x84,0xc8,0xaa,0xea,0xa4,0xe7,0xa4,0xe6,0x1,0xe6,0xcb,0xe4,0x21,0xe7,0x21,0xe6,0x1,0xc8,0xaa,0xea,0x21,0xe7,0x21,0xe6,0x2,0xe6,0xcb,0xe4,0x22,0xe7,0x22,0xe6,0x2,0xc8,0xaa,0xea,0x22,0xe7,0x22,0xe6,0x3,0xe6,0xcb,0xe4,0x23,0xe7,0x23,0xe6,0x3,0xc8,0xaa,0xea,0x23,0xe7,0x23,0xe6,0x4,0xe6,0xcb,0xe4,0x24,0xe7,0x24,0xe6,0x4,0xc8,0xaa,0xea,0x24,0xe7,0x24,0x31,0xa8,0x20,0x30,0x5,0x32,0x61,0x11,0x8c,0x0,0x18,0x26,0xa3,0x8e,0x0,0x8a,0xa6,0x84,0x48,0x48,0xb7,0x0,0x9b,0xb0,0x0,0x41,0x81,0xa,0x23,0xd,0xb6,0x0,0x41,0xb0,0x0,0x9b,0x81,0x6,0x23,0x3,0x7e,0xce,0xe4,0xb6,0x0,0x3f,0xa0,0x1,0x81,0x8,0x23,0x10,0x81,0xe8,0x22,0xc,0x30,0x2,0x8c,0x0,0x9a,0x10,0x26,0xff,0xcf,0x7e,0xcf,0x47,0xa6,0x1,0xc6,0x20,0x3d,0xc3,0x10,0x0,0x1f,0x2,0xe6,0x84,0x4f,0x31,0xab,0x10,0xce,0x0,0x0,0xcc,0xaa,0xaa,0xed,0xa4,0xed,0xa9,0x18,0x0,0x31,0xa8,0x20,0x32,0x61,0x11,0x8c,0x0,0xd,0x26,0xef,0xc6,0xa,0xb6,0x0,0x6a,0x3d,0xf3,0x0,0x9c,0xfd,0x0,0x9c,0x10,0xce,0x8,0x0,0xcc,0x60,0x30,0xb7,0x1,0x48,0xf7,0x1,0x4c,0xbd,0xd3,0x2,0x10,0xae,0x84,0xcc,0x0,0x0,0xed,0x84,0x10,0xac,0x84,0x26,0x2,0xed,0x84,0x30,0x2,0x8c,0x0,0x9a,0xfc,0x0,0x90,0x26,0x5,0x86,0xff,0xb7,0x0,0xc2,0xfc,0x0,0x9c,0x27,0x29,0x83,0x0,0x1,0xfd,0x0,0x9c,0x8e,0x0,0x9d,0xf6,0x0,0x45,0x3a,0xec,0x84,0xc3,0x0,0x9,0x10,0x83,0xfd,0xe1,0x23,0xf,0xcc,0xfd,0x90,0xed,0x81,0x10,0xae,0x84,0x26,0xeb,0xed,0x84,0x7e,0xcf,0x63,0xed,0x84,0xf6,0x0,0xc0,0xcb,0x1,0xc1,0x5,0x23,0x1,0x5f,0xf7,0x0,0xc0,0x58,0xfb,0x0,0x45,0x8e,0x0,0x9d,0xae,0x85,0x27,0x21,0xf6,0x0,0xc0,0x53,0xc0,0xfa,0x58,0xfb,0x0,0x45,0x10,0x8e,0x25,0x81,0x10,0xce,0x0,0x0,0xa6,0x80,0xa7,0xa5,0x31,0xa8,0x20,0x32,0x61,0x11,0x8c,0x0,0x9,0x26,0xf1,0xb6,0x0,0xc3,0x26,0x33,0xb6,0x0,0x41,0xb0,0x0,0x7e,0x81,0x4,0x25,0xd,0xb6,0x0,0x7e,0xb0,0x0,0x41,0x81,0x8,0x25,0x3,0x7e,0xd0,0x4,0xb6,0x0,0x3f,0xb0,0x0,0x7c,0x81,0x9,0x25,0xd,0xb6,0x0,0x7c,0xb0,0x0,0x3f,0x81,0x14,0x25,0x3,0x7e,0xd0,0x4,0x86,0x80,0xb7,0x0,0xc3,0x7a,0x0,0xc3,0x26,0xf,0x86,0x4,0xb7,0x0,0x12,0x10,0xce,0x8,0x0,0xbd,0xd2,0x30,0xbd,0xd2,0xab,0xb6,0x0,0x3f,0x81,0x28,0x25,0x30,0x81,0x35,0x22,0x2c,0xb6,0x0,0x41,0x81,0x10,0x22,0x25,0xb6,0x0,0xc2,0x27,0x20,0x8e,0x0,0x6a,0xf6,0x0,0x45,0xa6,0x85,0x81,0x99,0x27,0x5,0x8b,0x1,0x19,0xa7,0x85,0x86,0x4,0xb7,0x0,0x12,0x10,0xce,0x8,0x0,0xbd,0xd2,0x30,0x7f,0x0,0xc2,0xb6,0x0,0xc3,0x27,0x16,0x81,0x7f,0x26,0xb,0x8e,0x0,0xf0,0xbf,0x1,0x48,0x86,0xe8,0xb7,0x1,0x4a,0x10,0xce,0x8,0x0,0xbd,0xd2,0xe9,0x7e,0xc0,0x85,0x7f,0xff,0xc2,0x7f,0xff,0xc4,0x7f,0xff,0xcc,0x7f,0xff,0xcb,0x10,0xce,0x8,0x0,0x86,0xa0,0xb7,0x1,0x48,0xb7,0x1,0x4c,0xbd,0xd3,0x2,0xf6,0x0,0x12,0x10,0x8e,0xd3,0x34,0xae,0xa5,0xbf,0x0,0x6,0x10,0x8e,0xd3,0x2c,0xae,0xa5,0xbf,0x0,0x8,0x10,0x8e,0xd3,0x3c,0xae,0xa5,0xbf,0x0,0x10,0xcc,0x0,0x0,0xfd,0x0,0xa,0xfd,0x0,0xc,0xfd,0x0,0xe,0xbe,0x0,0x6,0xa6,0x84,0xc6,0x10,0x3d,0xf3,0x0,0x8,0x1f,0x1,0xcc,0x10,0x0,0xf3,0x0,0xa,0xf3,0x0,0xc,0xf3,0x0,0xe,0x1f,0x2,0xec,0x81,0xed,0xa9,0x18,0x0,0x10,0xbe,0x0,0xa,0x31,0xa8,0x20,0x10,0xbf,0x0,0xa,0x10,0x8c,0x1,0x0,0x26,0xdb,0xbe,0x0,0x6,0x30,0x1,0xbf,0x0,0x6,0x10,0x8e,0x0,0x0,0x10,0xbf,0x0,0xa,0x10,0xbe,0x0,0xc,0x31,0x22,0x10,0xbf,0x0,0xc,0x10,0x8c,0x0,0x20,0x26,0xae,0x10,0x8e,0x0,0x0,0x10,0xbf,0x0,0xc,0x10,0xbe,0x0,0xe,0x31,0xa9,0x1,0x0,0x10,0xbf,0x0,0xe,0x10,0xbc,0x0,0x10,0x26,0x94,0xb6,0x0,0x12,0x81,0x2,0x26,0x5b,0x10,0xce,0x0,0x8a,0xce,0xfc,0xc0,0x10,0x8e,0xfe,0x1a,0xb6,0x0,0x24,0xb7,0x0,0x9b,0xb6,0x0,0x9b,0x8b,0x2,0x84,0x3e,0xb7,0x0,0x9b,0xec,0xa6,0xed,0xe1,0x86,0x20,0x3d,0xc3,0x10,0x0,0x1f,0x1,0xb6,0x0,0x9b,0x84,0x3e,0xe6,0xa6,0x3a,0x7f,0x0,0x9a,0xec,0xc1,0xed,0x89,0x18,0x0,0x30,0x88,0x20,0x7c,0x0,0x9a,0xb6,0x0,0x9a,0x81,0xd,0x26,0xed,0x11,0x8c,0x0,0x9a,0x26,0xc6,0x8e,0x0,0xc6,0x10,0x8e,0xfe,0x5a,0xec,0xa1,0xed,0x81,0x8c,0x1,0x26,0x26,0xf7,0xb6,0x0,0x12,0x81,0x6,0x27,0x1e,0x81,0x4,0x10,0x26,0x0,0x3b,0x86,0xaa,0x8e,0x29,0x0,0xc6,0x6,0xa7,0x85,0x5c,0xc1,0x1a,0x26,0xf9,0xc6,0x6,0x30,0x88,0x20,0x8c,0x2d,0x0,0x26,0xef,0x4f,0x8e,0x32,0x80,0xc6,0xc,0xa7,0x85,0x5c,0xc1,0x13,0x26,0xf9,0xc6,0xc,0x30,0x88,0x20,0x8c,0x34,0x0,0x26,0xef,0x86,0x55,0x8e,0x3a,0xe0,0xa7,0x80,0x8c,0x3c,0xc0,0x26,0xf9,0xb6,0x0,0x12,0x8e,0xd3,0x3c,0xae,0x86,0x30,0x89,0x10,0x0,0xec,0x89,0x17,0xfe,0xed,0x83,0x8c,0x10,0x0,0x26,0xf5,0x7f,0xff,0xc3,0x7f,0xff,0xc5,0x7f,0xff,0xca,0x7f,0xff,0xcd,0x7e,0xc0,0x85,0x86,0x55,0x8e,0x25,0x60,0xa7,0x80,0xa7,0x89,0x17,0xff,0x8c,0x28,0x0,0x26,0xf5,0x8e,0xfe,0xba,0x10,0x8e,0x26,0xc2,0x86,0x8,0xb7,0x0,0x9a,0xee,0x84,0xef,0x24,0xb6,0x0,0x7a,0x27,0x3,0xef,0xa8,0x13,0xee,0x88,0x10,0xef,0x29,0xb6,0x0,0x7a,0x27,0x3,0xef,0xa8,0x18,0x30,0x2,0x31,0xa8,0x20,0x7a,0x0,0x9a,0x26,0xdd,0x7f,0x0,0x7b,0x8e,0x0,0x9c,0x6f,0x80,0x8c,0x0,0xc0,0x26,0xf9,0xcc,0xfd,0x90,0xfd,0x0,0x9e,0xfd,0x0,0xad,0x39,0xcc,0x0,0x12,0xfd,0x0,0x4c,0x7f,0x0,0x4b,0x7f,0x0,0x49,0x7f,0x0,0x86,0x7f,0x0,0x57,0x86,0x68,0xb7,0x0,0x41,0x86,0x51,0xb7,0x0,0x3f,0xcc,0xd3,0x6d,0xfd,0x0,0x43,0x86,0x4,0xb7,0x0,0x35,0xb7,0x0,0x37,0x86,0x20,0xb7,0x0,0x3d,0x86,0x30,0xb7,0x0,0x3e,0xcc,0x0,0x0,0xfd,0x0,0x16,0xfd,0x0,0x22,0xfd,0x0,0x9c,0xb7,0x0,0x7e,0xb7,0x0,0x7c,0x86,0xfc,0xb7,0x0,0x15,0xcc,0x0,0x4,0xfd,0x0,0x20,0xcc,0x4,0x0,0xfd,0x0,0x18,0xcc,0x14,0xff,0xfd,0x0,0x1a,0xcc,0x0,0x66,0xfd,0x0,0x1c,0xcc,0x0,0xda,0xfd,0x0,0x1e,0x86,0x5,0xb7,0x0,0x28,0xcc,0x28,0x0,0xfd,0x0,0x2b,0xcc,0xd3,0xa9,0xfd,0x0,0x54,0x39,0x8e,0x0,0x59,0xb6,0x0,0x45,0x88,0x11,0xe6,0x86,0x26,0x6,0x88,0x11,0xe6,0x86,0x27,0x7,0x6a,0x86,0xb7,0x0,0x45,0x20,0x12,0x86,0xff,0xf6,0x0,0x7b,0x26,0xb,0xb7,0x1,0x47,0xb7,0x0,0x7b,0x86,0x6,0xb7,0x0,0x12,0x39,0xb6,0x0,0x24,0x46,0x46,0x46,0xb8,0x0,0x25,0x48,0x48,0x79,0x0,0x24,0x79,0x0,0x25,0x39,0xbe,0x1,0x48,0x27,0x13,0xb6,0x1,0x4a,0x30,0x86,0xbf,0x1,0x48,0xb6,0x1,0x49,0xb7,0xff,0x20,0x86,0x3c,0xb7,0xff,0x23,0x39,0x86,0x3c,0xb7,0xff,0x23,0xb6,0x1,0x48,0x27,0x1a,0x80,0x4,0xb7,0x1,0x48,0xb7,0xff,0x20,0xf6,0x1,0x4c,0x5a,0x26,0xfd,0x7f,0xff,0x20,0xf6,0x1,0x4c,0x5a,0x26,0xfd,0x7e,0xd3,0x7,0x86,0x34,0xb7,0xff,0x23,0x39,0xd3,0xbd,0xe3,0xd,0xd3,0xbd,0xd3,0xbd,0xe1,0x8d,0xec,0x9d,0xe1,0x8d,0xe1,0x8d,0x18,0x0,0x15,0x0,0x15,0x0,0x15,0x0,0x3f,0x37,0x3f,0x37,0x3f,0x3f,0x37,0x37,0x10,0xec,0x1,0x2,0x3,0x4,0x3,0x2,0x1,0x0,0x0,0x1,0x2,0x1,0x0,0xf0,0xbf,0xf0,0xf5,0xf1,0x2b,0xf1,0x61,0xf1,0x97,0xf1,0xcd,0xf2,0x3,0xf2,0x39,0xf2,0x6f,0xf2,0xa5,0xf3,0x7d,0xf3,0xb3,0xf3,0xe9,0xf4,0x1f,0xf4,0x55,0xf4,0x8b,0xf4,0x8b,0xf4,0xc1,0xf4,0xc1,0xf4,0xf7,0xf5,0x2d,0xf5,0x63,0xf5,0x2d,0xf9,0xc0,0xfa,0x38,0xfa,0xb0,0xfb,0x28,0xfb,0xa0,0xfb,0x28,0xfa,0xb0,0xfa,0x38,0xf5,0x99,0xf5,0xf9,0xf6,0x59,0xf6,0xb9,0xf8,0x39,0xf7,0xd9,0xf7,0x79,0xf7,0x19,0xf8,0x99,0xfc,0x18,0xfc,0x42,0xfc,0x6c,0xfc,0x96,0xf8,0xf9,0xf9,0x11,0xf9,0x29,0xf9,0x11,0xf8,0xf9,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x0,0xaa,0x0,0x55,0x0,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x0,0xaa,0x0,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa6,0xaa,0xba,0xaa,0xaa,0xaa,0xaa,0xa6,0xaa,0xaa,0xaa,0xaa,0xaa,0xea,0x9b,0xaa,0xba,0xa9,0xaa,0xbb,0xa9,0xaa,0xaa,0xa6,0xaa,0xaa,0xaa,0xaa,0xaa,0x9a,0x9b,0xaa,0xba,0xa9,0xaa,0xdb,0xa9,0xa9,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0xaa,0x9a,0x6a,0xaa,0xab,0xab,0xa9,0xd6,0xaa,0xaa,0xaa,0x66,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x9b,0xaa,0xba,0xa9,0xaa,0xab,0xa9,0xa9,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0xaa,0x9a,0x6a,0xaa,0xba,0xab,0xa9,0xd6,0xaa,0xaa,0xaa,0x6a,0xaa,0xaa,0x6a,0xaa,0xaa,0xae,0xba,0xa6,0xaa,0xaa,0x9a,0xaa,0xaa,0xaa,0xaa,0xa6,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x9b,0x6a,0xba,0xa9,0xaa,0xab,0xa9,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x9a,0xaa,0xaa,0xaa,0xaa,0xaa,0xda,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x0,0xa8,0x0,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x0,0x55,0x0,0x55,0x0,0x55,0x55,0x4,0x55,0x4,0x0,0x4,0x0,0x55,0x55,0x0,0x4,0x0,0x4,0x0,0x4,0x55,0xa,0x4,0x55,0x4,0x55,0x4,0x0,0x55,0x55,0x0,0x4,0x0,0x4,0x0,0x4,0xaa,0xaa,0x5,0xaa,0x4,0xaa,0x4,0xaa,0x55,0xaa,0x0,0xaa,0x0,0xaa,0x0,0xaa,0xaa,0xba,0xaa,0xad,0xaa,0xa7,0xaa,0xa6,0xaa,0xad,0xaa,0xab,0xaa,0xa5,0xaa,0xa9,0xa9,0xaa,0xab,0xba,0xad,0xda,0xf7,0xb6,0xdd,0xb6,0x5f,0xd5,0x57,0x5f,0x55,0x57,0xbb,0xba,0x7a,0x69,0xe6,0xb6,0x7e,0x77,0x57,0x5d,0xdd,0x75,0x55,0xdf,0xd5,0x75,0x69,0xaa,0xeb,0xba,0x9d,0xda,0xf7,0xb6,0xd5,0xb6,0x5f,0xd7,0x57,0x5d,0x65,0xd6,0xa9,0xaa,0x7b,0xba,0xdd,0xda,0x77,0xb6,0xdd,0xb6,0x57,0xd5,0x5b,0x57,0x96,0xd5,0xaa,0xaa,0x76,0xda,0xdd,0x96,0x96,0xb7,0xd5,0x9d,0xe5,0x59,0x5d,0x79,0x7e,0x7b,0x6a,0xb7,0xe7,0x9e,0x69,0xdb,0xb7,0x7d,0xed,0xd5,0x65,0xdd,0x6a,0x76,0x5b,0xa9,0x69,0xaa,0xeb,0x9a,0x66,0x5a,0x77,0xb6,0xdd,0x7a,0xb9,0xa5,0x57,0x5a,0x55,0xd9,0xa9,0xaa,0x7b,0xba,0xed,0xda,0x77,0xb6,0xdd,0xb6,0xdf,0xd7,0x57,0x5f,0xa5,0xd5,0xaa,0xaa,0x7a,0xaa,0xea,0xaa,0x7a,0xaa,0xda,0xaa,0xda,0xaa,0x6a,0xaa,0x5a,0xaa,0xaa,0xaa,0xaa,0x50,0xaa,0x10,0xaa,0x10,0xaa,0x55,0xaa,0x0,0xaa,0x0,0xaa,0x0,0xa0,0x55,0x55,0x10,0x55,0x10,0x0,0x10,0x55,0x55,0x10,0x0,0x10,0x0,0x10,0x0,0x55,0x55,0x0,0x10,0x0,0x10,0x0,0x10,0x55,0x55,0x10,0x0,0x10,0x0,0x10,0x0,0x55,0x55,0x4,0x0,0x4,0x0,0x4,0x0,0x55,0x55,0x0,0x4,0x0,0x4,0x0,0x4,0x55,0xaa,0x4,0xaa,0x4,0xaa,0x4,0xaa,0x55,0xaa,0x0,0xaa,0x0,0xaa,0x0,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0xaa,0xa5,0xaa,0xa6,0xaa,0xaa,0x66,0x97,0x66,0xa5,0x66,0xa5,0x66,0xa5,0x66,0xa5,0x66,0xa5,0x66,0xa5,0x66,0xa5,0x5a,0x5d,0xde,0x99,0x9a,0x99,0x9a,0x59,0x95,0x69,0x95,0x59,0x9a,0x59,0x9a,0x99,0xb9,0xdb,0xad,0x9b,0xa9,0x9e,0xa9,0x9a,0x55,0x9a,0x55,0x9a,0xa9,0x9a,0xa9,0x96,0xa6,0x5a,0xba,0x6f,0xaa,0x7a,0xaa,0x6a,0x56,0x6a,0x56,0x6a,0xa6,0x6a,0x96,0x5a,0x59,0x6a,0x99,0x5a,0x99,0x9e,0x99,0x96,0x99,0xa6,0x99,0xa5,0x99,0xa9,0x59,0xa9,0x6a,0x65,0x6e,0x65,0x6a,0x65,0x6a,0x65,0x69,0x65,0x69,0x65,0x66,0x65,0x6a,0x65,0x6a,0x99,0xaa,0x99,0xaa,0x99,0xaa,0x99,0x56,0x99,0x6a,0x99,0xaa,0x99,0xaa,0x99,0xa9,0x95,0xe9,0x9f,0xa9,0x9e,0xa5,0x9a,0x56,0x95,0x55,0x95,0xa5,0x9a,0xa9,0x9a,0x6a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x6a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0xaa,0x10,0xaa,0x10,0xaa,0x10,0xaa,0x55,0xaa,0x0,0xaa,0x0,0xaa,0x0,0x55,0x55,0x4,0x0,0x4,0x0,0x4,0x0,0x55,0x55,0x55,0x50,0x55,0x55,0x55,0x55,0x55,0x55,0x4,0x0,0x4,0x0,0x4,0x0,0x55,0x55,0x0,0x4,0x55,0x4,0x55,0x55,0x55,0xaa,0x4,0xaa,0x4,0xaa,0x4,0xaa,0x55,0xaa,0x0,0xaa,0x1,0xaa,0x1,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0xaa,0x95,0x66,0xa5,0x66,0xa5,0x66,0xa5,0x66,0xa5,0x66,0xa5,0x66,0x95,0x55,0x56,0x55,0x5a,0x9a,0x99,0x9a,0x99,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0xa5,0xa9,0xa9,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x5a,0x95,0x6a,0xa5,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x69,0xaa,0xa9,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x6a,0x65,0x6a,0x65,0xaa,0x65,0xaa,0x65,0xaa,0x65,0xa5,0xa5,0xaa,0x56,0x95,0x5a,0xaa,0x99,0xaa,0x99,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x95,0xa9,0x95,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x6a,0xaa,0x5a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0xaa,0x10,0xaa,0x10,0xaa,0x10,0xaa,0x55,0xaa,0x0,0xaa,0x40,0xaa,0x40,0x55,0x55,0x0,0x10,0x0,0x10,0x0,0x10,0x55,0x55,0x10,0x0,0x10,0x15,0x55,0x55,0x55,0x55,0x0,0x10,0x0,0x10,0x0,0x10,0x55,0x55,0x15,0x55,0x55,0x55,0x55,0x55,0xa,0xaa,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0xaa,0xa8,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x82,0xaa,0x0,0x2a,0x0,0x2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa8,0xaa,0x82,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x82,0xaa,0x0,0xaa,0x20,0x2a,0x80,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x82,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0xaa,0x0,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa,0xa8,0x80,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0xaa,0x80,0x0,0x20,0x0,0x88,0x0,0xa8,0x0,0x8a,0x0,0x22,0x0,0x88,0x80,0xa8,0x0,0xa8,0x20,0x22,0x8a,0x8,0x88,0x2,0x20,0x0,0xa0,0x0,0x8,0x0,0x8,0x0,0x2,0x80,0xa,0x0,0xa,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0xaa,0x8,0xa8,0x80,0x22,0x20,0xa,0x80,0x8,0x80,0xa0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xaa,0xa8,0x2a,0xa2,0xa,0x88,0x2,0x28,0x0,0xa0,0x2,0x80,0xa,0x20,0x8,0x80,0x0,0xa,0x0,0x2,0x0,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa2,0x0,0x8a,0x0,0x20,0x0,0xa8,0x0,0x88,0x0,0x22,0x0,0x8,0x80,0x2,0x20,0x2a,0xaa,0xa,0xa8,0xa,0x82,0x2,0x28,0x0,0x8a,0x0,0x28,0x0,0x2,0x0,0x0,0x80,0xa,0x80,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x20,0x80,0x80,0xaa,0xa0,0xaa,0x82,0xaa,0x8,0x28,0xa2,0x82,0x28,0x28,0xa0,0x82,0x0,0x28,0x0,0x20,0xa,0x80,0x2,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a,0x0,0x22,0x0,0x82,0x80,0x8,0x20,0x2,0x28,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x80,0x0,0x20,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xa0,0x2,0x0,0x0,0x88,0x0,0x20,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x2,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x20,0x20,0x20,0x80,0x80,0x20,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x8,0x0,0x0,0x0,0x2,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x14,0x0,0x40,0x20,0x94,0x0,0x1,0x0,0x0,0x2,0x0,0x58,0x0,0xa0,0x8,0x0,0x8,0x0,0x20,0x0,0x0,0x40,0x80,0x10,0x0,0x8,0x0,0x8,0x0,0x2,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x4,0x0,0x4,0x0,0x4,0x0,0x55,0x55,0x0,0x58,0x0,0x6a,0x0,0x6a,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x5,0x0,0x10,0x0,0x4,0x0,0x1,0x55,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50,0x0,0x15,0x50,0x0,0x4,0x55,0x55,0x0,0x10,0x0,0x10,0x0,0x10,0x55,0x55,0x25,0x0,0xa9,0x0,0xa9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x88,0x0,0x88,0x0,0x88,0x0,0x88,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa2,0x82,0x82,0x22,0xa2,0x82,0x82,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x88,0x20,0x8,0x88,0x88,0x88,0x88,0x88,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x82,0x0,0xa2,0x0,0x8a,0x0,0x82,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x5,0x40,0x14,0x0,0x50,0x0,0x40,0x0,0x0,0x1,0x0,0x5,0x0,0x54,0x55,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x82,0x2,0x22,0x2,0x22,0x2,0x22,0x0,0x82,0xa2,0x22,0x0,0x0,0x0,0x0,0x0,0x80,0x2,0x22,0x2,0x22,0x2,0x22,0x20,0x80,0x88,0x20,0x0,0x0,0x0,0x0,0x80,0x8,0x20,0x22,0x20,0x22,0x20,0x22,0x82,0x8,0x82,0x1,0x0,0x1,0x0,0x0,0x8,0x0,0x22,0x0,0x22,0x0,0x22,0x0,0x8,0x0,0x40,0x0,0x50,0x0,0x54,0x0,0x15,0x50,0x1,0x55,0x0,0x15,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x55,0x50,0x55,0x55,0x1,0x55,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50,0x0,0x55,0x54,0x55,0xaa,0x4,0xaa,0x4,0xaa,0x4,0xaa,0x55,0xaa,0x0,0x6a,0x0,0x55,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0xaa,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xaa,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xff,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0xaa,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xff,0xaa,0xaa,0x0,0x0,0x0,0x0,0x0,0x0,0xaa,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xff,0xa0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0xaa,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xff,0x0,0x0,0x55,0x55,0x55,0x55,0x5,0x55,0xaa,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xff,0x0,0x0,0x55,0x40,0x55,0x55,0x55,0x55,0xaa,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xff,0x55,0x55,0xaa,0x55,0xaa,0x10,0xaa,0x10,0xaa,0x10,0xaa,0x55,0xa9,0x0,0x55,0x0,0x50,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x0,0x0,0x55,0x55,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x0,0x0,0x55,0x55,0xaa,0xaa,0x55,0x55,0x4,0x0,0x4,0x0,0x55,0x55,0x0,0x4,0x0,0x4,0x0,0x4,0x80,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x0,0x0,0x55,0x55,0x1,0x55,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x4,0x0,0x4,0x0,0x4,0x0,0x55,0x55,0x0,0x5,0x0,0xaa,0x5,0xaa,0x55,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0x55,0x4,0x0,0x4,0x0,0x4,0x0,0x55,0x55,0x0,0x4,0x40,0x4,0x54,0x4,0x55,0x55,0x4,0x0,0x4,0x0,0x4,0x0,0x55,0x55,0x0,0x0,0x0,0x1,0x0,0x15,0x55,0x55,0x0,0x10,0x0,0x10,0x0,0x10,0x55,0x55,0x50,0x0,0xaa,0x0,0xaa,0x40,0x55,0x55,0x4,0x5,0x4,0xaa,0x55,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x5,0xaa,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x45,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x10,0x54,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x14,0x15,0xaa,0xaa,0x55,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x15,0x5,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x5,0x45,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x15,0x15,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x4,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x14,0x51,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x50,0x55,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x45,0x14,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x55,0x55,0x55,0x0,0x10,0xaa,0x10,0xaa,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x55,0x54,0x55,0x54,0x41,0x54,0x51,0x55,0x5,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x4,0x11,0x11,0x1,0x11,0x11,0x15,0x11,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x54,0x10,0x54,0x11,0x54,0x11,0x54,0x10,0x54,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x44,0x44,0x44,0x14,0x14,0x54,0x44,0x54,0x45,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x55,0x44,0x55,0x44,0x41,0x44,0x51,0x15,0x5,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x11,0x11,0x11,0x5,0x1,0x11,0x11,0x11,0x11,0x55,0x55,0x55,0x55,0x55,0x55,0x4,0x11,0x11,0x15,0x11,0x15,0x15,0x11,0x15,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x14,0x44,0x14,0x44,0x4,0x14,0x14,0x44,0x14,0x44,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x11,0x44,0x41,0x4,0x51,0x44,0x51,0x44,0x51,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x51,0x5,0x50,0x11,0x51,0x11,0x51,0x11,0x50,0x55,0x55,0x55,0x55,0x55,0x55,0x45,0x14,0x45,0x14,0x45,0x14,0x45,0x14,0x41,0x4,0x55,0x55,0x55,0x55,0x55,0x55,0x45,0x55,0x50,0x55,0x55,0x15,0x55,0x15,0x40,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x14,0x54,0x44,0x54,0x44,0x54,0x4,0x54,0x44,0x54,0x44,0x55,0x55,0x55,0x55,0x14,0x4,0x45,0x14,0x45,0x14,0x15,0x14,0x45,0x14,0x45,0x15,0x55,0x55,0x55,0x55,0x54,0x51,0x54,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x1,0x51,0x55,0x55,0x55,0x55,0x41,0x44,0x44,0x44,0x44,0x41,0x41,0x44,0x44,0x44,0x44,0x44,0x55,0x55,0x55,0x55,0x54,0x54,0x44,0x10,0x54,0x44,0x54,0x44,0x44,0x54,0x54,0x54,0x55,0x55,0x55,0x55,0x51,0x40,0x44,0x51,0x44,0x51,0x40,0x51,0x44,0x51,0x44,0x51,0x55,0x55,0x55,0x55,0x1,0x11,0x45,0x11,0x45,0x1,0x45,0x11,0x45,0x11,0x45,0x11,0x55,0x55,0x55,0x55,0x4,0x54,0x14,0x54,0x4,0x44,0x14,0x44,0x14,0x44,0x5,0x1,0x55,0x55,0x55,0x55,0x55,0x5,0x54,0x54,0x54,0x14,0x55,0x44,0x55,0x44,0x54,0x14,0x55,0x55,0x55,0x55,0x14,0x15,0x44,0x44,0x44,0x44,0x4,0x14,0x44,0x44,0x44,0x45,0x55,0x55,0x55,0x55,0x5,0x14,0x54,0x44,0x54,0x44,0x54,0x44,0x54,0x44,0x5,0x14,0x55,0x55,0x55,0x55,0x51,0x15,0x11,0x15,0x41,0x15,0x51,0x15,0x51,0x15,0x51,0x15,0x55,0x55,0x55,0x55,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x1,0x54,0x54,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x51,0x15,0x51,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x14,0x15,0x11,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x5,0x14,0x51,0x11,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x15,0x14,0x55,0x11,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x5,0x5,0x44,0x51,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x15,0x55,0x14,0x54,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x5,0x11,0x51,0x11,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x40,0x51,0x45,0x11,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x41,0x45,0x14,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x10,0x10,0x14,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x14,0x51,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x5,0x5,0x54,0x55,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x1,0x1,0x15,0x14,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x40,0x44,0x45,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x55,0x55,0x55,0x55,0x55,0x40,0x55,0x45,0x15,0x51,0x45,0x51,0x15,0x51,0x45,0x54,0x54,0x55,0x1,0x55,0x55,0x55,0x55,0x55,0x15,0x11,0x11,0x11,0x15,0x11,0x15,0x51,0x15,0x51,0x15,0x55,0x55,0x55,0x55,0x14,0x10,0x11,0x44,0x10,0x4,0x11,0x44,0x11,0x44,0x11,0x45,0x55,0x55,0x55,0x55,0x11,0x45,0x55,0x11,0x41,0x11,0x51,0x11,0x51,0x11,0x1,0x14,0x55,0x55,0x55,0x55,0x5,0x1,0x55,0x11,0x55,0x11,0x55,0x14,0x55,0x15,0x15,0x15,0x55,0x55,0x55,0x55,0x1,0x54,0x44,0x51,0x45,0x5,0x4,0x51,0x44,0x51,0x45,0x5,0x55,0x55,0x55,0x55,0x5,0x5,0x14,0x54,0x14,0x54,0x40,0x54,0x54,0x54,0x54,0x44,0x55,0x55,0x55,0x55,0x50,0x14,0x51,0x11,0x1,0x11,0x51,0x11,0x51,0x11,0x51,0x11,0x55,0x55,0x55,0x55,0x14,0x51,0x45,0x11,0x45,0x11,0x40,0x51,0x45,0x11,0x45,0x11,0x55,0x55,0x55,0x55,0x1,0x44,0x15,0x45,0x10,0x40,0x14,0x45,0x14,0x45,0x40,0x45,0x55,0x55,0x55,0x55,0x55,0x5,0x14,0x45,0x14,0x51,0x14,0x54,0x14,0x54,0x14,0x41,0x55,0x55,0x55,0x55,0x5,0x1,0x51,0x44,0x51,0x44,0x50,0x14,0x51,0x44,0x51,0x44,0x55,0x55,0x55,0x55,0x40,0x54,0x54,0x55,0x5,0x5,0x55,0x51,0x55,0x51,0x4,0x5,0x55,0x55,0x55,0x55,0x14,0x5,0x15,0x14,0x5,0x14,0x15,0x1,0x15,0x14,0x1,0x14,0x55,0x55,0x55,0x55,0x41,0x40,0x44,0x45,0x44,0x41,0x44,0x45,0x51,0x45,0x51,0x40,0x55,0x55,0x55,0x55,0x45,0x5,0x45,0x15,0x45,0x15,0x45,0x15,0x45,0x15,0x40,0x55,0x55,0x55,0x55,0x55,0x14,0x55,0x55,0x15,0x55,0x15,0x55,0x15,0x55,0x15,0x55,0x15,0x55,0x1,0x55,0x55,0x55,0x55,0x11,0x51,0x11,0x51,0x11,0x50,0x11,0x51,0x11,0x51,0x14,0x10,0x55,0x55,0x55,0x55,0x50,0x44,0x51,0x4,0x51,0x45,0x51,0x45,0x51,0x45,0x11,0x44,0x55,0x55,0x55,0x55,0x55,0x15,0x55,0x15,0x5,0x5,0x51,0x15,0x51,0x15,0x5,0x1,0x55,0x55,0x55,0x55,0x14,0x55,0x14,0x55,0x14,0x55,0x14,0x55,0x14,0x55,0x1,0x55,0x55,0x55,0x55,0x55,0x14,0x51,0x14,0x51,0x14,0x51,0x14,0x51,0x14,0x51,0x15,0x5,0x55,0x55,0x55,0x55,0x54,0x51,0x54,0x51,0x54,0x50,0x54,0x51,0x54,0x51,0x54,0x51,0x55,0x55,0x55,0x55,0x44,0x11,0x44,0x41,0x4,0x51,0x44,0x51,0x44,0x51,0x44,0x51,0x55,0x55,0x55,0x55,0x14,0x44,0x14,0x44,0x14,0x44,0x14,0x51,0x14,0x51,0x1,0x51,0x55,0x55,0x55,0x55,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x55,0x5,0x55,0x55,0x55,0x55,0x51,0x14,0x51,0x14,0x51,0x14,0x51,0x1,0x51,0x14,0x5,0x14,0x55,0x55,0x55,0x55,0x45,0x11,0x45,0x11,0x45,0x11,0x40,0x51,0x45,0x51,0x45,0x54,0x55,0x55,0x55,0x55,0x44,0x51,0x44,0x51,0x44,0x51,0x44,0x5,0x44,0x51,0x14,0x51,0x55,0x55,0x55,0x55,0x14,0x51,0x14,0x51,0x14,0x51,0x0,0x51,0x14,0x51,0x14,0x51,0x55,0x55,0x55,0x55,0x44,0x51,0x44,0x51,0x44,0x51,0x44,0x51,0x44,0x51,0x45,0x5,0x55,0x55,0x55,0x55,0x4,0x55,0x10,0x55,0x14,0x55,0x14,0x55,0x14,0x55,0x14,0x55,0x55,0x55,0x55,0x55,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x3,0x4,0x1,0x5,0x6,0x7,0x8,0x9,0x7,0xa,0xb,0xc,0xd,0x1,0xe,0xf,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x1f,0x1f,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x20,0x20,0x3d,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x3e,0x1f,0x1f,0x20,0x20,0x3f,0x40,0x41,0x1,0x42,0x1,0x43,0x44,0x1,0x45,0x1,0x43,0x1f,0x1f,0x20,0x20,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x1f,0x1f,0x20,0x20,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x1f,0x1f,0x20,0x5e,0x5f,0x5d,0x59,0x60,0x59,0x59,0x59,0x59,0x61,0x62,0x59,0x59,0x63,0x1f,0x20,0x21,0x59,0x59,0x59,0x59,0x64,0x65,0x66,0x67,0x68,0x69,0x59,0x59,0x2c,0x1f,0x20,0x21,0x59,0x59,0x59,0x59,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x59,0x2c,0x1f,0x20,0x71,0x72,0x59,0x59,0x72,0x73,0x74,0x74,0x75,0x72,0x76,0x77,0x78,0x79,0x1f,0x20,0x20,0x7a,0x7a,0x7a,0x7a,0x7b,0x7c,0x7c,0x7d,0x7a,0x7a,0x7a,0x7e,0x1f,0x1f,0x20,0x20,0x7f,0x7f,0x7f,0x7f,0x7f,0x20,0x20,0x7f,0x7f,0x7f,0x7f,0x7f,0x1f,0x1f,0x20,0x20,0x7f,0x7f,0x7f,0x7f,0x7f,0x20,0x20,0x7f,0x7f,0x7f,0x7f,0x7f,0x1f,0x1f,0x20,0x20,0x7f,0x7f,0x7f,0x7f,0x7f,0x20,0x20,0x7f,0x7f,0x7f,0x7f,0x7f,0x1f,0x1f,0x20,0x80,0x81,0x81,0x82,0x82,0x82,0x83,0x84,0x82,0x82,0x82,0x81,0x81,0x85,0x1f,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x87,0x94,0x7f,0x7f,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,0xa0,0x7f,0x7f,0x7f,0x7f,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0x7f,0x7f,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0x55,0x54,0x55,0x55,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0x5a,0xa6,0x5a,0xa4,0x4a,0x85,0x45,0x15,0x51,0x6a,0xa9,0x6a,0xa9,0x6a,0xa9,0x6a,0xaa,0x86,0xaa,0x0,0x55,0x55,0x14,0x6a,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xaa,0xa4,0xaa,0x95,0x55,0x50,0x11,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0xaa,0x84,0x15,0x51,0x44,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0x84,0xaa,0xaa,0xa5,0x55,0x55,0xa5,0x50,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa5,0x6a,0x95,0x55,0x4a,0xaa,0x55,0x45,0xa9,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x5a,0x51,0x45,0x92,0xaa,0x55,0x55,0xaa,0xa1,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa1,0x55,0x15,0xaa,0x4a,0x51,0x15,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x45,0x55,0xaa,0x95,0x54,0x51,0x86,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0x94,0xaa,0x55,0x55,0xaa,0xa4,0x55,0x55,0xa9,0x4a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0x55,0x55,0xaa,0xaa,0x55,0x55,0xa8,0x52,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x52,0x55,0x11,0x5a,0xaa,0x55,0x15,0xaa,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x96,0x55,0x55,0x5a,0xaa,0x55,0x55,0xa9,0x54,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0x6a,0x96,0x5a,0x96,0x55,0x51,0x95,0x55,0xa5,0xa9,0xa5,0xa9,0xa5,0xa9,0xa5,0xa9,0xa1,0xaa,0xa5,0xaa,0x45,0x55,0x55,0x55,0x6a,0x5a,0x6a,0x5a,0x6a,0x5a,0x2a,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x40,0x55,0x55,0x55,0x28,0xa5,0xaa,0xa5,0xaa,0xa9,0x6a,0xa9,0x6a,0xa1,0x5,0x45,0x55,0x5a,0x85,0x5a,0xa5,0x5a,0xa5,0x5a,0xa5,0xa4,0xaa,0x85,0x51,0x45,0x55,0xaa,0x12,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0x8a,0x52,0xaa,0x55,0x55,0xaa,0x54,0xaa,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x94,0x81,0x15,0x5,0x55,0x55,0x54,0xaa,0x86,0xaa,0xa6,0xaa,0xa6,0xaa,0xa4,0xaa,0x45,0x55,0x55,0x5a,0xa1,0xaa,0xa9,0xaa,0xa9,0xaa,0xa8,0xaa,0xa9,0xaa,0xa1,0x55,0x55,0xa5,0x6a,0x6a,0xa8,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x6a,0x55,0x55,0x6a,0xa5,0xaa,0x5a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x55,0x55,0xaa,0xa5,0xaa,0xa9,0x44,0x5a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xa9,0x6a,0x55,0x41,0x6a,0xaa,0xaa,0xaa,0xaa,0x95,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0x51,0x55,0xa6,0xaa,0xa6,0xaa,0xaa,0x15,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0x4a,0x84,0x51,0x55,0xa1,0xaa,0x6a,0xa5,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x2a,0xa8,0x55,0x55,0xa0,0x50,0x15,0x55,0x56,0xa8,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x56,0xaa,0x51,0x55,0x55,0x55,0x51,0x55,0x52,0xa8,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0xa5,0xa9,0x55,0x15,0x55,0x55,0x6a,0x96,0x6a,0x96,0x6a,0x96,0x6a,0x96,0x6a,0x96,0x4a,0x5a,0x55,0x1a,0x15,0x55,0x56,0x95,0x96,0xaa,0x96,0xaa,0x86,0xaa,0x96,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0x95,0xa5,0x56,0x55,0x5a,0x56,0x5a,0x5a,0xa5,0x4a,0xa4,0x5a,0x85,0x45,0x55,0x59,0x6a,0xa9,0x6a,0xa9,0x6a,0xa9,0x6a,0x6a,0x1,0x1,0x55,0x54,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0x55,0x56,0x12,0xaa,0x1a,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0x92,0xa8,0x90,0x55,0x84,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0x84,0xa5,0x5,0x55,0x6a,0x86,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0x95,0x69,0x55,0x55,0xaa,0xa9,0xaa,0xa9,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0x55,0x15,0x5a,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0xaa,0xa9,0xaa,0xa1,0x55,0x14,0x1a,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0x55,0xa9,0x5a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xa6,0xaa,0xa6,0xaa,0x84,0xaa,0x15,0x50,0xaa,0x95,0xaa,0xa4,0xaa,0xa6,0xaa,0xa6,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0x45,0x5a,0xaa,0x85,0xaa,0xa9,0xaa,0xa9,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xa8,0x5a,0x55,0x54,0x69,0x55,0xaa,0xa1,0xa8,0x16,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x52,0x55,0x51,0x1a,0x81,0x45,0x5a,0xa9,0x55,0xaa,0x65,0xaa,0x2a,0xaa,0x6a,0xaa,0x6a,0x6a,0x6a,0x56,0x6a,0x6a,0x96,0x4a,0x96,0x55,0x56,0x95,0x55,0xa5,0xa5,0xa5,0xa9,0xa5,0xa9,0xa5,0xa9,0x96,0xaa,0x96,0xaa,0x16,0xaa,0x55,0xaa,0x55,0x56,0x69,0x55,0x2a,0x55,0x2a,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x52,0xaa,0x55,0xa8,0x54,0x5,0x4a,0xa9,0x6a,0xa9,0x6a,0xa9,0x2a,0xa1,0x55,0x55,0x24,0x52,0xa5,0x5a,0xa5,0x5a,0xa5,0xa4,0xaa,0xa4,0x51,0x10,0x56,0x5a,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x96,0x55,0x46,0x6a,0x1a,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0x92,0xaa,0x95,0xa5,0x52,0xaa,0xa6,0xaa,0xa6,0xaa,0xa4,0xaa,0xa5,0xa9,0x46,0x15,0x2a,0x52,0xaa,0x9a,0xaa,0xaa,0xa9,0xaa,0xa9,0xaa,0x91,0x51,0x56,0xa9,0x2a,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xaa,0xaa,0x2a,0xa5,0x15,0x56,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0x2a,0xa1,0x51,0x12,0xaa,0x55,0x55,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa1,0x55,0x55,0xaa,0x6a,0x55,0x55,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x51,0x55,0xaa,0xa6,0x6a,0x96,0x14,0x55,0xa4,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0x45,0x2a,0xaa,0xa9,0xaa,0xa9,0x56,0xa5,0xa5,0x55,0xaa,0x4a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x5a,0xaa,0x45,0x6a,0xa9,0x55,0xaa,0x56,0xaa,0x5a,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x2a,0xaa,0x6a,0xaa,0x52,0xaa,0x15,0x6a,0xa9,0x54,0x15,0x4a,0x55,0x55,0x5a,0x81,0x1a,0xa9,0x1a,0xa9,0x5a,0xa9,0x5a,0xa9,0x5a,0xa9,0xa5,0xa9,0x65,0xa9,0x55,0xa9,0x55,0x55,0x69,0x55,0x6a,0x95,0x6a,0x86,0x6a,0x96,0x6a,0x5a,0x6a,0x5a,0x2a,0x5a,0x6a,0x5a,0x56,0x5a,0x55,0x5a,0x85,0x56,0x96,0x55,0x55,0xaa,0x65,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xa8,0xa5,0xa1,0x5a,0xa5,0x5a,0xa5,0x5a,0xa4,0x5a,0x84,0x58,0x55,0x55,0x2a,0x55,0x6a,0xa9,0x6a,0xaa,0x86,0xaa,0x15,0xa1,0x5a,0x45,0xaa,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x55,0xaa,0x16,0xaa,0x16,0xaa,0x96,0xaa,0x96,0xa8,0x96,0x85,0x90,0x6,0x5,0x66,0x9a,0xaa,0x9a,0xaa,0x92,0x95,0x91,0x54,0x5a,0x86,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xa9,0x15,0x91,0x51,0x56,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa1,0xa8,0x55,0x55,0xa8,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa8,0xaa,0x95,0x15,0x5a,0xa9,0xaa,0x5a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x15,0x55,0xaa,0xa5,0xaa,0xa9,0xa8,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x5a,0x55,0x55,0x6a,0xaa,0xaa,0xaa,0x95,0x55,0xaa,0x95,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0x4a,0x96,0x95,0x54,0xa6,0xa5,0x45,0x6a,0xa5,0x52,0xaa,0x5,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0x4a,0xa9,0xaa,0x5a,0xaa,0x5a,0x29,0x5a,0x55,0x5a,0x6a,0x51,0x6a,0xa5,0x6a,0xa9,0x6a,0xa9,0xaa,0x99,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0x56,0x9a,0x15,0x5a,0x69,0x14,0x16,0xa9,0x95,0x59,0xa9,0x54,0xa9,0x65,0xa9,0x6a,0xa9,0x6a,0xa9,0x6a,0x29,0x6a,0x6a,0x96,0x6a,0x96,0x6a,0x86,0x56,0x96,0x95,0x56,0xa6,0x55,0xa6,0xa5,0xa6,0xa9,0x96,0xa5,0x92,0xaa,0x92,0xaa,0x92,0xaa,0x96,0xaa,0x52,0xaa,0x51,0xaa,0x51,0x5a,0xa4,0x16,0x85,0x5a,0x56,0x5a,0x6a,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xa9,0x6a,0xa9,0x6a,0xa9,0x6a,0xa9,0x68,0xa9,0x45,0xa9,0x55,0x84,0x25,0x52,0xa5,0x96,0xa1,0x94,0x15,0x95,0x95,0x5a,0x1f,0xa8,0x7f,0xa9,0xff,0xa9,0xff,0xa5,0xff,0x56,0xa6,0x4a,0xa6,0x5a,0xa6,0xd6,0xa5,0xf4,0x94,0xf5,0x4a,0xfd,0x2a,0xfd,0xaa,0xaa,0xa6,0xaa,0x85,0xa0,0x56,0x15,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0x15,0x6a,0x44,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0x15,0xa1,0x59,0x14,0xa9,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa8,0x44,0x51,0x6a,0xa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0x51,0x41,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0x9a,0xaa,0xaa,0xaa,0xaa,0xaa,0x2a,0xaa,0x55,0x55,0xa9,0x4a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0x4,0xaa,0xa5,0x42,0xaa,0x94,0xaa,0xa5,0xaa,0xa6,0x15,0x41,0xa9,0x54,0xaa,0x69,0xaa,0x6a,0xaa,0x6a,0x6a,0x6a,0x56,0x2a,0xa5,0x5a,0x6a,0xa9,0x1a,0xa9,0x44,0xa8,0xa5,0x51,0xaa,0x54,0xaa,0x5a,0xaa,0x6a,0xaa,0x6a,0x6a,0xa5,0x6a,0xa9,0x6a,0xa9,0x6a,0xa9,0x6a,0xa9,0x55,0xa9,0x95,0x59,0xa9,0x55,0x11,0x6a,0xa5,0x6a,0x81,0x5a,0x15,0x54,0x7f,0x59,0xff,0xd5,0xff,0xf4,0xff,0xf5,0xa6,0xa9,0xa6,0xa9,0xa2,0xa9,0xa6,0xa9,0x52,0xa9,0x85,0xa9,0xa9,0x51,0xaa,0x45,0x65,0x55,0x6a,0x55,0x6a,0x55,0x6a,0x5a,0x6a,0x5a,0x6a,0x5a,0x6a,0x5a,0x6a,0x5a,0xaa,0x55,0xaa,0x54,0xa9,0x42,0x95,0x2a,0x54,0xaa,0x55,0xaa,0x25,0xaa,0xa5,0xaa,0x4a,0xa5,0x5a,0xa5,0x5a,0xa5,0x5a,0xa5,0x4a,0xa5,0x5a,0xa4,0x4a,0xa4,0x4a,0xa5,0xa7,0xff,0xa7,0xff,0xa7,0xff,0xa7,0xff,0x97,0xff,0x57,0xff,0x67,0xff,0xa7,0xff,0xfd,0xaa,0xfd,0xaa,0xfd,0xaa,0xfd,0xaa,0xfd,0xa1,0xfd,0x94,0xfd,0x59,0xfd,0x69,0x9a,0xa5,0x92,0x14,0x91,0x26,0x56,0xa6,0x6a,0xa6,0xaa,0xa6,0xaa,0xa4,0xaa,0xa5,0x6a,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa1,0xaa,0x55,0xa1,0x5a,0x55,0xaa,0xaa,0xaa,0xaa,0xa1,0xa8,0x55,0x15,0xa,0x52,0xaa,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0x92,0xaa,0x55,0x55,0xa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x6a,0x55,0x54,0xaa,0x85,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa6,0x6a,0xa6,0x51,0x16,0x45,0x54,0xaa,0x85,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x14,0xaa,0xa5,0xaa,0xa9,0xaa,0xa9,0x4a,0xa9,0x14,0xa9,0xa1,0x45,0xaa,0x85,0x2a,0x6a,0x54,0x6a,0x25,0x5a,0xaa,0x51,0xaa,0xa5,0xaa,0xa9,0xaa,0xa9,0x6a,0xa9,0xaa,0x67,0xaa,0x67,0xaa,0x67,0xaa,0x67,0x6a,0x67,0x56,0x67,0x55,0x67,0x69,0x57,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xaa,0x58,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0xaa,0x5a,0x2a,0x1a,0x52,0x5a,0x14,0x5a,0x52,0x5a,0x55,0x5a,0x91,0x5a,0x91,0x55,0x96,0x55,0x96,0xa5,0x96,0xa8,0x96,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xa8,0xa5,0xa5,0xa5,0x95,0xa5,0x56,0x4a,0x96,0x58,0x4a,0x51,0x6a,0x55,0x6a,0x59,0x6a,0x29,0x6a,0xa9,0x6a,0xa9,0x6a,0xa7,0xff,0xa7,0xff,0xa7,0xff,0xa7,0xff,0xa7,0xff,0xa7,0xff,0x97,0xff,0x57,0xff,0xfd,0xa9,0xfd,0xa9,0xfd,0xa9,0xfd,0xa9,0xfd,0xa9,0xfd,0xa9,0xfd,0xa9,0xfd,0xa5,0xaa,0xa5,0xaa,0x95,0xaa,0x5a,0xa5,0x6a,0x94,0xaa,0x5a,0xaa,0x6a,0xaa,0xaa,0xaa,0xa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x4a,0xa9,0x84,0xa9,0xa9,0x29,0xaa,0x51,0xaa,0xa5,0xaa,0xa9,0xaa,0xaa,0xaa,0xaa,0x6a,0x87,0x6a,0xa7,0x6a,0xa7,0x6a,0xa7,0x6a,0xa7,0x4a,0xa7,0x4a,0xa7,0x96,0xa7,0x91,0x5a,0xa5,0x5a,0xa6,0x12,0xa6,0x85,0xa6,0xa1,0xa6,0xa8,0xa6,0xa9,0xa6,0xa9,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x16,0xaa,0x56,0xaa,0x56,0xaa,0x45,0xaa,0xa5,0x5a,0xa5,0x1a,0x94,0x5a,0x52,0x5a,0x4a,0x5a,0x2a,0x4a,0xaa,0x4a,0xaa,0x5a,0xa9,0x69,0xa9,0x65,0xa9,0x55,0xa9,0x55,0xa9,0x45,0xa1,0x25,0xa4,0xa5,0x96,0xa5,0x67,0xff,0xa7,0xff,0xa6,0xbf,0xa6,0xab,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0xfd,0x96,0xfd,0x5a,0xfd,0x4a,0xfd,0x6a,0xbd,0xaa,0xae,0xaa,0xaa,0xaa,0xaa,0xaa,0xa5,0xa7,0xa8,0x67,0xaa,0x57,0xaa,0x97,0xaa,0xa7,0xaa,0xab,0xaa,0xaa,0xaa,0xaa,0xff,0xfd,0xff,0xfc,0xff,0xfd,0xff,0xa9,0xea,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0x66,0xa9,0x46,0xa9,0x56,0xa9,0x6,0xa8,0x85,0xa9,0xa1,0x69,0xa9,0x59,0xaa,0x10,0x65,0x6a,0x69,0x5a,0x6a,0x56,0x6a,0x55,0x6a,0x55,0x6a,0x59,0x6a,0x5a,0x6a,0x5a,0xaa,0x4a,0xaa,0x58,0xaa,0x45,0xaa,0x55,0xaa,0x56,0xaa,0x1a,0xa8,0x5a,0xa9,0x6a,0x52,0xa5,0x5a,0xa5,0x5a,0xa5,0x5a,0xa5,0x5a,0xa5,0x5a,0xa5,0x5a,0xa5,0x5a,0xa5,0xa6,0xaa,0xa6,0xaa,0xa6,0xaa,0x96,0xaa,0x5a,0xaa,0x6a,0xaa,0x2a,0xaa,0xaa,0xaa,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0x15,0xaa,0x55,0xaa,0x18,0xaa,0x58,0xaa,0x5a,0xaa,0x5a,0x6a,0x1a,0x4a,0x5a,0x6a,0x5a,0x6a,0x5a,0x6a,0x5a,0x4a,0x5a,0x4a,0x5a,0x96,0x5a,0x95,0x5a,0x95,0x5a,0xa5,0xaa,0x95,0xaa,0x95,0xaa,0x55,0xaa,0x55,0xaa,0x65,0xaa,0x65,0xaa,0xa5,0xaa,0x5a,0x96,0x5a,0x9a,0x5a,0x5a,0x5a,0x6a,0x59,0x6a,0x55,0xaa,0x54,0xaa,0x56,0xaa,0x5a,0x5a,0x92,0x5a,0x84,0x5a,0xa4,0x5a,0xa9,0x5a,0xa8,0x5a,0xaa,0x5a,0xaa,0x16,0x95,0x5a,0x96,0x56,0x96,0x95,0x96,0xa5,0x96,0xa1,0x96,0xa8,0x96,0xaa,0x96,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xaa,0xa5,0xa9,0xa5,0xa5,0xa5,0xa4,0xa5,0x96,0x52,0xaa,0x5a,0xaa,0x4a,0xaa,0x6a,0xaa,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x96,0xaa,0xa5,0xaa,0xa5,0xaa,0xa9,0xaa,0xa9,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x96,0xaa,0x96,0xaa,0x96,0xaa,0x16,0xaa,0x56,0xaa,0x56,0xaa,0x56,0xaa,0x96,0xaa,0xa5,0x92,0xa5,0x5a,0xa5,0x4a,0xa5,0x6a,0xa5,0x2a,0xa5,0x2a,0xa4,0xaa,0x94,0xaa,0x96,0xaa,0xa5,0xaa,0xa5,0xaa,0xa9,0x6a,0xa9,0x2a,0xaa,0x5a,0xaa,0x4a,0xaa,0x96,0x96,0xaa,0x52,0xaa,0x52,0xaa,0x5a,0xaa,0x4a,0xaa,0x4a,0xaa,0x6a,0xaa,0x2a,0xaa,0xaa,0x92,0xaa,0xa4,0xaa,0xa5,0xaa,0xa5,0xaa,0xa9,0xaa,0xa8,0xaa,0xa9,0xaa,0xaa,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa2,0xaa,0xa0,0xaa,0x20,0xaa,0x2,0xaa,0x28,0xaa,0x80,0xaa,0x0,0xaa,0xa,0xaa,0x20,0xaa,0x80,0xaa,0x22,0xaa,0x8,0xaa,0x20,0xaa,0x80,0xaa,0x22,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x76,0x76,0x76,0x76,0x77,0x78,0x6d,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x86,0x87,0x88,0x89,0x8a,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x8b,0x8c,0x8d,0x8e,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x8f,0x90,0x91,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x92,0x93,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x94,0x95,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x96,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x97,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x98,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x76,0x53,0x50,0x4a,0x50,0x42,0x50,0x3c,0x50,0x30,0x30,0x30,0x30,0x30,0x30,0x2c,0x50,0x28,0x50,0x24,0x50,0x22,0x50,0x20,0x50,0x20,0x70,0x20,0x70,0x20,0x70,0x20,0x70,0x20,0x70,0x20,0x60,0x22,0x60,0x23,0x60,0x26,0x60,0x29,0x60,0x2d,0x60,0x30,0x30,0x30,0x30,0x44,0x60,0x46,0x60,0x4d,0x60,0x57,0x60,0xff,0xfc,0xfc,0xfc,0xf3,0xf0,0xf0,0xf0,0xf3,0xf0,0xf0,0xf0,0xf3,0xf0,0xf0,0xf0,0xcf,0xcc,0xcc,0xcc,0xc3,0xc0,0xc0,0xc0,0xc3,0xc0,0xc0,0xc0,0xc3,0xc0,0xc0,0xc0,0xcf,0xcc,0xcc,0xcc,0xc3,0xc0,0xc0,0xc0,0xc3,0xc0,0xc0,0xc0,0xc3,0xc0,0xc0,0xc0,0xcf,0xcc,0xcc,0xcc,0xc3,0xc0,0xc0,0xc0,0xc3,0xc0,0xc0,0xc0,0xc3,0xc0,0xc0,0xc0,0x3f,0x3c,0x3c,0x3c,0x33,0x30,0x30,0x30,0x33,0x30,0x30,0x30,0x33,0x30,0x30,0x30,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3f,0x3c,0x3c,0x3c,0x33,0x30,0x30,0x30,0x33,0x30,0x30,0x30,0x33,0x30,0x30,0x30,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3f,0x3c,0x3c,0x3c,0x33,0x30,0x30,0x30,0x33,0x30,0x30,0x30,0x33,0x30,0x30,0x30,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc,0xc,0xc,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0xff,0xff,0xff,0xf0,0xff,0xff,0xff,0xc0,0xff,0xff,0xff,0x0,0xff,0xff,0xfc,0x0,0xff,0xff,0xf0,0x0,0xff,0xff,0xc0,0x0,0xff,0xff,0x0,0x0,0xff,0xfc,0x0,0x0,0xff,0xf0,0x0,0x0,0xff,0xc0,0x0,0x0,0xff,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,0xf0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x30,0x0,0xfc,0x0,0xfc,0x0,0xfc,0x0,0x30,0x0,0x30,0x0,0xc,0x0,0x3f,0x0,0x3f,0x0,0x3f,0x0,0xc,0x0,0x3,0x0,0x3,0x0,0xf,0xc0,0xf,0xc0,0xf,0xc0,0x3,0x0,0x0,0x30,0x0,0xc0,0x3,0xf0,0x3,0xf0,0x3,0xf0,0x0,0xc0,0x10,0x8,0x8,0x6,0x8,0x5,0x6,0x4,0x4,0x3,0x10,0x8,0x8,0x5,0x4,0x3,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x0,0xaa,0xaa,0x0,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x22,0xaa,0xaa,0x22,0xaa,0xaa,0x0,0xaa,0xaa,0x0,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa2,0xaa,0xaa,0x8a,0x2a,0xaa,0x88,0xaa,0xaa,0x88,0x8a,0xaa,0x0,0xa,0xaa,0x0,0x2a,0xaa,0x0,0x2a,0xaa,0x0,0x2a,0xaa,0xaa,0x82,0xaa,0xaa,0xa,0xaa,0xa8,0x28,0xaa,0xa8,0xa0,0xaa,0xa0,0x82,0xaa,0xa0,0xa,0xaa,0xa0,0x28,0x2a,0xa0,0x20,0xaa,0x0,0x2,0xaa,0x0,0xa,0xaa,0xaa,0xa8,0x2,0xaa,0x82,0xaa,0xaa,0x8a,0x0,0xaa,0x0,0x2a,0xaa,0x0,0x82,0xa8,0x0,0x2a,0xa8,0x2,0xaa,0xa0,0xa,0xaa,0x0,0x2a,0xaa,0x0,0xaa,0xaa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0xf,0xc0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x30,0x3,0x0,0x30,0x0,0x0,0x30,0xc,0xcc,0x13,0x70,0xf,0x30,0x4,0x4,0x0,0x0,0x1,0x0,0x43,0x30,0xc,0xc0,0x33,0xcc,0xc,0x34,0xc,0xc0,0x0,0xc,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc4,0x0,0xc,0xff,0x0,0xf0,0x1f,0x0,0xf,0x3c,0x0,0x3,0x3,0x0,0x0,0xdf,0xc0,0x3,0x4f,0xc0,0x30,0xcf,0x0,0x0,0x3,0x0,0x3,0x3c,0xf0,0x4,0x43,0xf0,0x3,0x30,0xc0,0x0,0x3,0x30,0x1,0x33,0xfc,0x0,0xc0,0xfc,0x0,0x0,0xf0,0x3,0x0,0x0,0xf,0xc0,0x0,0x7,0xc0,0x0,0x5,0x0,0x0,0x1,0xfc,0x0,0x4f,0xff,0x0,0xff,0x1,0x0,0x3f,0xc0,0x0,0x3,0x40,0x0,0x5,0x50,0x0,0x5,0x44,0x0,0x15,0x15,0x0,0x14,0x5,0xc0,0x10,0x0,0xc0,0x10,0x0,0xc0,0x10,0x0,0x0,0x10,0x0,0x0,0xf0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x3,0xf0,0x0,0x1,0xf0,0x0,0x1,0x40,0x0,0x0,0x40,0x0,0x0,0xf0,0x0,0x0,0xf0,0x0,0x0,0x50,0x0,0x1,0x54,0x0,0x5,0x54,0x0,0x5,0x14,0x0,0x1,0xd5,0x0,0x0,0xc5,0x0,0x0,0xc1,0x0,0x0,0x1,0xc0,0x0,0x0,0xc0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0xfc,0x0,0x0,0x7c,0x0,0x0,0x50,0x0,0x0,0x10,0x0,0x0,0xff,0x0,0x7,0xff,0xc0,0x3,0xfc,0x40,0x0,0x14,0x40,0x0,0x14,0x0,0x0,0x15,0x0,0x0,0x15,0x70,0x0,0x4,0x30,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x3,0x0,0x0,0xf,0x0,0x0,0xc,0x0,0x0,0x3f,0x0,0x0,0x1f,0x0,0x0,0x14,0x0,0x0,0xf,0x0,0x4,0x3f,0xc0,0xf,0xff,0xf0,0x3,0xf1,0xf0,0x0,0x5,0x3c,0x0,0x5,0x4,0x0,0x15,0x40,0x0,0x11,0x57,0x0,0x50,0x57,0x0,0x40,0x3,0x0,0x40,0x0,0x0,0x40,0x0,0x3,0xc0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0xfc,0x0,0x0,0xf4,0x0,0x0,0x14,0x0,0x0,0xf0,0x0,0x3,0xfc,0x10,0xf,0xff,0xf0,0xf,0x4f,0xc0,0x3c,0x50,0x0,0x10,0x50,0x0,0x1,0x54,0x0,0xd5,0x44,0x0,0xd5,0x5,0x0,0xc0,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x3,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x3f,0x0,0x0,0x3d,0x0,0x0,0x5,0x0,0x0,0x4,0x0,0x0,0xff,0x0,0x3,0xff,0xd0,0x1,0x3f,0xc0,0x1,0x14,0x0,0x0,0x14,0x0,0x0,0x54,0x0,0xd,0x54,0x0,0xc,0x10,0x0,0x0,0x10,0x0,0x0,0x10,0x0,0x0,0xc0,0x0,0x0,0xf0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0xf,0xc0,0x0,0xf,0x40,0x0,0x1,0x40,0x0,0x1,0x0,0x0,0xf,0x0,0x0,0xf,0x0,0x0,0x5,0x0,0x0,0x15,0x40,0x0,0x15,0x50,0x0,0x14,0x50,0x0,0x57,0x40,0x0,0x53,0x0,0x0,0x43,0x0,0x3,0x40,0x0,0x3,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0xc0,0x0,0x3,0xf0,0x0,0x3,0xd0,0x0,0x0,0x50,0x0,0x3f,0x40,0x0,0xff,0xf1,0x0,0x40,0xff,0x0,0x3,0xfc,0x0,0x1,0xc0,0x0,0x5,0x50,0x0,0x11,0x50,0x0,0x54,0x54,0x3,0x50,0x14,0x3,0x0,0x4,0x3,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0xf,0x0,0x30,0x0,0x0,0xfc,0x0,0x0,0xf4,0x0,0x0,0x14,0x0,0x0,0x3c,0x0,0x0,0xff,0x0,0x3,0xfc,0xc0,0x3,0x3f,0xc0,0x3,0x7d,0x0,0x0,0x14,0x0,0x0,0x14,0x0,0x0,0x14,0x0,0x0,0x14,0x0,0x0,0x14,0x0,0x0,0x14,0x0,0x0,0x14,0x0,0x0,0x3c,0x0,0x0,0x3f,0x0,0x3,0x0,0x0,0xf,0xc0,0x0,0x7,0xc0,0x0,0x5,0x0,0x0,0xf,0x0,0x0,0x3f,0xc0,0x0,0xcf,0xf0,0x0,0xff,0x30,0x0,0x1f,0x70,0x0,0x5,0x0,0x0,0x5,0x0,0x0,0x5,0x0,0x0,0x5,0x0,0x0,0x5,0x0,0x0,0x5,0x0,0x0,0x5,0x0,0x0,0xf,0x0,0x0,0x3f,0x0,0x0,0x0,0xc,0x0,0x0,0x3f,0x0,0x0,0x1f,0x0,0x0,0x17,0x0,0x1,0x14,0x0,0x0,0xc4,0x0,0x1,0xff,0x0,0x0,0xff,0x0,0x0,0x3f,0x0,0x0,0x15,0x0,0x0,0x55,0x0,0x1,0x50,0x0,0x1,0x40,0x0,0x1,0x55,0xc0,0x0,0x55,0xc0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0xfc,0x0,0x0,0x7c,0x0,0x0,0x5c,0x0,0x4,0x50,0x0,0x3,0x10,0x0,0x7,0xfc,0x0,0x3,0xfc,0x0,0x0,0xfc,0x0,0x0,0x54,0x0,0x1,0x54,0x0,0x5,0x40,0x0,0x5,0x0,0x0,0x5,0x57,0x0,0x1,0x57,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x3,0xf0,0x0,0x1,0xf0,0x0,0x1,0x70,0x0,0x11,0x40,0x0,0xc,0x40,0x0,0x1f,0xf0,0x0,0xf,0xf0,0x0,0x3,0xf0,0x0,0x1,0x50,0x0,0x5,0x50,0x0,0x15,0x0,0x0,0x14,0x0,0x0,0x15,0x5c,0x0,0x5,0x5c,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0xf,0xc0,0x0,0x7,0xc0,0x0,0x5,0xc0,0x0,0x45,0x0,0x0,0x31,0x0,0x0,0x7f,0xc0,0x0,0x3f,0xc0,0x0,0xf,0xc0,0x0,0x5,0x40,0x0,0x15,0x40,0x0,0x54,0x0,0x0,0x50,0x0,0x0,0x55,0x70,0x0,0x15,0x70,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0xf,0xc0,0x0,0x7,0xc0,0x0,0x5,0x0,0x0,0x1,0x0,0x0,0x4f,0xfc,0x0,0xff,0x3f,0x0,0x0,0xf1,0x0,0x1,0x50,0x0,0x5,0x54,0x0,0x14,0x15,0xc0,0x40,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x3,0xf0,0x0,0x1,0xf0,0x0,0x1,0x40,0x0,0x0,0x40,0x0,0x13,0xff,0x0,0x3f,0xcf,0xc0,0x0,0x3c,0x40,0x0,0x54,0x0,0x1,0x55,0x0,0x5,0x5,0x70,0x10,0x0,0x30,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0xfc,0x0,0x0,0x7c,0x0,0x0,0x50,0x0,0x0,0x10,0x0,0x4,0xff,0xc0,0xf,0xf3,0xf0,0x0,0xf,0x10,0x0,0x15,0x0,0x0,0x55,0x40,0x1,0x41,0x5c,0x4,0x0,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x3f,0x0,0x0,0x1f,0x0,0x0,0x14,0x0,0x0,0x4,0x0,0x1,0x3f,0xf0,0x3,0xfc,0xfc,0x0,0x3,0xc4,0x0,0x5,0x40,0x0,0x15,0x50,0x0,0x50,0x57,0x1,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0xf,0xc0,0x0,0x7,0xc0,0x0,0x5,0x1,0x0,0x1,0xff,0x0,0xf,0xfc,0x0,0x3f,0xc0,0x0,0x7f,0xc0,0x0,0x3,0xc0,0x0,0x5,0xc0,0x0,0x15,0x40,0x0,0x15,0x54,0x0,0x4,0x17,0x0,0xc,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0xfc,0x0,0x0,0x7c,0x0,0x0,0x50,0x10,0x0,0x1f,0xf0,0x0,0xff,0xc0,0x3,0xfc,0x0,0x7,0xfc,0x0,0x0,0x3c,0x0,0x0,0x5c,0x0,0x1,0x54,0x0,0x1,0x55,0x40,0x0,0x41,0x70,0x0,0xc0,0x30,0x0,0xc0,0x0,0x3,0xf0,0x0,0x3,0xf3,0x0,0x3,0xc3,0x0,0x0,0xcf,0x0,0x3,0xff,0x0,0xff,0xfc,0x0,0xf,0xf0,0x0,0x3,0xc0,0x0,0x3,0xc0,0x0,0x3,0x0,0x0,0x3,0xc0,0x0,0x3,0xc0,0x0,0x3,0xc0,0x0,0x3,0xc0,0x0,0x3,0xc0,0x0,0x3,0xc0,0x0,0x3,0xc0,0x0,0x0,0xc0,0x0,0x3,0xf3,0x0,0x3,0xf3,0x0,0xc3,0xc3,0x0,0xf0,0xcf,0x0,0x3f,0xfc,0x0,0xf,0xf0,0x0,0x3,0xf0,0x0,0x3,0xf0,0x0,0x0,0xc0,0x0,0x3,0xf0,0x0,0x3,0xf0,0x0,0x3,0x30,0x0,0x3,0x30,0x0,0x3,0x30,0x0,0x3,0x30,0x0,0x3,0x30,0x0,0x3,0x30,0x0,0x0,0xc0,0x0,0x3,0xf0,0x0,0x3,0xf0,0x0,0x3,0xc0,0x0,0x0,0xc0,0x0,0x3,0xf0,0x0,0xf,0xfc,0x0,0xf,0x3c,0x0,0x3f,0xcf,0x0,0x33,0xf3,0x0,0xc3,0xf3,0x0,0x3,0x30,0x0,0xf,0x3c,0x0,0xc,0xc,0x0,0xc,0xc,0x0,0xc,0xc,0x0,0xc,0xc,0x0,0xc,0xc,0x0,0x0,0xc,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x3d,0x0,0x0,0x0,0x35,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x34,0x0,0x0,0x0,0x3f,0x4,0x0,0x0,0xff,0xf4,0x0,0x3,0xff,0xf0,0x0,0xf,0x30,0x0,0x0,0xc,0x3c,0x0,0x0,0x4,0x3c,0x0,0x0,0x0,0x1c,0x0,0x0,0x0,0x54,0x0,0x0,0x0,0x55,0x0,0x0,0x1,0x51,0x0,0x0,0x5,0x45,0x40,0x0,0xd5,0x1,0x40,0x0,0xd0,0x0,0x40,0x0,0xc0,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0xf0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc0,0x0,0x0,0xf,0x40,0x0,0x0,0xd,0x40,0x0,0x0,0x1,0x40,0x0,0x0,0x1,0x0,0x0,0x0,0xf,0xc0,0x0,0x0,0x3f,0xf4,0x0,0x0,0xff,0xf4,0x0,0x0,0xc3,0xc0,0x0,0x0,0x4f,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x55,0x40,0x0,0x3,0x55,0x40,0x0,0x3,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x14,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x3,0xf0,0x0,0x0,0x3,0xd0,0x0,0x0,0x3,0x50,0x0,0x0,0x0,0x50,0x0,0x0,0x0,0x40,0x0,0x0,0x3,0xc0,0x0,0x0,0x3,0xc0,0x0,0x0,0x3,0xc0,0x0,0x0,0x3,0xc0,0x0,0x0,0x3,0x50,0x0,0x0,0x5,0x54,0x0,0x0,0x5,0x55,0x0,0x0,0x5,0x15,0x0,0x0,0x5,0x5,0x0,0x0,0x15,0x14,0x0,0x0,0x14,0xd0,0x0,0x0,0x14,0xc0,0x0,0x0,0x50,0xc0,0x0,0x0,0x50,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,0xf4,0x0,0x0,0x0,0xd4,0x0,0x0,0x0,0x14,0x0,0x0,0x0,0xf0,0x0,0x0,0xf,0xfc,0x10,0x0,0x3f,0xff,0xd0,0x0,0x10,0x3f,0xc0,0x0,0x0,0xfc,0x0,0x0,0x0,0xf0,0x0,0x0,0x0,0xf0,0x0,0x0,0x0,0x50,0x0,0x0,0x1,0x54,0x0,0x0,0x5,0x55,0x0,0x0,0x15,0x5,0x0,0x0,0xd4,0x1,0x0,0x0,0xc0,0x1,0x0,0x0,0xc0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x3,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0xfc,0x0,0x0,0x0,0x7c,0x0,0x0,0x0,0x5c,0x0,0x0,0x0,0x50,0x0,0x0,0x0,0x1c,0x0,0x0,0x10,0xfc,0x0,0x0,0x1f,0xff,0x0,0x0,0xf,0xff,0xc0,0x0,0x0,0xc,0xf0,0x0,0x0,0x3c,0x30,0x0,0x0,0x3c,0x10,0x0,0x0,0x34,0x0,0x0,0x0,0x15,0x0,0x0,0x0,0x55,0x0,0x0,0x0,0x45,0x40,0x0,0x1,0x51,0x50,0x0,0x1,0x40,0x57,0x0,0x1,0x0,0x7,0x0,0x1,0x0,0x3,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x3,0xf0,0x0,0x0,0x1,0xf0,0x0,0x0,0x1,0x70,0x0,0x0,0x1,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x3,0xf0,0x0,0x0,0x1f,0xfc,0x0,0x0,0x1f,0xff,0x0,0x0,0x3,0xc3,0x0,0x0,0x0,0xf1,0x0,0x0,0x0,0xf0,0x0,0x0,0x0,0x50,0x0,0x0,0x0,0x50,0x0,0x0,0x1,0x55,0x0,0x0,0x1,0x55,0xc0,0x0,0x0,0x50,0xc0,0x0,0x0,0x50,0x0,0x0,0x0,0x50,0x0,0x0,0x0,0x14,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc0,0x0,0x0,0x7,0xc0,0x0,0x0,0x5,0xc0,0x0,0x0,0x5,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x3,0xc0,0x0,0x0,0x3,0xc0,0x0,0x0,0x3,0xc0,0x0,0x0,0x3,0xc0,0x0,0x0,0x5,0xc0,0x0,0x0,0x15,0x50,0x0,0x0,0x55,0x50,0x0,0x0,0x54,0x50,0x0,0x0,0x50,0x50,0x0,0x0,0x14,0x54,0x0,0x0,0x7,0x14,0x0,0x0,0x3,0x14,0x0,0x0,0x3,0x5,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xc,0x0,0x0,0xc,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x17,0x0,0x0,0x0,0x14,0x0,0x0,0x0,0xf,0x0,0x0,0x4,0x3f,0xf0,0x0,0x7,0xff,0xfc,0x0,0x3,0xfc,0x4,0x0,0x0,0x3f,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x15,0x40,0x0,0x0,0x55,0x50,0x0,0x0,0x50,0x54,0x0,0x0,0x40,0x17,0x0,0x0,0x40,0x3,0x0,0x0,0x40,0x3,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x3,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xf,0xc0,0x0,0x0,0x7,0xc0,0x0,0x0,0x5,0xc0,0x0,0x0,0x5,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xf,0xc0,0x0,0x0,0x3f,0xf0,0x0,0x0,0x3f,0xf0,0x0,0x0,0x3f,0x30,0x0,0x0,0x4f,0xc4,0x0,0x0,0x4f,0xc4,0x0,0x0,0xf,0xc0,0x0,0x0,0x5,0x40,0x0,0x0,0x5,0x40,0x0,0x0,0x15,0x50,0x0,0x0,0x14,0x50,0x0,0x0,0x10,0x10,0x0,0x0,0x50,0x14,0x0,0x0,0x50,0x14,0x0,0x0,0x40,0x4,0x0,0x0,0x40,0x4,0x0,0x0,0xc0,0xc,0x0,0x0,0xc0,0xc,0x0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x3f,0xff,0xff,0xff,0x3f,0xff,0xff,0xf3,0xff,0xff,0xff,0xff,0xcf,0xfc,0xff,0xcf,0xff,0xff,0xcf,0xf3,0x33,0xcc,0xf,0xf0,0xcf,0xf3,0x3f,0xfc,0xff,0x3c,0xcf,0xf3,0x3f,0xcc,0x33,0xf3,0xc3,0xf3,0x3f,0xff,0xf3,0xcf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0xf1,0xea,0xe4,0xdd,0xd8,0xd2,0xcd,0xc8,0xc3,0xbf,0xba,0xb6,0xb2,0xae,0xab,0xa7,0xa4,0xa1,0x9e,0x9b,0x98,0x95,0x92,0x90,0x8d,0x8b,0x89,0x86,0x84,0x82,0x80,0x7e,0x7c,0x7a,0x78,0x77,0x75,0x73,0x72,0x70,0x6f,0x6d,0x6c,0x6a,0x69,0x68,0x66,0x65,0x64,0x63,0x62,0x60,0x5f,0x5e,0x5d,0x5c,0x5b,0x5a,0x59,0x58,0x57,0x56,0x55,0x54,0x54,0x53,0x52,0x51,0x50,0x50,0x4f,0x4e,0x4d,0x4d,0x4c,0x4b,0x4a,0x4a,0x49,0x48,0x48,0x47,0x47,0x46,0x45,0x45,0x44,0x44,0x43,0x43,0x42,0x42,0x41,0x41,0x40,0x0,0x0,0x0,0x0,0x0,0x2,0xa0,0x0,0x0,0x0,0x0,0x28,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0xa8,0x2,0x80,0x0,0x0,0xa,0x82,0xa0,0x0,0x0,0x2,0xa8,0xaa,0x0,0x8,0x8,0xaa,0xaa,0xa8,0x2,0x8a,0x2a,0xa5,0xaa,0x82,0xaa,0x8a,0x59,0xaa,0xaa,0xa8,0x82,0x96,0xaa,0x8a,0x82,0xa2,0xaa,0xaa,0xa8,0x2a,0xa2,0xaa,0xaa,0x8,0xaa,0xaa,0x42,0x82,0x0,0xa8,0xa5,0x50,0x80,0x0,0xa8,0xaa,0x55,0x0,0x0,0xaa,0xa,0x85,0x41,0x0,0x20,0xa2,0x80,0x54,0x0,0xa0,0x8,0xa0,0x0,0x0,0x80,0x2,0xa0,0x0,0x0,0x80,0x0,0xa8,0x0,0x0,0x0,0x0,0x28,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x2,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x80,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x20,0x8,0xa8,0x0,0x0,0x8,0x2,0x2a,0xa0,0xa,0xa8,0x2,0x28,0xaa,0xaa,0x28,0x8,0xaa,0x2a,0xaa,0xa0,0x8a,0x2a,0x29,0x6a,0x80,0xaa,0x8a,0xa6,0x6a,0x0,0xa2,0xa0,0x89,0xaa,0x0,0x8a,0xaa,0xaa,0xa2,0x0,0x2a,0xaa,0xaa,0xa0,0x0,0xaa,0xaa,0xaa,0x80,0x0,0x8a,0xa2,0xa4,0x94,0x0,0x28,0xaa,0x95,0x41,0x0,0x8a,0xa,0x94,0x0,0x40,0x28,0xa2,0xa0,0x0,0x0,0xa0,0xa,0xa0,0x0,0x0,0x80,0x0,0xa0,0x0,0x0,0x80,0x0,0xa8,0x0,0x0,0x0,0x0,0x28,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x88,0x0,0x0,0x0,0x2,0xa8,0x0,0x2,0x88,0x2a,0xa8,0x0,0x0,0xa2,0xaa,0x20,0x0,0x0,0xa2,0xaa,0xa0,0x0,0x8,0xaa,0xa6,0xa0,0x0,0x8a,0xa8,0xa9,0xa0,0x0,0xaa,0x8,0xa8,0x80,0x0,0xaa,0xa2,0x22,0x80,0x0,0x82,0xaa,0x8a,0x40,0x0,0x2a,0xaa,0xa9,0x0,0x0,0xaa,0xaa,0x94,0x0,0x0,0x8a,0xaa,0xa0,0x0,0x0,0x2a,0xaa,0xa0,0x0,0x0,0xaa,0xaa,0xa0,0x0,0x0,0xaa,0xaa,0x80,0x0,0x0,0x2a,0xa,0x80,0x0,0x0,0xaa,0xa2,0x80,0x0,0x0,0xaa,0x28,0x80,0x0,0x0,0xa0,0xa,0x80,0x0,0x0,0x80,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x28,0x0,0x0,0x0,0x0,0xaa,0x0,0x0,0x0,0x2,0xa2,0x0,0x0,0x0,0x22,0x22,0x0,0x0,0x0,0x22,0xa2,0x80,0x0,0x0,0x28,0xa8,0x80,0x0,0x0,0x28,0xa8,0x80,0x0,0x0,0xaa,0x28,0xa0,0x0,0x0,0xa0,0x82,0xa0,0x0,0x0,0xaa,0xaa,0xa0,0x0,0x0,0x2a,0xaa,0xa0,0x0,0x0,0xaa,0xaa,0xa0,0x0,0x0,0xaa,0xaa,0x80,0x0,0x0,0xaa,0xa8,0x80,0x0,0x0,0xaa,0xa2,0x0,0x0,0x0,0xaa,0x8a,0x0,0x0,0x0,0xa8,0x28,0x0,0x0,0x0,0xaa,0xa0,0x0,0x0,0x0,0xaa,0x80,0x0,0x0,0x0,0xaa,0x0,0x0,0x0,0x0,0xa8,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0xa0,0x0,0x0,0x0,0x8,0xa0,0x0,0x0,0x0,0xa,0xa8,0x0,0x0,0x0,0xa,0x88,0x0,0x0,0x0,0x88,0x8a,0x0,0x0,0x0,0xa8,0xa2,0x0,0x0,0x0,0x8a,0xaa,0x0,0x0,0x0,0xa0,0xa2,0x0,0x0,0x0,0xaa,0xaa,0x0,0x0,0x0,0xaa,0xaa,0x0,0x0,0x0,0xaa,0xaa,0x0,0x0,0x0,0xaa,0xaa,0x0,0x0,0x0,0xaa,0xaa,0x0,0x0,0x0,0xaa,0xaa,0x0,0x0,0x0,0xaa,0x88,0x0,0x0,0x0,0xaa,0xa8,0x0,0x0,0x0,0xa8,0x28,0x0,0x0,0x0,0xaa,0xa0,0x0,0x0,0x0,0xaa,0xa0,0x0,0x0,0x0,0xaa,0x80,0x0,0x0,0x0,0xaa,0x0,0x0,0x0,0x0,0xa0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0,0x0,0x3c,0x3c,0x0,0xcc,0x3c,0x0,0x33,0x30,0x0,0xcc,0xd3,0x0,0x7,0xf3,0x0,0x3f,0xff,0x0,0xf7,0xdc,0x0,0x3f,0xf0,0x0,0xfd,0xc0,0x0,0x30,0xf0,0x0,0x30,0xcc,0x0,0x3c,0x3c,0x0,0xc,0x0,0x0,0x0,0xf0,0x0,0x3,0xc,0x0,0xc,0xd0,0x0,0xf,0x3f,0x0,0x31,0xcc,0xc0,0xf,0x3c,0x0,0x0,0xcf,0x0,0xc,0xdc,0xc0,0x7,0x4f,0x0,0x33,0x33,0x0,0xc,0x1c,0x0,0x3,0xc3,0x0,0x0,0x30,0x0,0x3,0x0,0x0,0x0,0x3f,0x0,0x0,0x33,0x0,0x3,0xf,0xc0,0x3,0xff,0x0,0xf,0x1f,0x0,0x3,0xfc,0x30,0xf,0x70,0x30,0xc,0x3f,0xf0,0x0,0xcc,0xc0,0x0,0x77,0x30,0x3,0xcf,0xc0,0x3,0xf0,0x0,0x0,0xcc,0x0,0x0,0x3f,0x0,0x0,0xf,0x0,0x0,0x30,0xc0,0x0,0x3,0x30,0x0,0xfc,0xf0,0x3,0x31,0xcc,0x0,0x1c,0xf0,0x0,0xf3,0x40,0x3,0x3f,0x30,0x0,0xf7,0xfc,0x0,0xcd,0xc0,0x0,0x30,0x30,0x0,0xcf,0xc0,0x0,0xc,0x0,0x0,0x0,0xc0,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa8,0xaa,0xa0,0x2a,0x82,0x5a,0xa,0x84,0x4a,0xa7,0x2a,0x9d,0x6a,0x76,0x1a,0x5a,0x9a,0xaa,0xaa,0xaa,0xaa,0xaa,0xea,0xaa,0x2a,0xea,0x2b,0x6a,0x29,0x60,0x9,0x40,0x1,0x76,0x95,0x15,0x5c,0x9d,0xd6,0x85,0x52,0xa1,0x4a,0xab,0xfa,0xaf,0xfe,0xa5,0x5e,0xa9,0x56,0xa9,0x5a,0xa5,0xd2,0x97,0xf6,0x17,0x54,0x57,0xf5,0x55,0x75,0x17,0xf5,0x91,0xd0,0xa9,0x56,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0xaa,0xa5,0xaa,0x96,0xaa,0x59,0xa9,0x66,0x95,0xaa,0x69,0xaa,0x69,0xaa,0x96,0xaa,0xaa,0xaa,0x96,0xaa,0x69,0xaa,0x6a,0x6a,0x9a,0x96,0x9a,0xa9,0xa6,0xa9,0xa6,0xa6,0x9a,0xa6,0x6a,0xa6,0x6a,0x80,0x9a,0x4c,0xa5,0x80,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x90,0x1,0x9c,0xd,0xa7,0x36,0xa9,0xda,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xaa,0x6a,0xa9,0x5a,0xa5,0x56,0xaa,0xaa,0xaa,0xaa,0xae,0xea,0xa6,0x6a,0xe6,0x6e,0x66,0x66,0x66,0x66,0x56,0x56,0x95,0x5a,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa5,0x6a,0xab,0xaa,0xaf,0xaa,0xaa,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0x91,0x1a,0xa5,0x6a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x41,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x41,0x51,0x41,0x51,0x51,0x51,0x51,0x51,0x51,0x40,0x41,0x14,0x54,0x54,0x51,0x45,0x15,0x15,0x0,0x41,0x14,0x54,0x54,0x41,0x54,0x54,0x14,0x41,0x54,0x50,0x44,0x14,0x14,0x0,0x54,0x54,0x54,0x0,0x15,0x15,0x1,0x54,0x54,0x54,0x14,0x41,0x41,0x14,0x15,0x15,0x1,0x14,0x14,0x14,0x41,0x0,0x14,0x54,0x51,0x51,0x51,0x45,0x45,0x45,0x41,0x14,0x14,0x14,0x41,0x14,0x14,0x14,0x41,0x41,0x14,0x14,0x14,0x40,0x54,0x54,0x14,0x41,0x3,0xbf,0x4,0x0,0x3,0x4f,0x3,0xbf,0x0,0xb0,0x3,0x4f,0x0,0x60,0x0,0xb0,0x0,0x0,0x0,0x60,0x0,0x60,0x0,0xb0,0x0,0xb0,0x3,0x4f,0x3,0x4f,0x3,0xbf,0xa,0x98,0xa,0x95,0x8,0x96,0x4,0x90,0x3,0x8c,0x4,0x90,0x8,0x96,0xa,0x95,0xc,0x36,0x9,0x4f,0x3,0x61,0xc,0x61,0xa,0x7a,0xc,0x8f,0x19,0x7a,0x13,0x61,0x11,0x7a,0x13,0x8f,0x1b,0x8f,0xe,0x7a,0x19,0x7a,0x17,0x61,0x11,0x4f,0xf,0x36,0x5,0x4f,0x7,0x61,0x1a,0x61,0x1b,0x8f,0xc,0x36,0x9,0x4f,0xe,0x7a,0xd,0x4f,0xf,0x61,0x15,0x7a,0x10,0x8f,0x3,0x61,0xc,0x61,0x17,0x8f,0x15,0x4f,0x12,0x36,0x0,0x3f,0xf0,0x0,0x0,0x3,0xff,0x0,0xf,0xff,0xff,0xc0,0xf,0xff,0xfc,0x0,0x3f,0xff,0xf0,0x0,0xf,0xff,0xff,0xc0,0x3,0xff,0xff,0xfc,0x0,0xff,0xff,0xff,0xf,0xff,0xff,0xff,0x3f,0xff,0xff,0xfc,0xf,0xff,0xff,0xf0,0x3,0xff,0xfc,0x0,0x3,0xff,0xc0,0x0,0x0,0xff,0xff,0xc0,0x0,0xf,0xff,0xf0,0x0,0x0,0x3f,0xc0,0x0,0x3,0xff,0x0,0x0,0xf,0xfc,0x0,0x0,0x3f,0xc0,0x0,0x0,0x3,0xf0,0x0,0x0,0x0,0x3c,0x0,0x0,0x0,0xf0,0x0,0x0,0x3,0xc0,0x0,0x0,0x3,0x0,0x0,0x55,0x55,0x54,0x44,0x54,0x0,0x54,0x0,0x54,0x0,0x55,0x1,0x55,0x1,0x55,0x1,0x55,0x45,0x55,0x1,0x54,0x0,0x54,0x10,0x54,0x0,0x55,0x11,0x55,0x1,0x55,0x45,0x0,0x0,0x0,0x54,0x0,0x55,0x11,0x55,0x1,0x55,0x45,0x0,0x28,0x80,0xc2,0xcc,0xf0,0xf8,0xe5,0x28,0x80,0x84,0xac,0x0,0x0,0x8,0x0,0xa8,0xac,0xff,0x0,0x8,0x0,0xd3,0x96,0x80,0x22,0x14,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0 };

// Stellar Lifeline
uint8_t CARTRIDGE_2[0x4000] = { 0x7e,0xd6,0x45,0x0,0x0,0x0,0x0,0x0,0xfa,0x0,0x0,0xe0,0x0,0xe0,0x0,0x28,0xfe,0x28,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0xc,0x1c,0x0,0x0,0xc,0x1c,0x3c,0x0,0xc,0x1c,0x3c,0x7c,0x40,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x7c,0x10,0x0,0x0,0x2,0xc,0x0,0x10,0x10,0x10,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0xfe,0x82,0xfe,0x0,0x42,0xfe,0x2,0x0,0x9e,0x92,0xf2,0x0,0x92,0x92,0xfe,0x0,0xf0,0x10,0xfe,0x0,0xf2,0x92,0x9e,0x0,0xfe,0x92,0x9e,0x0,0x80,0x80,0xfe,0x0,0xfe,0x92,0xfe,0x0,0xf2,0x92,0xfe,0x0,0x0,0x28,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0xfe,0x82,0x0,0x28,0x28,0x28,0x0,0x0,0x82,0xfe,0x0,0xc0,0x9a,0xf0,0x0,0x0,0x0,0x0,0x0,0x7e,0x90,0x7e,0x0,0xfe,0x92,0x6c,0x0,0xfe,0x82,0xc6,0x0,0xfe,0x82,0x7c,0x0,0xfe,0x92,0x82,0x0,0xfe,0x90,0x80,0x0,0xfe,0x82,0x9e,0x0,0xfe,0x10,0xfe,0x0,0x82,0xfe,0x82,0x0,0x4,0x82,0xfc,0x0,0xfe,0x10,0xee,0x0,0xfe,0x2,0x2,0x0,0xfe,0x40,0xfe,0x0,0xfe,0x80,0xfe,0x0,0xfe,0x82,0xfe,0x0,0xfe,0x90,0xf0,0x0,0x7c,0x8a,0x7e,0x0,0xfe,0x90,0x6e,0x0,0xf6,0x92,0xde,0x0,0x80,0xfe,0x80,0x0,0xfe,0x2,0xfe,0x0,0xfc,0x2,0xfc,0x0,0xfe,0x4,0xfe,0x0,0xee,0x10,0xee,0x0,0xf0,0x1e,0xf0,0x0,0x8e,0x92,0xe2,0x0,0x5,0x8,0xb,0x3,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xf0,0x5,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xf0,0x5,0xfc,0x1,0xfc,0x1,0xf0,0x5,0x0,0x57,0x0,0x7e,0x0,0x57,0xf0,0x5,0xfc,0x1,0xfc,0x1,0xf0,0x5,0xf,0x50,0x3f,0x40,0x3f,0x40,0x3f,0xc0,0xf,0xa0,0xf,0xb0,0xf,0xa0,0x3f,0xc0,0x3f,0x40,0x3f,0x40,0xf,0x50,0x5,0x8,0xb,0x3,0xf0,0x5,0xfc,0x1,0xfc,0x1,0xfc,0x3,0xf0,0xa,0xf0,0xe,0xf0,0xa,0xfc,0x3,0xfc,0x1,0xfc,0x1,0xf0,0x5,0xf,0x50,0x3f,0x40,0x3f,0x40,0xf,0x50,0x0,0xd5,0x0,0xff,0x0,0xd5,0xf,0x50,0x3f,0x40,0x3f,0x40,0xf,0x50,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xf,0x50,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x5,0x4,0xb,0x3,0xfc,0x3,0xf3,0xc,0xcf,0x30,0x33,0xcc,0x3c,0xc3,0x3c,0xc3,0x3c,0xc3,0x33,0xcc,0xcf,0x30,0xf3,0xc,0xfc,0x3,0x3f,0xc0,0xcf,0x30,0xf3,0xc,0xcc,0x33,0x3c,0xc3,0x3c,0xc3,0x3c,0xc3,0xcc,0x33,0xf3,0xc,0xcf,0x30,0x3f,0xc0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x1,0x1,0x3,0x2,0xcf,0x20,0x3,0xb8,0xcf,0x20,0xff,0x0,0xff,0x0,0xff,0x0,0xfc,0x2,0xf0,0xb,0xfc,0x2,0xff,0x0,0x3f,0x80,0xff,0x0,0x2,0x2,0x5,0x2,0xf3,0xc,0xc0,0x35,0x0,0xea,0xc0,0x35,0xf3,0xc,0xff,0x0,0xff,0x0,0x3f,0x80,0xff,0x0,0xff,0x0,0xff,0x0,0xfc,0x3,0xf0,0xe,0xfc,0x3,0xff,0x0,0x3f,0xc0,0xf,0x50,0x3,0xa8,0xf,0x50,0x3f,0xc0,0x2,0x2,0x5,0x2,0xf3,0xc,0xc0,0x3a,0x0,0xd5,0xc0,0x3a,0xf3,0xc,0xff,0x0,0xff,0x0,0x3f,0x40,0xff,0x0,0xff,0x0,0xff,0x0,0xfc,0x3,0xf0,0xd,0xfc,0x3,0xff,0x0,0x3f,0xc0,0xf,0xa0,0x3,0x54,0xf,0xa0,0x3f,0xc0,0x2,0x2,0x5,0x2,0xfc,0x3,0xf0,0xd,0xc0,0x3a,0xf0,0xd,0xfc,0x3,0xff,0x0,0xff,0x0,0x3f,0x80,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xfc,0x3,0xff,0x0,0xff,0x0,0xcf,0x30,0xf,0xd0,0x3,0xa8,0xf,0xd0,0xcf,0x30,0x2,0x4,0x5,0x2,0xf3,0xc,0xc0,0x17,0x0,0xaa,0xc0,0x17,0xf3,0xc,0xff,0x0,0xff,0x0,0x3f,0xc0,0xff,0x0,0xff,0x0,0xff,0x0,0xfc,0x1,0xf0,0xa,0xfc,0x1,0xff,0x0,0x3f,0xc0,0xf,0x70,0x3,0xac,0xf,0x70,0x3f,0xc0,0x2,0x4,0x5,0x2,0xf3,0xc,0xc0,0x2b,0x0,0x55,0xc0,0x2b,0xf3,0xc,0xff,0x0,0xff,0x0,0x3f,0xc0,0xff,0x0,0xff,0x0,0xff,0x0,0xfc,0x2,0xf0,0x5,0xfc,0x2,0xff,0x0,0x3f,0xc0,0xf,0xb0,0x3,0x5c,0xf,0xb0,0x3f,0xc0,0x2,0x4,0x5,0x2,0xcf,0x30,0xc3,0x1c,0x0,0xab,0xc3,0x1c,0xcf,0x30,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xfc,0x3,0xfc,0x1,0xf0,0xa,0xfc,0x1,0xfc,0x3,0xff,0x0,0x3f,0xc0,0xf,0xb0,0x3f,0xc0,0xff,0x0,0x6,0x7,0xd,0x4,0xff,0x0,0xff,0x0,0xfc,0x1,0xf3,0x4,0xcf,0x10,0x3,0xd4,0x0,0xd5,0x3,0xd4,0xcf,0x10,0xf3,0x4,0xfc,0x1,0xff,0x0,0xff,0x0,0xc0,0x15,0x0,0x55,0xc0,0x15,0xf3,0x4,0xf3,0x4,0xc0,0x3f,0x0,0x7f,0xc0,0x3f,0xf3,0x4,0xf3,0x4,0xc0,0x15,0x0,0x55,0xc0,0x15,0xff,0x0,0x3f,0x40,0xcf,0x10,0xf3,0x4,0xfc,0x1,0xf0,0x5,0x0,0x55,0xf0,0x5,0xfc,0x1,0xf3,0x4,0xcf,0x10,0x3f,0x40,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x3f,0x40,0x3f,0x40,0x3f,0x40,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x6,0x7,0xd,0x4,0xff,0x0,0xff,0x0,0xfc,0x1,0xf3,0x4,0xcf,0x10,0x3,0xd4,0x0,0xd5,0x3,0xd4,0xcf,0x10,0xf3,0x4,0xfc,0x1,0xff,0x0,0xff,0x0,0xc0,0x15,0x0,0x55,0xc0,0x15,0xf3,0x4,0xf3,0x4,0xf3,0x4,0x0,0x55,0xf3,0x4,0xf3,0x4,0xf3,0x4,0xc0,0x15,0x0,0x55,0xc0,0x15,0xff,0x0,0x3f,0x40,0xcf,0x10,0xf3,0x4,0xfc,0x1,0xf0,0x5,0x0,0x55,0xf0,0x5,0xfc,0x1,0xf3,0x4,0xcf,0x10,0x3f,0x40,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x3f,0x40,0x3f,0x40,0x3f,0x40,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x5,0x4,0xb,0x3,0xff,0x0,0xfc,0x3,0xf0,0xf,0xc0,0x1f,0xc0,0x3d,0x0,0xdf,0x0,0xf7,0x0,0xfe,0x0,0x7f,0xc0,0x3f,0xf0,0x7,0xf,0xe0,0xf,0xf0,0x3,0x78,0x3,0xfc,0x0,0xee,0x0,0xfb,0x0,0xbf,0x0,0xfe,0x3,0xec,0xf,0xb0,0x3f,0x80,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x2,0x2,0x5,0x2,0x33,0x8c,0xc0,0x3f,0x0,0xbb,0xc0,0x3f,0x33,0x4c,0x3f,0x80,0xff,0x0,0x3f,0x40,0xff,0x0,0x3f,0x80,0x6,0x5,0xc,0x3,0xff,0x0,0xfc,0x1,0xf3,0x8,0xf0,0x6,0xf0,0x9,0x33,0x84,0xf3,0x8,0xcc,0x11,0xc3,0x28,0xf3,0x8,0x3c,0x82,0xff,0x0,0x3f,0x80,0xcc,0x12,0x3f,0x80,0xf3,0x8,0xc3,0x24,0xc0,0x19,0x3f,0x40,0xf3,0x4,0x30,0x49,0xcf,0x20,0xf3,0x8,0xf,0x90,0xff,0x0,0xff,0x0,0xff,0x0,0x3f,0x80,0xff,0x0,0xff,0x0,0xff,0x0,0x3f,0x80,0x3f,0x80,0xff,0x0,0x3f,0x80,0xff,0x0,0x6,0x5,0xc,0x3,0xff,0x0,0xcc,0x22,0xf3,0x4,0xff,0x0,0xcf,0x10,0xff,0x0,0x3f,0x80,0xff,0x0,0xf3,0x8,0xcf,0x10,0xf0,0x9,0xff,0x0,0x3f,0x80,0x3c,0x42,0xf3,0x4,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xfc,0x2,0xff,0x0,0xcf,0x20,0x3c,0x42,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x3f,0x80,0xff,0x0,0x3f,0x40,0xff,0x0,0xff,0x0,0xff,0x0,0x3f,0x40,0xff,0x0,0x5,0x4,0xa,0x3,0xfc,0x2,0x3c,0x82,0xcc,0x22,0xf0,0xa,0x3,0xa8,0xf3,0x8,0xf0,0xa,0xcc,0x22,0x3c,0x82,0xfc,0x2,0xff,0x0,0xf3,0x8,0xcf,0x20,0x3f,0x80,0x3,0xa8,0x3f,0x80,0x3f,0x80,0xcf,0x20,0xf3,0x8,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x3,0x3,0x7,0x3,0xf0,0xa,0xc0,0x2a,0x0,0xaa,0x33,0x88,0x0,0xaa,0xc0,0x2a,0xf0,0xa,0x3f,0x80,0xf,0xa0,0x3,0xa8,0x33,0x88,0x3,0xa8,0xf,0xa0,0x3f,0x80,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x4,0x3,0x7,0x3,0x3,0xfc,0xf3,0xc,0xf3,0xc,0x3,0xfc,0x3f,0xc0,0x3f,0xc0,0x3,0xfc,0x3,0xfc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x3,0xfc,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x4,0x3,0x7,0x3,0x3,0xfc,0x3f,0xc0,0x3f,0xc0,0x3,0xfc,0xf3,0xc,0xf3,0xc,0x3,0xfc,0x3,0xfc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x3,0xfc,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0xff,0x0,0x4,0x4,0x7,0x3,0x30,0xcf,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x30,0xcf,0x30,0xcf,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x33,0xcc,0x30,0xcf,0x3f,0xc0,0x3f,0xc0,0x3f,0xc0,0x3f,0xc0,0x3f,0xc0,0x3f,0xc0,0x3f,0xc0,0xc1,0x35,0xc0,0xef,0xc1,0x7b,0xc1,0xc1,0xc1,0xdd,0xc2,0x9,0xc2,0x35,0xc2,0x61,0xc2,0x8d,0xc2,0xb9,0x35,0x33,0x36,0xd7,0x38,0x7b,0x3a,0xff,0x39,0xdb,0x39,0x87,0x3c,0x23,0x3d,0x17,0x3d,0xc3,0x3e,0x6f,0x3f,0x1b,0x35,0x10,0x8d,0x2,0x6e,0x84,0xa6,0x80,0x27,0x2a,0x2a,0x1a,0x34,0x12,0x9e,0x52,0x44,0x44,0x84,0x3,0xa6,0x86,0x97,0x1f,0x35,0x2,0x84,0x3,0x8b,0x4,0xa6,0x86,0x97,0x4b,0x35,0x10,0x20,0xe0,0x81,0x1,0x26,0xb,0xa6,0x80,0x97,0x48,0xa6,0x80,0x97,0x49,0x20,0xd2,0x39,0x9d,0xa7,0x20,0xcd,0x34,0x76,0x8d,0x6f,0x27,0x67,0xce,0xc0,0x3,0xc6,0x4,0x3d,0x33,0xcb,0x96,0x48,0xc6,0x20,0x3d,0xd3,0x2c,0x1f,0x1,0xd6,0x49,0x54,0x54,0x3a,0xd6,0x49,0xc4,0x3,0x10,0x8e,0xc6,0x7d,0xe6,0xa5,0xd7,0x3a,0x86,0x4,0x97,0x38,0x69,0xc4,0xa6,0xc0,0x34,0x12,0xc6,0x7,0x96,0x3a,0x43,0xa4,0x84,0x68,0xe4,0x24,0x8,0x34,0x2,0x96,0x3a,0x94,0x1f,0x20,0x6,0x34,0x2,0x96,0x3a,0x94,0x4b,0xaa,0xe0,0xa7,0x84,0x30,0x88,0x20,0x5a,0x26,0xdf,0x35,0x12,0x4,0x3a,0x4,0x3a,0x26,0x6,0x30,0x1,0x86,0xc0,0x97,0x3a,0xa,0x38,0x26,0xc5,0x96,0x49,0x8b,0x4,0x97,0x49,0x35,0xf6,0xc0,0x30,0xc,0x3,0x80,0x20,0x25,0xa,0x81,0x40,0x25,0x8,0x80,0x20,0x81,0x40,0x25,0x2,0x1c,0xfe,0x39,0xd,0x20,0x26,0x35,0x9b,0x82,0x19,0x97,0x82,0x96,0x81,0x89,0x0,0x19,0xd6,0x81,0xc4,0xf0,0x34,0x4,0x97,0x81,0x84,0xf0,0xa0,0xe0,0x27,0x19,0x34,0x70,0x8e,0x0,0x7c,0xbd,0xdd,0x92,0x9d,0xb0,0x7,0x35,0x70,0x86,0x2,0x97,0x1d,0x96,0x88,0x81,0x6,0x24,0x2,0xc,0x88,0x86,0x2,0x97,0x18,0x39,0x34,0x6,0x9d,0xa4,0x1,0xb9,0x8,0x83,0x0,0x96,0x15,0xc6,0x58,0x3d,0xdb,0x49,0xd7,0x49,0x96,0x80,0x81,0x9,0x25,0x2,0x86,0x9,0x8d,0xc,0x96,0x87,0x9b,0x86,0x8d,0x6,0x96,0x88,0x8d,0x2,0x35,0x86,0x8d,0x33,0x96,0x49,0x8b,0xa,0x97,0x49,0x39,0x9d,0xa4,0x1,0xb0,0x0,0x83,0x0,0x96,0x15,0xc6,0x6c,0x3d,0xd7,0x49,0x96,0x81,0xf,0x4a,0x8d,0x2,0x96,0x82,0x34,0x2,0x44,0x44,0x44,0x44,0x8d,0x4,0x35,0x2,0x84,0xf,0x26,0x8,0xd,0x4a,0x26,0x4,0x86,0x20,0x20,0x4,0x8b,0x30,0x97,0x4a,0xe,0xa7,0xd6,0x19,0xc1,0x8,0x25,0x2,0xc6,0x8,0x9d,0xa4,0x1,0xb9,0x33,0x8b,0x0,0x96,0x1e,0x27,0xb,0xa,0x1e,0x5a,0x2b,0x6,0x86,0x28,0x9d,0xa7,0x20,0xf7,0x96,0x19,0x81,0x8,0x24,0x2a,0x48,0x48,0x8b,0x33,0x97,0x49,0x96,0x1a,0x49,0x49,0x49,0x84,0x3,0x8b,0x24,0x9d,0xa7,0x86,0x20,0xe,0xa7,0x9d,0xb3,0x44,0x44,0x8b,0x5,0x1f,0x89,0x9d,0xb3,0x84,0xf,0x8b,0x5,0x3d,0xc5,0x4,0x27,0x2,0xe,0xad,0x39,0x34,0x40,0x86,0x1,0x97,0x25,0x13,0xee,0xe4,0xc6,0x40,0x96,0x28,0x80,0x10,0xdd,0x26,0xce,0x32,0x0,0xc6,0x3c,0xd7,0x38,0x6f,0xc4,0x96,0x42,0xbd,0xc8,0x4e,0xa7,0x49,0x97,0x42,0x8d,0xc5,0x1f,0x2,0x8d,0xc1,0x1f,0x1,0x9d,0xb3,0x84,0x1,0x27,0x2,0x1e,0x12,0xaf,0x45,0x10,0xaf,0x47,0xdc,0x26,0xa7,0x41,0xe7,0x43,0x33,0x4a,0xa,0x38,0x26,0xd4,0xbd,0xc8,0x87,0x86,0x50,0x97,0x37,0x86,0x3c,0x97,0x38,0xce,0x32,0x0,0xa6,0xc4,0x2b,0x4b,0x27,0x16,0xa6,0x41,0xe6,0x43,0xbd,0xc8,0x54,0x1f,0x98,0x53,0xe4,0x84,0x34,0x4,0xa4,0x89,0x18,0x0,0xaa,0xe0,0xa7,0x84,0x86,0x1,0xa7,0xc4,0x96,0x37,0x4a,0x27,0x2f,0xec,0x41,0xe3,0x45,0xed,0x41,0x81,0xa5,0x24,0xa,0xec,0x43,0xe3,0x47,0xed,0x43,0x81,0x7f,0x25,0x6,0x6f,0xc4,0x63,0xc4,0x20,0x15,0xa6,0x49,0x8d,0x3b,0xa7,0x49,0x97,0x42,0xa6,0x41,0xe6,0x43,0x8d,0x21,0x20,0x5,0x86,0x96,0x4a,0x26,0xfd,0x33,0x4a,0xbd,0xc8,0x8c,0xa,0x38,0x26,0xa3,0x96,0x45,0x80,0x4,0x24,0x1,0x4f,0x97,0x45,0xa,0x37,0x10,0x26,0xff,0x8d,0x35,0xc0,0x8d,0x14,0x1f,0x98,0x53,0xe4,0x84,0x34,0x4,0x94,0x42,0xaa,0xe0,0xa7,0x84,0x39,0x8b,0x55,0x24,0x1,0x4f,0x39,0x34,0x4,0xc6,0x20,0x3d,0x9b,0x2c,0x1f,0x1,0xe6,0xe4,0x54,0x54,0x3a,0xe6,0xe0,0xc4,0x3,0x10,0x8e,0xc8,0x6d,0xe6,0xa5,0x39,0xc0,0x30,0xc,0x3,0x34,0x4,0xdc,0x43,0xcb,0x17,0x89,0x3,0x84,0xf,0xdd,0x43,0x8b,0xc0,0x34,0x6,0xa6,0xf4,0x69,0xf1,0x35,0x84,0x86,0xfe,0x97,0x45,0x39,0x96,0x45,0x27,0x10,0x8d,0xdf,0x91,0x45,0x25,0x3,0x44,0x20,0xf9,0x8a,0x2,0x84,0xfb,0xb7,0xff,0x20,0x39,0x96,0x45,0x27,0xc,0x8d,0xe5,0xa,0x46,0x2a,0x6,0x96,0x47,0x97,0x46,0xa,0x45,0x39,0x86,0xe6,0x97,0x45,0xf,0x46,0x86,0x2,0x97,0x47,0x39,0x96,0x45,0x81,0x3c,0x24,0x8,0x86,0x78,0x97,0x45,0xf,0x46,0xf,0x47,0x39,0x13,0x4a,0x26,0xfc,0x39,0x0,0x55,0xaa,0xff,0x9d,0xb3,0x84,0x7f,0xa7,0x1,0x9d,0xb3,0x81,0xa6,0x24,0xfa,0xa7,0x84,0x9d,0xb3,0x84,0x3,0x27,0xfa,0x10,0x8e,0xc8,0xd2,0xa6,0xa6,0xa7,0x2,0x9d,0xb3,0x84,0xf,0x8b,0x4,0xa7,0x3,0x39,0xc6,0xf,0x8e,0x1,0x70,0xa6,0x1,0x90,0x2b,0xa7,0x1,0x2a,0x6,0x84,0x7f,0xa7,0x1,0x8d,0xce,0x6a,0x3,0x2a,0x2,0x8d,0xd0,0x30,0x8,0x5a,0x26,0xe7,0x39,0x8e,0x1,0x70,0xc6,0xf,0x8d,0xb5,0x6f,0x4,0x6f,0x5,0x6f,0x6,0x6f,0x7,0x30,0x8,0x5a,0x26,0xf1,0xc6,0xf,0xce,0x1,0x70,0xae,0x44,0x27,0x2,0x6f,0x84,0xae,0x46,0xaf,0x44,0x33,0x48,0x5a,0x26,0xf1,0x39,0xce,0x1,0x70,0xc6,0xf,0xd7,0x38,0xec,0xc4,0xbd,0xc8,0x54,0xaf,0x46,0xe4,0x42,0xea,0x84,0xe7,0x84,0x33,0x48,0xa,0x38,0x26,0xed,0x39,0xcf,0x75,0xd1,0x84,0xd1,0xcc,0xd2,0x4,0xd2,0x2d,0xd2,0xd3,0xd2,0x8b,0xd2,0x7a,0xd1,0xa5,0xd3,0x19,0x10,0xce,0x1,0x4e,0x86,0x3,0x97,0x17,0x96,0x20,0x27,0xc,0x96,0x40,0x10,0x26,0xe,0xa9,0x96,0x23,0x10,0x26,0x12,0x24,0x96,0x86,0x9a,0x30,0x26,0x6,0x96,0x87,0x10,0x26,0x3,0x78,0x96,0x16,0x26,0x3,0xbd,0xcb,0x25,0xdc,0x19,0x26,0x3,0xbd,0xcc,0x28,0xbd,0xd4,0xe2,0xce,0x33,0x40,0xa6,0xc4,0x85,0x40,0x27,0x8,0xe6,0x42,0x58,0x8e,0xc9,0x5d,0xad,0x95,0x33,0xc8,0x10,0x9d,0xb6,0xa6,0xc4,0x2a,0xeb,0x96,0x20,0x27,0xe,0xa,0x4e,0x2a,0x56,0x9d,0xb3,0x84,0x7,0x8b,0x4,0x97,0x4e,0x20,0x7,0x96,0x40,0xf,0x40,0x4d,0x27,0x45,0x96,0x16,0x26,0x41,0x96,0x16,0x26,0x3d,0xce,0x33,0x60,0xc6,0x5,0xa6,0xc4,0x85,0x40,0x27,0x8,0x33,0xc8,0x10,0x5a,0x26,0xf4,0x20,0x2a,0x86,0x70,0xa7,0x40,0xc6,0x4,0xb6,0x33,0x43,0x81,0x0,0x34,0x1,0x27,0x1,0x50,0x1d,0xd3,0x29,0xed,0x4d,0x96,0x28,0xa7,0x4c,0xcc,0x0,0x30,0x35,0x1,0x27,0x1,0x50,0xed,0x47,0x86,0x19,0xa7,0x4f,0xbd,0xc8,0xbd,0x96,0x20,0x43,0x94,0x23,0x27,0x38,0xad,0x9f,0xa0,0x0,0x8e,0xe,0x10,0x9f,0x21,0xad,0x9f,0xa0,0x0,0x4d,0x26,0x19,0x9e,0x21,0x26,0xf5,0x8e,0x0,0xb4,0x9f,0x21,0xb6,0xff,0x22,0x88,0x8,0x85,0x8,0x26,0x2,0x88,0x10,0xb7,0xff,0x22,0x20,0xe0,0xc6,0x3,0x13,0x96,0x23,0x26,0xf9,0x5a,0x26,0xf8,0x96,0x54,0xb7,0xff,0x22,0x9d,0xb6,0x96,0x25,0x26,0xfa,0xbd,0xcb,0x0,0xbd,0xdf,0x33,0xbd,0xc9,0x2d,0xbd,0xc8,0xfa,0xbd,0xc9,0x42,0x96,0x86,0x9b,0x87,0x26,0x1f,0x9d,0xa4,0x1,0x99,0x20,0x88,0x43,0x4f,0x4e,0x56,0x4f,0x59,0x20,0x44,0x45,0x53,0x54,0x52,0x4f,0x59,0x45,0x44,0x0,0xcc,0x0,0x80,0xbd,0xce,0xcc,0x20,0x11,0x96,0x19,0x81,0x3,0x24,0xb,0xa,0x55,0x26,0x7,0x86,0xf,0x97,0x55,0x9d,0xb0,0x5,0xbd,0xdf,0x96,0xce,0x33,0x40,0xa6,0xc4,0x84,0x50,0x81,0x50,0x26,0xa,0x34,0x40,0xbd,0xde,0xce,0xbd,0xdd,0xbf,0x35,0x40,0x33,0xc8,0x10,0xa6,0xc4,0x2a,0xe9,0x96,0x20,0x26,0x12,0x96,0x18,0x27,0x5,0xa,0x18,0xbd,0xc6,0xfd,0x96,0x1d,0x27,0x5,0xa,0x1d,0xbd,0xc6,0xcc,0xbd,0xc7,0x2f,0x96,0x30,0x84,0x1,0x4c,0x97,0x25,0xc6,0x14,0x96,0x24,0x10,0x26,0xc,0x57,0x5a,0x26,0x4,0x9d,0xb6,0xc6,0x3c,0x96,0x17,0x26,0xef,0x7e,0xc9,0x71,0xf,0x30,0x8c,0x3,0x30,0xd6,0x30,0x8e,0xd3,0xf1,0xc4,0x1,0xa6,0x85,0x5f,0xdd,0x2c,0xc3,0x14,0xc0,0xdd,0x2e,0x39,0xce,0x33,0xb0,0xa6,0xc4,0x2b,0x9,0x85,0x40,0x27,0x5,0x33,0xc8,0x10,0x20,0xf3,0x39,0xce,0x33,0x40,0xa6,0xc4,0x2b,0xf8,0x84,0x70,0x81,0x70,0x26,0x34,0x30,0xc8,0x10,0xa6,0xc4,0x84,0xf3,0x34,0x2,0xa6,0xc4,0x48,0x84,0x8,0xaa,0xe0,0xa7,0xc4,0xa6,0x84,0x2b,0x1e,0x84,0x70,0x81,0x70,0x26,0x13,0x8d,0x1d,0x24,0xf,0xa6,0x41,0x81,0x8,0x24,0x9,0x48,0x10,0x8e,0xcb,0x97,0xe6,0x1,0xad,0xb6,0x30,0x88,0x10,0x20,0xde,0x33,0xc8,0x10,0x9d,0xb6,0x20,0xbb,0xa6,0xc,0xa0,0x4c,0x2a,0x1,0x40,0xa0,0x45,0x25,0x4,0xa0,0x5,0x22,0x18,0x4f,0xe6,0x46,0xeb,0x6,0x89,0x0,0x34,0x6,0xec,0xd,0xa3,0x4d,0x2a,0x2,0x9d,0xad,0xa3,0xe1,0x22,0x3,0x1a,0x1,0x39,0x1c,0xfe,0x39,0xcc,0x16,0xcc,0x59,0xcc,0x90,0xcc,0x78,0xcc,0x6a,0xcc,0x98,0xcc,0xaa,0xcc,0xcd,0x0,0x0,0x0,0x0,0x2,0x5,0x10,0x10,0x0,0x0,0x0,0x0,0x1,0x2,0x3,0x3,0xa6,0x84,0x84,0xdc,0xa7,0x84,0x86,0x5,0xa7,0x2,0x86,0xd,0xa7,0x3,0x86,0x6,0xa7,0xf,0xa6,0x1,0x81,0x3,0x26,0x8,0xa,0x86,0x86,0x2,0x97,0x1d,0x20,0x21,0x81,0x7,0x26,0x1d,0xc6,0x10,0xa6,0xb,0x10,0x8e,0x33,0x40,0x3d,0x31,0xab,0xc6,0x10,0x86,0x60,0xa0,0x2c,0x24,0x2,0x40,0x50,0xe7,0x27,0x8b,0x14,0xa7,0x2f,0x6f,0x2b,0x7e,0xc8,0xb2,0x10,0x8e,0xcb,0xa7,0xa6,0x1,0xa6,0xa6,0x10,0x26,0xfa,0x8b,0x39,0xcc,0x8,0x10,0xa7,0x2,0xe7,0xf,0xa6,0x84,0x84,0xdf,0xa7,0x84,0x39,0xc1,0x3,0x27,0x26,0xc1,0x1,0x27,0x21,0xc1,0x2,0x27,0xe6,0xc1,0x5,0x26,0x2,0x8d,0x8f,0x96,0x16,0x26,0x13,0xce,0x33,0x40,0x96,0x30,0x84,0x1,0x8b,0x5,0x97,0x16,0xb6,0x33,0x40,0x84,0xcf,0xb7,0x33,0x40,0x39,0xa6,0x3,0x81,0xa,0x26,0x12,0x96,0x19,0x81,0x6,0x24,0xc,0xa6,0xb,0x26,0x8,0xbd,0xce,0xc0,0x6c,0x3,0xbd,0xcd,0xf1,0x39,0xc1,0x3,0x27,0xfb,0xc1,0x1,0x27,0xf7,0xbd,0xcb,0xb7,0xbd,0xcb,0xfb,0x7e,0xd1,0x81,0xc1,0x4,0x27,0x5b,0xc1,0x6,0x27,0x67,0xc1,0x7,0x27,0x2e,0x20,0x22,0xc1,0x7,0x27,0xdc,0xc1,0x3,0x27,0xd8,0xc1,0x6,0x27,0x64,0x1e,0x13,0x6f,0x41,0xbd,0xcb,0xb7,0x1e,0x13,0x7e,0xcb,0xb7,0xc1,0x6,0x27,0x34,0xc1,0x7,0x27,0x30,0x60,0x28,0x1e,0x13,0xbd,0xcb,0xfb,0xbd,0xcb,0xb7,0x1e,0x13,0xbd,0xcb,0xfb,0x7e,0xcb,0xb7,0xc1,0x2,0x27,0x1a,0xc1,0x4,0x27,0x8,0xc1,0x7,0x27,0x4,0xc1,0x6,0x26,0xe0,0xa6,0xc4,0x85,0x8,0x26,0x4,0x60,0x47,0x60,0x48,0x8a,0x4,0xa7,0xc4,0x39,0x8d,0xef,0x20,0xc,0xc1,0x1,0x27,0xf7,0xc1,0x7,0x27,0xf3,0xc1,0x5,0x27,0xc1,0xa6,0x84,0x85,0x8,0x26,0x4,0x60,0x8,0x60,0x7,0x8a,0x4,0xa7,0x84,0x39,0x6d,0x4b,0x26,0x20,0x1e,0x13,0xbd,0xd3,0x1,0x1e,0x13,0xa7,0x4b,0xbd,0xd3,0x1,0xa7,0xb,0xcc,0x7,0x9,0xed,0x1,0x86,0x78,0xa7,0xf,0x6f,0x7,0x86,0xf0,0xa7,0x8,0x9d,0xb0,0x3,0x39,0x96,0x83,0x4c,0x81,0x28,0x24,0x9,0x97,0x83,0x96,0x84,0x8b,0x1,0x19,0x97,0x84,0x13,0xbd,0xce,0x1a,0x9d,0xa4,0x1,0x14,0x1a,0x84,0x4d,0x49,0x53,0x53,0x49,0x4f,0x4e,0x20,0x8c,0x0,0x96,0x84,0xf,0x4a,0xbd,0xc7,0x13,0x9d,0xa4,0x84,0x20,0x43,0x4f,0x4d,0x50,0x4c,0x45,0x54,0x45,0x44,0x1,0x50,0x22,0x8c,0x20,0x30,0x30,0x20,0x88,0x42,0x4f,0x4e,0x55,0x53,0x20,0x50,0x4f,0x49,0x4e,0x54,0x53,0x0,0xbd,0xda,0x18,0xce,0x33,0x40,0x8e,0xd9,0xbd,0x9d,0xaa,0xdc,0x29,0x83,0x0,0x48,0xed,0x4d,0xc6,0x44,0xe7,0x4c,0xf,0x4d,0x96,0x87,0x34,0x2,0x8d,0x5a,0xce,0x33,0x40,0xec,0x4d,0xc3,0x0,0x14,0xed,0x4d,0xbd,0xdd,0xbf,0xbd,0xcd,0xf1,0x86,0x1e,0xbd,0xc8,0xcc,0x6a,0xe4,0x26,0xe5,0x96,0x8c,0x27,0x32,0x9d,0xa4,0x1,0x78,0x4,0x84,0x50,0x4c,0x55,0x53,0x20,0x4f,0x4e,0x45,0x20,0x54,0x49,0x4d,0x45,0x20,0x44,0x49,0x46,0x46,0x43,0x55,0x4c,0x49,0x54,0x59,0x20,0x42,0x4f,0x4e,0x55,0x53,0x0,0x86,0x28,0xbd,0xc8,0xcc,0x8d,0x11,0x8d,0x2d,0xa,0x8c,0x26,0xf8,0x86,0xb4,0xbd,0xc8,0xcc,0xbd,0xdd,0xb,0x7e,0xd8,0xc5,0x9d,0xa4,0x1,0x50,0x1e,0x8c,0x0,0x96,0x4d,0x8b,0x5,0x19,0x97,0x4d,0xf,0x4a,0xbd,0xc7,0x13,0x86,0x50,0xbd,0xc6,0x92,0xbd,0xc6,0xfd,0x7e,0xc6,0xcc,0x1a,0x50,0x86,0xff,0x1f,0x8b,0x8d,0x1b,0x1f,0x89,0xc4,0xf8,0xca,0x2,0xd7,0x20,0x8d,0x11,0xc6,0x2,0xd7,0x20,0xd7,0xde,0x4a,0x81,0x20,0x24,0xe9,0x4f,0x1f,0x8b,0x1c,0xef,0x39,0xc6,0x64,0x5a,0x26,0xfd,0x39,0x34,0x40,0xbd,0xca,0xfd,0xce,0x2,0x0,0x8e,0xa,0x60,0x4f,0x5f,0xed,0xc1,0x30,0x1f,0x26,0xfa,0xbd,0xdc,0xf3,0x8e,0x1,0xa0,0xed,0xc1,0x30,0x1f,0x26,0xfa,0x9d,0xa4,0x1,0xb9,0x2b,0x8b,0x46,0x3d,0x0,0xc,0x1e,0xbd,0xc7,0x2f,0x96,0x20,0x26,0x60,0xbd,0xdf,0x6,0x9d,0xa4,0x1,0xa8,0x4,0x83,0x4f,0x4e,0x45,0x1,0xb0,0x10,0x30,0x1,0xb9,0x0,0x53,0x3d,0x1,0xb9,0xe,0x43,0x3d,0x1,0xb9,0x1c,0x52,0x3d,0x0,0xbd,0xc6,0xfd,0xbd,0xc6,0xcc,0x96,0x10,0x27,0x39,0x9d,0xa4,0x1,0xa8,0x72,0x54,0x57,0x4f,0x1,0xb9,0x58,0x53,0x3d,0x1,0xb9,0x66,0x43,0x3d,0x1,0xb9,0x74,0x52,0x3d,0x1,0xb0,0x7c,0x30,0x0,0x96,0x15,0x34,0x2,0x88,0x1,0x97,0x15,0xbd,0xda,0x21,0xbd,0xc6,0xfd,0xbd,0xc6,0xcc,0xbd,0xda,0x21,0x35,0x2,0x97,0x15,0x20,0x3,0xbd,0xdd,0x17,0xbd,0xde,0xbc,0xbd,0xcb,0x0,0xbd,0xde,0xbc,0xbd,0xca,0xfd,0xf,0x18,0xf,0x1d,0x35,0xc0,0xdc,0x19,0xc3,0x6,0x80,0xdd,0x19,0x86,0x2,0x97,0x1e,0x39,0xd,0x30,0x26,0xc,0x34,0x6,0xdc,0x19,0xa3,0xe1,0x24,0x2,0x4f,0x5f,0xdd,0x19,0x39,0x34,0x4,0xc6,0x29,0xd7,0x38,0xe6,0x41,0xc1,0x0,0x27,0xe,0xd6,0x83,0xc1,0x8,0x25,0x2,0xc6,0x8,0x58,0x58,0xcb,0x11,0xd7,0x38,0x8d,0x9,0x35,0x2,0x33,0x41,0x8d,0x3,0x33,0x5f,0x39,0x1f,0x89,0xea,0x47,0x27,0x1e,0x48,0x48,0x26,0x7,0x86,0x1,0x6d,0x47,0x2b,0x1,0x40,0xab,0x47,0x1f,0x89,0x2a,0x1,0x50,0xd1,0x38,0x23,0x2,0xd6,0x38,0x4d,0x2a,0x1,0x50,0xe7,0x47,0x39,0x33,0x41,0x8d,0x8,0x34,0x2,0x33,0x5f,0x8d,0x2,0x35,0x84,0x4f,0xe6,0x47,0x27,0x4,0x5d,0x2a,0x1,0x50,0xc4,0x78,0x54,0x54,0x8e,0xcf,0x5d,0x3a,0xe6,0x49,0x4f,0xe3,0x84,0xe7,0x49,0x6d,0x47,0x2a,0x1,0x40,0x39,0x8d,0xd4,0xab,0x4c,0xa7,0x4c,0x1d,0xe3,0x4d,0xed,0x4d,0x39,0x0,0x0,0x0,0x80,0x1,0x0,0x2,0x0,0x3,0x0,0x4,0x0,0x6,0x0,0x8,0x0,0xa,0x0,0xa,0x0,0xa,0x0,0xa,0x0,0xf,0x2b,0x96,0x16,0x10,0x26,0x0,0x8e,0x96,0x20,0x27,0x30,0x6a,0x4f,0x2a,0x28,0x9d,0xb3,0x84,0x1f,0x8b,0xa,0xa7,0x4f,0x9d,0xb3,0x84,0x3,0x27,0xfa,0x80,0x2,0x97,0x50,0xdc,0x8a,0xc3,0x0,0x23,0x10,0xa3,0x4d,0xc6,0xff,0x25,0x1,0x50,0x9d,0xb3,0x84,0xab,0x26,0x1,0x5f,0xd7,0x51,0xdc,0x50,0x20,0x3,0xbd,0xd0,0x62,0xd7,0x4f,0xbd,0xce,0xdd,0xbd,0xcf,0x27,0xab,0x4c,0x81,0x16,0x25,0xa,0x81,0xb1,0x24,0x6,0xa7,0x4c,0x97,0x28,0x20,0x6,0x6f,0x47,0x6f,0x49,0x6f,0x4f,0x1d,0xe3,0x4d,0x10,0x83,0x0,0x80,0x25,0x14,0x10,0x83,0x8,0x0,0x24,0xe,0x34,0x6,0xa3,0x4d,0xd7,0x2b,0x35,0x6,0xed,0x4d,0xdd,0x29,0x20,0x6,0x60,0x48,0xf,0x2b,0x6f,0x4f,0xd6,0x4f,0x27,0x5,0xdc,0x1b,0xbd,0xce,0xcc,0x86,0x1,0xd6,0x4f,0x2b,0x4,0x27,0x4,0x86,0x0,0xa7,0x43,0x39,0xa,0x16,0x96,0x16,0x27,0x12,0x81,0x3,0x26,0xf5,0xe6,0xc4,0xc4,0xef,0xe7,0xc4,0x9e,0x19,0x26,0xeb,0x9d,0xb0,0x2,0x39,0xbd,0xc7,0x7e,0x96,0x20,0x10,0x26,0x7,0x1a,0x96,0x88,0x26,0x2,0xf,0x80,0x96,0x86,0x26,0x3,0xbd,0xdd,0xb,0xd,0x80,0x26,0x22,0x9d,0xa4,0x1,0x50,0x2e,0x88,0x47,0x41,0x4d,0x45,0x20,0x4f,0x56,0x45,0x52,0x0,0x96,0x10,0x27,0x3,0xbd,0xdd,0x75,0x9d,0xb0,0x1,0xbd,0xd5,0xa0,0x86,0xc8,0xbd,0xc8,0xcc,0x7e,0xd8,0x7e,0x96,0x85,0x81,0x2,0x26,0x29,0x86,0xe7,0x8d,0x8,0x34,0x4,0x86,0x9f,0x8d,0x2,0x35,0x82,0x5f,0xb7,0xff,0x2,0xb6,0xff,0x0,0x84,0x8,0x26,0x11,0xb6,0xff,0x2,0x8a,0xd7,0xb7,0xff,0x2,0x5a,0xb6,0xff,0x0,0x84,0x8,0x27,0x1,0x50,0x39,0x34,0x20,0xb6,0xff,0x23,0xf6,0xff,0x20,0x1f,0x2,0x84,0xf7,0xb7,0xff,0x23,0xf6,0xff,0x1,0xca,0x8,0xf7,0xff,0x1,0xf6,0xff,0x3,0xc4,0xf7,0x34,0x4,0xd6,0x85,0x58,0x58,0x58,0xea,0xe0,0xf7,0xff,0x3,0x8d,0x22,0x34,0x4,0xb6,0xff,0x1,0x84,0xf7,0xb7,0xff,0x1,0x8d,0x16,0x34,0x4,0xf6,0xff,0x3,0xc4,0xf7,0xf7,0xff,0x3,0x1f,0x20,0xf7,0xff,0x20,0xb7,0xff,0x23,0x35,0x4,0x35,0xa2,0xc6,0xff,0x86,0x12,0xb7,0xff,0x20,0x7d,0xff,0x0,0x2a,0xd,0x86,0xea,0xb7,0xff,0x20,0xc6,0x1,0x7d,0xff,0x0,0x2b,0x1,0x5f,0x39,0x96,0x16,0x26,0xfb,0xa6,0x4f,0x27,0x4,0x6a,0x4f,0x26,0xf3,0xec,0x4d,0x93,0x29,0xdd,0x26,0x24,0x2,0x9d,0xad,0x10,0x83,0x0,0x3e,0x24,0x4c,0x9d,0xb3,0x84,0x14,0x26,0x35,0x1e,0x13,0xbd,0xcb,0x14,0x1e,0x13,0x2b,0x2c,0x1f,0x32,0x1f,0x13,0x8e,0xd1,0x60,0x9d,0xaa,0x1f,0x31,0x1f,0x23,0xa6,0x4c,0xa7,0xc,0xcc,0x28,0x5,0xd,0x26,0x2b,0x2,0x40,0x50,0xa7,0x8,0x1d,0xe3,0x4d,0xed,0xd,0x9d,0xb3,0x84,0x1f,0x80,0x10,0xa7,0x7,0x9d,0xb0,0x4,0x86,0xf,0xbd,0xd5,0x1b,0x34,0x2,0x9d,0xb3,0x84,0x7,0x8b,0x14,0xa0,0xe0,0xa7,0x4f,0x39,0x70,0x2,0x1,0xf,0x1,0x2,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x96,0x16,0x27,0x2,0x32,0x62,0x39,0x96,0x16,0x27,0xfb,0x81,0x6,0x24,0xf7,0x32,0x62,0x6f,0xc4,0x39,0x8d,0xf1,0xbd,0xcf,0x51,0x10,0x83,0x8,0x0,0x24,0xf2,0x10,0x83,0x0,0x80,0x25,0xec,0xa6,0x4c,0x81,0xb6,0x24,0xe6,0xbd,0xd2,0xca,0x10,0x83,0x0,0x42,0x24,0xdd,0x39,0xbd,0xd1,0x77,0x96,0x28,0xa7,0x4c,0xdc,0x29,0xed,0x4d,0xcc,0x0,0x20,0xbd,0xce,0xcc,0x9d,0xb0,0x6,0x6a,0x4f,0x10,0x27,0xff,0xc2,0x86,0xf,0xe6,0x4f,0xc4,0x1,0x27,0x2,0x86,0x2,0xa7,0x43,0x39,0xa6,0xc4,0x84,0xef,0xa7,0xc4,0x8d,0xa3,0xd6,0x4f,0x27,0x2b,0xa6,0xc4,0x8a,0x10,0xa7,0xc4,0x96,0x28,0xa7,0x4c,0xcc,0x3,0x6,0xd,0x4f,0x2b,0x3,0xcc,0x0,0xf8,0x34,0x2,0x1d,0xd3,0x29,0xed,0x4d,0xa6,0x4f,0x4c,0x81,0x3,0x25,0x1,0x4f,0xa7,0x4f,0x8b,0x4,0xab,0xe0,0xa7,0x43,0x39,0x96,0x16,0x26,0x19,0x6a,0x4f,0x26,0x6,0x60,0x47,0x86,0x28,0xa7,0x4f,0xbd,0xcf,0x51,0x10,0x83,0x8,0x46,0x24,0x7,0xdd,0x8a,0xa6,0x4c,0x97,0x89,0x39,0x8e,0x0,0x83,0xbd,0xdd,0x92,0xa,0x86,0x7e,0xd1,0x81,0xbd,0xd1,0x70,0xa6,0x4b,0x27,0x20,0x6a,0x4b,0xbd,0xcf,0x51,0xa6,0x4c,0x81,0xc8,0x10,0x24,0xff,0x40,0xec,0x4d,0x10,0x83,0x0,0x80,0x25,0x6,0x10,0x83,0x8,0x0,0x25,0x2,0x60,0x48,0x39,0x20,0xe,0xdc,0x8a,0xa3,0x4d,0x24,0x2,0x9d,0xad,0x10,0x83,0x1,0xf4,0x25,0xf,0x86,0x40,0xa7,0x4b,0x9d,0xb3,0xc6,0x18,0x48,0x24,0x1,0x50,0xe7,0x47,0x39,0xa6,0x47,0x40,0xab,0x47,0xa7,0x47,0x20,0xbc,0xdc,0x8a,0xc3,0x0,0x23,0xbd,0xd2,0xcc,0x10,0x83,0x0,0x78,0x25,0x3,0xbd,0xd0,0xf7,0xbd,0xd1,0x70,0x60,0x7,0x6f,0x4b,0x8d,0x36,0x10,0x83,0x0,0x50,0x24,0x6,0x9e,0x29,0x96,0x28,0x20,0x4,0x9e,0x8a,0x96,0x89,0xc6,0x1,0xac,0x4d,0x24,0x1,0x50,0xd7,0x26,0xc6,0x1,0xa1,0x4c,0x24,0x1,0x50,0x1f,0x98,0xd6,0x83,0x34,0x4,0xc6,0x2,0xd7,0x83,0xd6,0x26,0xbd,0xce,0xdd,0x35,0x4,0xd7,0x83,0x7e,0xcf,0x51,0xdc,0x29,0xa3,0x4d,0x24,0x2,0x9d,0xad,0x39,0xbd,0xd1,0x77,0xa6,0x43,0x81,0x12,0x24,0x1e,0x6a,0x4f,0x2b,0x8,0xa6,0x4f,0x44,0x8b,0xd,0xa7,0x43,0x39,0x8e,0xcb,0xaf,0xa6,0x41,0xa6,0x86,0x27,0xd,0x8b,0x11,0xa7,0x43,0x86,0xf,0xa7,0x4f,0x39,0x6a,0x4f,0x26,0xfb,0x7e,0xd1,0x81,0x6f,0xe2,0xcc,0x33,0x40,0x34,0x40,0x10,0xa3,0xe1,0x27,0xa,0x6c,0xe4,0x12,0x12,0x12,0xc3,0x0,0x10,0x20,0xef,0x35,0x82,0xbd,0xd1,0x70,0x6f,0x7,0xbd,0xcf,0x51,0x6d,0x4b,0x27,0x12,0x10,0x83,0x0,0xe4,0x25,0x8,0xa6,0x4f,0x27,0x8,0x6a,0x4f,0x26,0x19,0x86,0x18,0xa7,0x47,0xa6,0x4c,0x81,0xc8,0x25,0xf,0xa,0x88,0xa,0x86,0x86,0x2,0x97,0x1d,0x6f,0xc4,0x8d,0x1e,0x6f,0x84,0x39,0x8d,0x19,0xec,0x4d,0xc3,0x0,0x6,0xed,0xd,0xa6,0x4c,0xa7,0xc,0xa6,0x84,0x84,0x40,0x26,0x7,0xcc,0x7,0x6,0xa7,0x42,0xe7,0x41,0x39,0xa6,0x4b,0xc6,0x10,0x3d,0x8e,0x33,0x40,0x30,0x8b,0x39,0x96,0x25,0x27,0x1e,0x8e,0xd3,0xf0,0xa6,0x86,0x8e,0xff,0xc6,0xe7,0x88,0x18,0x44,0xc6,0x7,0x44,0x24,0x6,0x30,0x1,0xa7,0x80,0x20,0x2,0xa7,0x81,0x5a,0x26,0xf2,0xf,0x25,0x96,0x17,0x27,0x2,0xa,0x17,0xb6,0xff,0x2,0xc6,0xfe,0xf7,0xff,0x2,0xf6,0xff,0x0,0x53,0xc4,0x40,0xd7,0x23,0xc6,0xfb,0xf7,0xff,0x2,0xf6,0xff,0x0,0x53,0xc4,0x40,0xd7,0x24,0xd6,0x85,0x8e,0xd3,0xeb,0x58,0x3a,0xe6,0x80,0xf7,0xff,0x2,0xf6,0xff,0x0,0x53,0xe4,0x84,0xb7,0xff,0x2,0x96,0x3f,0x27,0x7,0x5d,0x26,0x9,0xa,0x3f,0x20,0x9,0x5d,0x27,0x6,0xd7,0x40,0x86,0x2,0x97,0x3f,0x9e,0x21,0x27,0x4,0x30,0x1f,0x9f,0x21,0x9d,0xb3,0x3b,0xff,0x1,0xff,0x2,0x7f,0x8,0x2,0x1a,0x35,0x20,0xa6,0xa0,0x34,0x20,0x34,0x2,0xc6,0x8,0x3d,0x10,0x8e,0xd4,0xa1,0x31,0xab,0x8e,0x0,0x9a,0xc6,0x8,0xa6,0xa0,0xa7,0x80,0x5a,0x26,0xf9,0xcc,0x7e,0x4b,0xb7,0xff,0x2,0xa6,0xe0,0x27,0x1,0x5f,0xd7,0x38,0x34,0x1,0x1a,0x50,0x86,0xfa,0xb7,0xff,0x20,0x96,0x9a,0x97,0xa2,0x96,0x9b,0x97,0xa3,0x6c,0xa4,0xe6,0xa4,0x9e,0x9f,0x96,0xa2,0xf6,0xff,0x20,0xc8,0x80,0xf7,0xff,0x20,0x30,0x1f,0x27,0x16,0x4a,0x26,0xf9,0xf6,0xff,0x20,0xc8,0x80,0xf7,0xff,0x20,0x96,0xa3,0x30,0x1f,0x27,0x5,0x4a,0x26,0xf9,0x20,0xdc,0xb6,0xff,0x20,0x2b,0x2,0x88,0x80,0x8b,0x0,0x8a,0x2,0xb7,0xff,0x20,0x96,0xa2,0x9b,0x9c,0x97,0xa2,0xb6,0xff,0x0,0x43,0x94,0x38,0x26,0x14,0x96,0xa3,0x9b,0x9d,0x97,0xa3,0x91,0x9e,0x26,0xb4,0x96,0xa1,0x27,0x6,0x9b,0x9a,0x97,0x9a,0x26,0x9e,0x86,0x2,0xb7,0xff,0x20,0xb6,0xd4,0xe1,0xf6,0xd5,0x2a,0x1f,0x1,0xec,0x84,0x9d,0xad,0x10,0x83,0x96,0xf,0x26,0xc0,0x35,0x81,0x32,0x1,0xfd,0x8,0x81,0x2,0x80,0xfe,0x2d,0x81,0x0,0xfc,0x1,0x1,0x80,0xfd,0xff,0x1,0x0,0x18,0x41,0x4,0x80,0x0,0xc0,0x1,0x0,0x18,0x41,0x2,0x80,0x0,0x19,0x1,0x0,0xc,0x25,0x1,0x80,0x0,0xc0,0x1,0x0,0x6,0x25,0x2,0x80,0x0,0xc0,0x1,0x80,0x6,0x25,0x1,0x0,0x0,0x28,0x81,0x0,0xfc,0x1,0x2,0x0,0x0,0xc8,0x96,0x16,0x26,0x34,0xa,0x4d,0x26,0x30,0xc,0x4d,0xbd,0xcb,0x14,0x2b,0x29,0x9d,0xb3,0x44,0x44,0x84,0x7,0x8e,0xd5,0x22,0xe6,0x86,0xd1,0x83,0x23,0x3,0x5a,0x26,0xf9,0x58,0x8e,0xd5,0x2b,0xad,0x95,0x86,0xf,0x8d,0xe,0x48,0x34,0x2,0x9d,0xb3,0x84,0xf,0x8b,0x2d,0xa0,0xe0,0x97,0x4d,0x39,0x91,0x83,0x25,0x2,0x96,0x83,0x39,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x2,0x83,0xd5,0x31,0xd5,0x92,0xd5,0x99,0x8e,0xd9,0xcd,0x9d,0xaa,0x9d,0xb3,0x94,0x83,0x84,0x7,0xa7,0x44,0x9d,0xb3,0x84,0x1,0xc6,0xc4,0x3d,0xe7,0x4c,0x86,0x10,0x5d,0x2a,0x1,0x40,0xa7,0x47,0xc6,0xf8,0x9d,0xb3,0x84,0x54,0x26,0x2,0xc6,0x18,0xe7,0x48,0x9d,0xb3,0x84,0x3f,0x1f,0x89,0x4f,0xc3,0x1,0x90,0x6d,0x48,0x2b,0x2,0x9d,0xad,0xd3,0x8a,0xc3,0x0,0x30,0xed,0x4d,0x10,0x83,0x0,0x80,0x25,0xf,0x10,0x83,0x8,0x0,0x24,0x9,0x9d,0xb3,0x84,0x1f,0x8b,0x48,0xa7,0x4b,0x39,0xa6,0x48,0x80,0x8,0x40,0x8b,0x8,0xa7,0x48,0x20,0xc9,0x8e,0xd9,0xdd,0x9d,0xaa,0x20,0xa5,0x8e,0xd9,0xed,0x9d,0xaa,0x20,0x9e,0xdc,0x81,0x27,0x1f,0x8e,0x35,0x1,0xf,0x27,0x86,0x19,0x97,0x26,0x96,0x27,0x8b,0x1,0x19,0x97,0x27,0xec,0x84,0x27,0x29,0x10,0x93,0x81,0x25,0x24,0x30,0x2,0xa,0x26,0x26,0xea,0x9d,0xa4,0x1,0x64,0x14,0x8c,0x59,0x4f,0x55,0x52,0x20,0x4e,0x4f,0x54,0x20,0x49,0x4e,0x20,0x54,0x48,0x45,0x20,0x54,0x4f,0x50,0x20,0x32,0x35,0x0,0x39,0xec,0x84,0x27,0x10,0x10,0x8e,0x35,0x2f,0xa,0x26,0x27,0x8,0xec,0xa4,0xed,0x22,0x31,0x3e,0x20,0xf4,0xdc,0x81,0xed,0x84,0x9d,0xa4,0x1,0x64,0xe,0x8c,0x59,0x4f,0x55,0x52,0x20,0x52,0x41,0x4e,0x4b,0x49,0x4e,0x47,0x20,0x49,0x53,0x20,0x4e,0x55,0x4d,0x42,0x45,0x52,0x20,0x0,0x96,0x27,0xf,0x4a,0x7e,0xc7,0x13,0x43,0x53,0xc3,0x0,0x1,0x39,0xf8,0x0,0x55,0xaa,0xff,0x0,0x0,0x0,0xff,0xe8,0xaa,0x55,0xff,0xaa,0x0,0x0,0x0,0x0,0xc5,0xd5,0xc6,0xe,0xd9,0x83,0xd6,0x1e,0xd3,0xf3,0xc8,0x71,0xc8,0xa1,0x0,0x1a,0x50,0x10,0xce,0x1,0x4e,0x8e,0xd6,0x24,0x86,0xfd,0xb7,0xff,0x2,0xb6,0xff,0x0,0x84,0x40,0x26,0x2,0x30,0x9,0xa6,0x80,0x97,0x54,0x9f,0x52,0x86,0xb,0x97,0x38,0x8e,0x35,0x33,0xce,0xc2,0xe5,0xec,0xc1,0xed,0x81,0xec,0xc1,0xed,0x81,0xdd,0x26,0x48,0x3d,0xd7,0x3a,0x34,0x10,0x69,0xc4,0xa6,0xc0,0xa7,0x80,0x5a,0x26,0xf7,0x35,0x10,0x34,0x40,0x86,0x3,0x97,0x3b,0x96,0x26,0x48,0x97,0x39,0xd6,0x27,0x1f,0x12,0xd7,0x9a,0xd6,0x3a,0x34,0x2,0x4f,0x33,0x8b,0x5f,0x96,0x39,0x84,0x1,0x26,0x1,0x53,0x35,0x2,0x34,0x4,0xe6,0xa4,0xe7,0xc4,0x35,0x4,0x54,0x66,0xc4,0x56,0x66,0xc4,0x59,0x59,0x33,0xc6,0x31,0xa6,0xa,0x9a,0x26,0xe8,0x30,0x1,0xa,0x39,0x26,0xcb,0x40,0x31,0xa6,0x30,0x21,0xa,0x3b,0x26,0xbd,0x30,0xc6,0x30,0x1,0x35,0x40,0xa,0x38,0x26,0x92,0x8e,0xd6,0x36,0xce,0x0,0xa4,0x86,0x7e,0xa7,0xc0,0xec,0x81,0xed,0xc1,0xa6,0x84,0x26,0xf4,0x8e,0x35,0x1,0xc6,0x32,0x6f,0x80,0x5a,0x26,0xfb,0xf,0x10,0xcc,0x0,0x1,0xdd,0x13,0x5f,0xdd,0x11,0x8e,0xd3,0x72,0xbf,0x1,0xd,0x96,0x54,0xb7,0xff,0x22,0xf,0x2c,0xbd,0xdc,0xfa,0x8e,0xd7,0x19,0x9f,0x72,0x86,0x55,0x97,0x71,0x12,0x10,0xce,0x1,0x4e,0x96,0x54,0xc6,0xff,0x1e,0x9b,0x97,0x22,0x97,0xde,0x86,0x35,0x97,0x3,0x4a,0x97,0x1,0x97,0x21,0x86,0x3c,0x97,0x23,0x97,0xc0,0x97,0xc3,0x97,0xc5,0x1e,0x9b,0x86,0x1,0x97,0x25,0x1c,0xef,0xbd,0xca,0xfd,0x10,0xce,0x1,0x4e,0xbd,0xd9,0xfd,0xbd,0xda,0x1b,0xbd,0xdc,0xfa,0x9d,0xa4,0x1,0xa,0x1e,0x83,0x53,0x54,0x45,0x4c,0x4c,0x41,0x52,0x20,0x4c,0x49,0x46,0x45,0x20,0x4c,0x49,0x4e,0x45,0x1,0x28,0x28,0x87,0x50,0x52,0x4f,0x47,0x52,0x41,0x4d,0x4d,0x45,0x44,0x20,0x42,0x59,0x1,0x32,0x2c,0x53,0x54,0x45,0x56,0x45,0x20,0x42,0x4a,0x4f,0x52,0x4b,0x1,0x46,0x24,0x43,0x4f,0x50,0x59,0x52,0x49,0x47,0x48,0x54,0x20,0x31,0x39,0x38,0x33,0x1,0x50,0x22,0x42,0x59,0x20,0x53,0x52,0x42,0x20,0x53,0x4f,0x46,0x54,0x57,0x41,0x52,0x45,0x1,0x64,0x4,0x4c,0x49,0x43,0x45,0x4e,0x53,0x45,0x44,0x20,0x54,0x4f,0x20,0x54,0x41,0x4e,0x44,0x59,0x20,0x43,0x4f,0x52,0x50,0x4f,0x52,0x41,0x54,0x49,0x4f,0x4e,0x1,0x6e,0x1c,0x41,0x4c,0x4c,0x20,0x52,0x49,0x47,0x48,0x54,0x53,0x20,0x52,0x45,0x53,0x45,0x52,0x56,0x45,0x44,0x1,0x82,0x20,0x87,0x56,0x45,0x52,0x53,0x49,0x4f,0x4e,0x20,0x30,0x31,0x2e,0x30,0x30,0x2e,0x30,0x30,0x0,0xbd,0xdd,0x17,0xbd,0xda,0x18,0xf,0x20,0x96,0x13,0x97,0x85,0xf,0x40,0x9d,0xb0,0x0,0x8e,0x2,0x58,0x9f,0x21,0xd,0x40,0x26,0x1b,0x13,0xad,0x9f,0xa0,0x0,0x81,0xd,0x10,0x27,0x3,0x91,0x9e,0x21,0x26,0xed,0xcc,0xff,0x1e,0x97,0x20,0xd7,0x4e,0xf,0x50,0xf,0x51,0x8c,0xf,0x20,0x10,0xce,0x1,0x4e,0x96,0x10,0x97,0x15,0xcc,0x3,0x6,0x97,0x80,0xd7,0x88,0x4f,0x5f,0xdd,0x81,0xf,0x84,0xbd,0xdd,0xb,0xc6,0xd,0x8e,0x0,0x80,0xa6,0x80,0xa7,0xc,0x5a,0x26,0xf9,0xd6,0x11,0x58,0xd7,0x83,0x86,0x3,0x3d,0xd7,0x8c,0xd6,0x12,0x58,0xd7,0x90,0x86,0x3,0x3d,0xd7,0x99,0xdc,0x13,0xd7,0x92,0x97,0x85,0x96,0x20,0x27,0x7,0x86,0x2,0x97,0x83,0x7e,0xd8,0xc5,0x96,0x10,0x27,0x3,0xbd,0xda,0x21,0x10,0xce,0x1,0x4e,0x96,0x80,0xd6,0x10,0x27,0x2,0x9a,0x8d,0x4d,0x10,0x27,0xfe,0xb7,0x5d,0x27,0x31,0xd6,0x15,0xc8,0x1,0xd,0x8d,0x27,0x5,0xd7,0x15,0xbd,0xda,0x21,0xbd,0xd9,0xfd,0xbd,0xda,0x1b,0xbd,0xce,0x1a,0xbd,0xdd,0x75,0x9d,0xa4,0x1,0x64,0x2e,0x88,0x47,0x45,0x54,0x20,0x52,0x45,0x41,0x44,0x59,0x0,0xbd,0xda,0x18,0x86,0xc8,0xbd,0xc8,0xcc,0xa,0x80,0x10,0xce,0x1,0x4e,0xcc,0x0,0x0,0xdd,0x19,0xbd,0xce,0xc0,0x86,0x3,0x97,0x4d,0xce,0x33,0x40,0x8e,0xd9,0x8d,0x9d,0xaa,0xcc,0x0,0xa6,0xd3,0x8a,0x10,0x83,0x8,0x0,0x25,0x3,0xcc,0x7,0xec,0xed,0x4d,0xdd,0x29,0xa6,0x4c,0x97,0x28,0x33,0xc8,0x10,0x30,0x88,0x10,0x9d,0xaa,0x30,0x88,0x10,0x33,0xc8,0x10,0xc6,0x5,0xd7,0x38,0x9d,0xaa,0x33,0xc8,0x10,0xa,0x38,0x26,0xf7,0x30,0x88,0x10,0xcc,0x7,0x9c,0x10,0x93,0x8a,0x24,0x2,0xdd,0x8a,0x86,0x10,0x97,0x26,0x96,0x86,0x97,0x38,0x9d,0xaa,0x86,0x10,0xd6,0x38,0x3d,0xd3,0x8a,0xed,0x4d,0x0,0x26,0x96,0x26,0xa7,0x47,0x33,0xc8,0x10,0xa,0x38,0x26,0xe8,0x30,0x88,0x10,0xc6,0xe,0x6f,0xc4,0x33,0xc8,0x10,0x5a,0x26,0xf8,0x86,0xff,0xa7,0xc4,0xbd,0xd9,0xfd,0xbd,0xda,0x1b,0xbd,0xce,0x1a,0xf,0x2b,0xbd,0xc9,0x19,0xbd,0xc9,0x42,0xbd,0xda,0x18,0xbd,0xd9,0xfd,0xf,0x16,0xf,0x45,0xf,0x1d,0xf,0x40,0x86,0xf,0xbd,0xd5,0x1b,0x1f,0x89,0xcb,0x2,0x4f,0xdd,0x1b,0x86,0xf,0x97,0x55,0x86,0x2,0xb7,0xff,0x20,0x7e,0xc9,0x71,0xc6,0xf,0xa6,0x85,0xa7,0xc5,0x5a,0x2a,0xf9,0x39,0x73,0x0,0x0,0x0,0x1,0x4,0x3,0x0,0x0,0x1,0x1,0x0,0x60,0x0,0x80,0x19,0x40,0x9,0x2,0x4,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x80,0x0,0x0,0x1,0x1,0x3,0xff,0x2,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x71,0x3,0x3,0xa,0x1,0x5,0x5,0x0,0x10,0x0,0x0,0x0,0x60,0x0,0x10,0x14,0x72,0x4,0x4,0xc,0x1,0x4,0x3,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0xfe,0x0,0x72,0x5,0x6,0x10,0x1,0x4,0x3,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0xfe,0x0,0x72,0x6,0x7,0x11,0x1,0x3,0x4,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0xfe,0xf,0xce,0x1a,0x0,0x8e,0x2,0x0,0x20,0x6,0xce,0x2,0x0,0x8e,0x1a,0x0,0x10,0x8e,0xc,0x0,0xec,0x81,0xed,0xc1,0x31,0x3f,0x26,0xf8,0x39,0x86,0x1,0x8c,0x86,0x2,0x97,0x25,0x13,0x39,0xc6,0xd,0xd7,0x38,0x8e,0x0,0x80,0xa6,0x84,0xe6,0xd,0xa7,0xd,0xe7,0x80,0xa,0x38,0x26,0xf4,0x39,0xe6,0x80,0x34,0x4,0x3d,0x3a,0xa6,0x80,0x9d,0xa7,0x6a,0xe4,0x26,0xf8,0x35,0x84,0x9d,0xa4,0x1,0xa,0x30,0x83,0x4f,0x50,0x54,0x49,0x4f,0x4e,0x53,0x1,0x1e,0x8,0x87,0x4e,0x55,0x4d,0x42,0x45,0x52,0x20,0x4f,0x46,0x20,0x50,0x4c,0x41,0x59,0x45,0x52,0x53,0x1,0x1e,0x64,0x0,0x8e,0xdb,0x18,0x96,0x10,0x8d,0xc3,0x9d,0xa4,0x1,0x2d,0x8,0x50,0x4c,0x41,0x59,0x45,0x52,0x29,0x53,0x20,0x4f,0x4e,0x45,0x20,0x4f,0x50,0x54,0x49,0x4f,0x4e,0x53,0x20,0x41,0x52,0x45,0x1,0x3c,0x8,0x43,0x4f,0x4e,0x54,0x52,0x4f,0x4c,0x4c,0x45,0x52,0x1,0x3c,0x64,0x0,0x8e,0xdb,0x1f,0x96,0x13,0x8d,0x8e,0x9d,0xa4,0x1,0x46,0x8,0x44,0x49,0x46,0x46,0x49,0x43,0x55,0x4c,0x54,0x59,0x1,0x46,0x64,0x0,0x96,0x11,0x8e,0xdb,0x32,0xbd,0xda,0x35,0x96,0x10,0x27,0x51,0x9d,0xa4,0x1,0x5a,0x8,0x50,0x4c,0x41,0x59,0x45,0x52,0x29,0x53,0x20,0x54,0x57,0x4f,0x20,0x4f,0x50,0x54,0x49,0x4f,0x4e,0x53,0x20,0x41,0x52,0x45,0x1,0x69,0x8,0x43,0x4f,0x4e,0x54,0x52,0x4f,0x4c,0x4c,0x45,0x52,0x1,0x69,0x64,0x0,0x96,0x14,0x8e,0xdb,0x1f,0xbd,0xda,0x35,0x9d,0xa4,0x1,0x73,0x8,0x44,0x49,0x46,0x46,0x49,0x43,0x55,0x4c,0x54,0x59,0x1,0x73,0x64,0x0,0x96,0x12,0x8e,0xdb,0x32,0x7e,0xda,0x35,0x39,0x3,0x4f,0x4e,0x45,0x54,0x57,0x4f,0x6,0x52,0x49,0x47,0x48,0x54,0x20,0x4c,0x45,0x46,0x54,0x20,0x20,0x4b,0x45,0x59,0x20,0x20,0x20,0x6,0x45,0x41,0x53,0x59,0x20,0x20,0x4d,0x45,0x44,0x49,0x55,0x4d,0x48,0x41,0x52,0x44,0x20,0x20,0x34,0x10,0xbd,0xd9,0xfd,0xbd,0xda,0x1b,0xbd,0xdc,0xfa,0xbd,0xda,0x45,0x35,0x10,0x86,0xaa,0x97,0x1f,0xa7,0x84,0xbd,0xc5,0xdb,0xa6,0x84,0x34,0x2,0x9d,0xa4,0x1,0xb8,0x4,0x83,0x55,0x53,0x45,0x20,0x3c,0x42,0x52,0x45,0x41,0x4b,0x3e,0x20,0x54,0x4f,0x20,0x45,0x58,0x49,0x54,0x1,0xb0,0x4,0x45,0x4e,0x54,0x45,0x52,0x20,0x4e,0x55,0x4d,0x42,0x45,0x52,0x20,0x2d,0x0,0xbd,0xda,0x18,0xad,0x9f,0xa0,0x0,0x81,0x3,0x10,0x27,0xfb,0xac,0x80,0x31,0x25,0xf2,0xa1,0xe4,0x24,0xee,0x34,0x2,0x8b,0x31,0x9d,0xa7,0xbd,0xcd,0xf1,0x35,0x86,0x8e,0xdb,0xe7,0x8d,0x93,0x4d,0x27,0x28,0x4a,0x27,0xa,0x8e,0xdc,0x9c,0x8d,0x88,0x8e,0x0,0x11,0x20,0x9,0x8e,0xdc,0x62,0xbd,0xdb,0x45,0x8e,0x0,0x13,0x34,0x12,0x96,0x10,0x27,0x6,0x8e,0xdc,0xc1,0xbd,0xdb,0x45,0x35,0x14,0xe7,0x86,0x20,0x8,0x8e,0xdc,0x3d,0xbd,0xdb,0x45,0x97,0x10,0x20,0xc6,0x1,0x8c,0x8,0x31,0x20,0x2d,0x20,0x43,0x48,0x41,0x4e,0x47,0x45,0x20,0x4e,0x55,0x4d,0x42,0x45,0x52,0x20,0x4f,0x46,0x20,0x50,0x4c,0x41,0x59,0x45,0x52,0x53,0x1,0x96,0x8,0x32,0x20,0x2d,0x20,0x43,0x48,0x41,0x4e,0x47,0x45,0x20,0x43,0x4f,0x4e,0x54,0x52,0x4f,0x4c,0x4c,0x45,0x52,0x20,0x54,0x59,0x50,0x45,0x1,0xa0,0x8,0x33,0x20,0x2d,0x20,0x43,0x48,0x41,0x4e,0x47,0x45,0x20,0x44,0x49,0x46,0x46,0x49,0x43,0x55,0x4c,0x54,0x59,0x0,0x3,0x1,0x8c,0x8,0x31,0x20,0x2d,0x20,0x4f,0x4e,0x45,0x20,0x50,0x4c,0x41,0x59,0x45,0x52,0x1,0x96,0x8,0x32,0x20,0x2d,0x20,0x54,0x57,0x4f,0x20,0x50,0x4c,0x41,0x59,0x45,0x52,0x53,0x0,0x2,0x1,0x8c,0x8,0x31,0x20,0x2d,0x20,0x52,0x49,0x47,0x48,0x54,0x20,0x4a,0x4f,0x59,0x53,0x54,0x49,0x43,0x4b,0x1,0x96,0x8,0x32,0x20,0x2d,0x20,0x4c,0x45,0x46,0x54,0x20,0x4a,0x4f,0x59,0x53,0x54,0x49,0x43,0x4b,0x1,0xa0,0x8,0x33,0x20,0x2d,0x20,0x4b,0x45,0x59,0x42,0x4f,0x41,0x52,0x44,0x0,0x3,0x1,0x8c,0x8,0x31,0x20,0x2d,0x20,0x45,0x41,0x53,0x59,0x1,0x96,0x8,0x32,0x20,0x2d,0x20,0x4d,0x45,0x44,0x49,0x55,0x4d,0x1,0xa0,0x8,0x33,0x20,0x2d,0x20,0x48,0x41,0x52,0x44,0x0,0x3,0x1,0x8c,0x8,0x31,0x20,0x2d,0x20,0x43,0x48,0x41,0x4e,0x47,0x45,0x20,0x50,0x4c,0x41,0x59,0x45,0x52,0x20,0x4f,0x4e,0x45,0x1,0x96,0x8,0x32,0x20,0x2d,0x20,0x43,0x48,0x41,0x4e,0x47,0x45,0x20,0x50,0x4c,0x41,0x59,0x45,0x52,0x20,0x54,0x57,0x4f,0x0,0x2,0x9e,0x52,0xa6,0x7,0x1f,0x89,0x39,0xbd,0xca,0xfd,0x8d,0xf4,0x8e,0xc,0x0,0xde,0x2c,0xed,0xc1,0x30,0x1f,0x26,0xfa,0x39,0xf,0x87,0x96,0x88,0x97,0x86,0xcc,0x0,0x14,0xdd,0x8a,0x39,0x9d,0xa4,0x1,0xa8,0x8,0x87,0x55,0x53,0x45,0x20,0x0,0x96,0x13,0x80,0x2,0x26,0xe,0x9d,0xa4,0x53,0x50,0x41,0x43,0x45,0x20,0x42,0x41,0x52,0x0,0x20,0xe,0x9d,0xa4,0x46,0x49,0x52,0x45,0x20,0x42,0x55,0x54,0x54,0x4f,0x4e,0x0,0x9d,0xa4,0x20,0x54,0x4f,0x20,0x53,0x54,0x41,0x52,0x54,0x20,0x47,0x41,0x4d,0x45,0x1,0xb0,0x8,0x4f,0x52,0x20,0x3c,0x45,0x4e,0x54,0x45,0x52,0x3e,0x20,0x54,0x4f,0x20,0x43,0x48,0x41,0x4e,0x47,0x45,0x20,0x4f,0x50,0x54,0x49,0x4f,0x4e,0x53,0x0,0x39,0x9d,0xa4,0x1,0x46,0x30,0x88,0x50,0x4c,0x41,0x59,0x45,0x52,0x20,0x0,0x96,0x15,0x8b,0x31,0xe,0xa7,0xe6,0x43,0x8e,0xc5,0xab,0x3a,0x3a,0xae,0x84,0x6c,0x4,0x39,0x10,0x8e,0x0,0x31,0xc6,0x3,0xd4,0x30,0x31,0xa5,0x39,0xf,0x3b,0x34,0x2,0x9b,0x26,0xdb,0x27,0x8d,0xa,0x96,0x26,0x8d,0x6,0xd6,0x27,0x8d,0x2,0xab,0xe0,0x81,0xa6,0x24,0x6,0xc1,0x80,0x24,0x2,0xc,0x3b,0x39,0xbd,0xdd,0x89,0xa6,0x4c,0xa0,0x80,0x80,0x10,0x97,0x26,0xe6,0x80,0x50,0x86,0xff,0xe3,0x4d,0x93,0x29,0xc3,0x0,0x50,0x10,0x83,0x0,0xa0,0x24,0xe2,0xc0,0x10,0xd7,0x27,0xec,0x84,0x58,0x58,0x5a,0x8d,0xb9,0x96,0x3b,0x27,0xd3,0xbd,0xdd,0x95,0x6c,0xa0,0x34,0x20,0x34,0x10,0x10,0xae,0xa4,0xe6,0x43,0xd7,0x3a,0x81,0x4,0x10,0x27,0x0,0x62,0x96,0x26,0xc6,0x20,0x3d,0x10,0x83,0x18,0x0,0x25,0x3,0xc3,0xe0,0x0,0x9b,0x2c,0x1f,0x1,0xd6,0x27,0x57,0x57,0x30,0x85,0xd7,0x3b,0xe7,0x24,0x35,0x40,0xec,0xc1,0x97,0x39,0xed,0x22,0xaf,0xa4,0xbd,0xde,0xa2,0xec,0x22,0x48,0x31,0x25,0x34,0x56,0x96,0x3b,0x81,0x20,0x24,0x1a,0xd6,0x39,0x9c,0x2c,0x25,0xc,0x9c,0x2e,0x24,0x10,0xa6,0x84,0xa4,0xc4,0xaa,0x41,0xa7,0x84,0x30,0x88,0x20,0x33,0x42,0x5a,0x26,0xe8,0x35,0x56,0x33,0xc6,0x30,0x1,0xc,0x3b,0x5a,0x26,0xd3,0x35,0x10,0x10,0xaf,0x84,0xe,0xb6,0x96,0x26,0xc6,0x20,0x3d,0x9b,0x2c,0x1f,0x1,0xd6,0x27,0x54,0x54,0x3a,0x86,0x80,0xa7,0x24,0x35,0x40,0xec,0xc1,0x97,0x39,0xed,0x22,0xaf,0xa4,0x8d,0x21,0xec,0x22,0x48,0x31,0x25,0x34,0x16,0xd6,0x39,0xa6,0x84,0xa4,0xc0,0xaa,0xc0,0xa7,0x84,0x30,0x88,0x20,0x5a,0x26,0xf2,0x35,0x16,0x30,0x1,0x5a,0x26,0xe7,0x7e,0xde,0x5c,0x3d,0x96,0x3a,0x81,0x3,0x25,0x12,0x81,0xa,0x24,0x6,0x96,0x27,0x84,0x2,0x20,0x5,0x96,0x27,0x84,0x3,0x48,0x3d,0x33,0xcb,0x39,0xbd,0xdd,0x95,0x6f,0xa0,0x8e,0x32,0x0,0x96,0x30,0x27,0x3,0x8e,0x32,0xa0,0xaf,0xa4,0x39,0x96,0x20,0x26,0x33,0xa6,0xc4,0x84,0x3,0x27,0x2d,0xec,0x4d,0x58,0x49,0x58,0x49,0x58,0x49,0xe3,0x4d,0x97,0x26,0xa6,0x4c,0x80,0x10,0x81,0xa6,0x24,0x19,0xc6,0x15,0x3d,0xd6,0x26,0xc3,0xa7,0x19,0xbd,0xc8,0x54,0xa6,0xc4,0x84,0x3,0x10,0x8e,0xc8,0xd1,0xe4,0xa6,0xea,0x84,0xe7,0x84,0x39,0x9e,0x2c,0x30,0x89,0x14,0xc5,0x86,0xff,0x8d,0xd,0xc6,0x10,0xd7,0x38,0x4f,0x8d,0x6,0xa,0x38,0x26,0xf9,0x86,0xff,0xc6,0x3,0xea,0x84,0xe7,0x80,0xc6,0x14,0xa7,0x80,0x5a,0x26,0xfb,0x86,0xc0,0xaa,0x84,0xa7,0x84,0x30,0xb,0x39,0x96,0x20,0x26,0x2,0x8d,0xcd,0xbd,0xdd,0x95,0x1f,0x23,0xa6,0xc4,0x10,0x27,0xff,0x78,0x6a,0xc4,0x10,0xae,0x41,0x31,0x3b,0x10,0xaf,0x41,0x34,0x40,0xae,0xa4,0xa6,0x24,0x81,0x80,0x27,0x29,0xec,0x22,0x34,0x16,0xe6,0x24,0xc1,0x20,0x24,0x10,0x9c,0x2c,0x25,0x6,0x9c,0x2e,0x24,0x8,0x6f,0x84,0x30,0x88,0x20,0x4a,0x26,0xf0,0x35,0x16,0x30,0x1,0x6c,0x24,0x5a,0x26,0xdf,0x35,0x40,0x9d,0xb6,0x20,0xbd,0xec,0x22,0x34,0x16,0x6f,0x84,0x30,0x88,0x20,0x4a,0x26,0xf8,0x35,0x16,0x30,0x1,0x5a,0x26,0xef,0x20,0xe3,0x96,0x16,0x4a,0x81,0x3,0x25,0x58,0xcc,0x0,0xbc,0x93,0x29,0x10,0x83,0x0,0x80,0x25,0xb,0xcc,0x8,0x44,0x93,0x29,0x10,0x83,0x0,0x80,0x24,0x42,0x1f,0x98,0x54,0x54,0x9e,0x2c,0x3a,0x84,0x3,0x10,0x8e,0xc6,0x7d,0xe6,0xa6,0xd7,0x3a,0xbd,0xdd,0x95,0x6c,0xa0,0xee,0xa4,0xaf,0xc1,0xcc,0xa6,0x1,0xed,0xc1,0x86,0x80,0xa7,0xc0,0xef,0xa4,0x96,0x4c,0xbd,0xc8,0x4e,0x97,0x4c,0x94,0x3a,0x97,0x26,0xc6,0xa6,0x3,0x3a,0xa6,0x84,0x94,0x3a,0x9a,0x26,0xa7,0x84,0x30,0x88,0x20,0x5a,0x26,0xf2,0x39,0x0,0xbd,0xdd,0x17,0xbd,0xda,0x18,0xf,0x20,0x96,0x0 };

// Canyon Climber
uint8_t CARTRIDGE_3[0x4000] = {0x1a,0x50,0xce,0x4,0x0,0xcc,0xff,0xff,0x8e,0x18,0x0,0xed,0xc1,0x30,0x1f,0x26,0xfa,0xf,0x79,0xf,0x7a,0x86,0xfe,0xb7,0xff,0x2,0x86,0x6,0xf6,0xff,0x0,0xc4,0x40,0x27,0x2,0x86,0x4,0x97,0x7b,0x12,0x10,0xce,0x3,0xf0,0x8e,0x0,0x0,0xc6,0x70,0x6f,0x89,0x0,0x80,0x6f,0x80,0x5a,0x26,0xf7,0x86,0x34,0xb7,0xff,0x1,0xb7,0xff,0x21,0x4c,0xb7,0xff,0x3,0x86,0x3c,0xb7,0xff,0x23,0x86,0x55,0x97,0x71,0x8e,0xc0,0x27,0x9f,0x72,0x5a,0xd7,0x8e,0xf7,0xff,0x22,0xce,0xff,0xc0,0x6f,0xc4,0x6f,0x43,0x6f,0x45,0xbd,0xc2,0x6,0xbd,0xcf,0x67,0x10,0xce,0x3,0xf0,0xcc,0x0,0x1,0xd7,0xa6,0xdd,0x95,0x8e,0x0,0x80,0xcb,0xa,0xa7,0x80,0x5a,0x26,0xfb,0xbd,0xce,0x62,0x10,0x8e,0x1,0x66,0x8e,0xc4,0xdb,0xce,0x34,0x0,0xa6,0x80,0xa7,0xc0,0x31,0x3f,0x26,0xf8,0x96,0xac,0x26,0x3,0x7f,0x34,0x0,0xce,0x34,0x0,0xc6,0x11,0xd7,0x8d,0x96,0xac,0x5f,0xae,0x42,0x30,0x8b,0xaf,0x42,0x33,0xc8,0x15,0xa,0x8d,0x26,0xf3,0xc3,0x1,0x80,0xdd,0x91,0x8e,0xdf,0xe2,0xbf,0x1,0xd,0x1c,0xef,0xbe,0x34,0x8a,0x9f,0x9b,0x7f,0x34,0x8e,0xcc,0xb9,0xa,0xdd,0x9f,0x96,0x8b,0x26,0x10,0x8d,0x22,0x26,0xc,0x8d,0x1e,0x27,0xfc,0x8d,0x1a,0x26,0xfc,0x8d,0x16,0x27,0xfc,0x96,0x8b,0x27,0x55,0xd6,0xae,0x26,0x21,0x4a,0x26,0x14,0xbd,0xc1,0x58,0x27,0x49,0xc,0x8b,0x20,0x45,0x86,0xfe,0xb7,0xff,0x2,0xb6,0xff,0x0,0x84,0x4,0x39,0xbd,0xc1,0x58,0x26,0x35,0xa,0xab,0xbd,0xce,0xa7,0x4f,0x97,0x8b,0xb7,0x34,0x8e,0xd6,0xac,0x26,0x4,0x97,0x93,0x97,0x94,0x4c,0xb7,0x34,0x7e,0x97,0xa5,0x97,0xae,0xb7,0x34,0x69,0xbd,0xc6,0xa8,0xcc,0xa9,0x1,0xdd,0x9f,0xcc,0x20,0x1e,0x8d,0x23,0xcc,0xb9,0xa,0xdd,0x9f,0xcc,0x20,0xc,0x8d,0x19,0xce,0x34,0x0,0xa6,0x40,0x2d,0x8c,0x27,0xb,0xec,0x44,0xe3,0x42,0xed,0x44,0x24,0x3,0xad,0xd8,0xa,0x33,0xc8,0x15,0x20,0xea,0xbd,0xde,0xf,0x5a,0x26,0xfa,0x39,0x9e,0x95,0x30,0x1f,0x9f,0x95,0x26,0x1b,0xcc,0xa9,0x1,0xdd,0x9f,0x8e,0x10,0x0,0x9f,0x95,0x96,0x8e,0x4c,0x84,0x3,0x97,0x8e,0x8e,0xc1,0x8a,0xc6,0x1f,0x3d,0x3a,0xbd,0xde,0x6,0xbd,0xc2,0xe8,0x96,0xa3,0x27,0x2,0x97,0x90,0xbd,0xc3,0x3a,0x96,0xa3,0x39,0x43,0x41,0x4e,0x59,0x4f,0x4e,0x20,0x43,0x4c,0x49,0x4d,0x42,0x45,0x52,0x20,0x20,0x42,0x59,0x20,0x4a,0x41,0x4d,0x45,0x53,0x20,0x47,0x41,0x52,0x4f,0x4e,0x0,0x43,0x4f,0x50,0x59,0x52,0x49,0x47,0x48,0x54,0x20,0x31,0x39,0x38,0x32,0x20,0x20,0x20,0x44,0x41,0x54,0x41,0x53,0x4f,0x46,0x54,0x20,0x49,0x4e,0x43,0x2e,0x0,0x20,0x20,0x20,0x20,0x4c,0x49,0x43,0x45,0x4e,0x53,0x45,0x44,0x20,0x54,0x4f,0x20,0x54,0x41,0x4e,0x44,0x59,0x20,0x43,0x4f,0x52,0x50,0x20,0x20,0x20,0x20,0x0,0x50,0x52,0x45,0x53,0x53,0x20,0x42,0x55,0x54,0x54,0x4f,0x4e,0x20,0x4f,0x52,0x20,0x53,0x50,0x41,0x43,0x45,0x20,0x54,0x4f,0x20,0x42,0x45,0x47,0x49,0x4e,0x0,0xcc,0xd7,0x33,0x8e,0xd7,0xd1,0x20,0xe,0xcc,0xd9,0xb1,0x8e,0xda,0x36,0x20,0x6,0xcc,0xdb,0x96,0x8e,0xdc,0x1a,0xdd,0x97,0x9f,0x95,0x34,0x41,0x1a,0x50,0x86,0xe,0xbd,0xc4,0x28,0xce,0x1c,0x0,0x8e,0x3,0x0,0xcc,0xff,0xff,0xed,0xc3,0x30,0x1e,0x26,0xfa,0xde,0x97,0x8e,0x4,0x0,0x10,0x9e,0x95,0xa6,0xc0,0x81,0xff,0x27,0x3d,0x34,0x2,0xa6,0xe4,0x84,0x1f,0x35,0x4,0x54,0x54,0x54,0x54,0x54,0x26,0x2,0xc6,0x8,0xd7,0x8c,0xc6,0x10,0x3d,0x31,0xab,0x86,0x8,0x97,0x8d,0x34,0x30,0xec,0xa1,0xed,0x84,0x30,0x88,0x20,0xa,0x8d,0x26,0xf5,0x35,0x30,0x30,0x2,0x1f,0x10,0xc4,0x1f,0x26,0x4,0x30,0x89,0x0,0xe0,0xa,0x8c,0x26,0xdd,0x20,0xba,0x86,0x2,0xbd,0xc4,0x28,0xce,0x1c,0x0,0x8e,0x18,0x0,0xec,0xc9,0xe8,0x0,0xed,0xc1,0x30,0x1e,0x26,0xf6,0x35,0xc1,0x8e,0x0,0x80,0xa6,0x85,0x26,0x27,0xc,0x8a,0x6c,0x85,0x8e,0xd4,0x8b,0xc1,0x4,0x2f,0x3,0x8e,0xd4,0x9f,0x31,0xa8,0x40,0xc6,0xa,0xd7,0x8d,0xec,0x81,0xed,0xa4,0xed,0xa9,0x18,0x0,0x31,0xa8,0x20,0xa,0x8d,0x26,0xf1,0xbd,0xcf,0xd6,0x39,0xf7,0x1,0xef,0x2,0xdf,0x4,0xbf,0x8,0x0,0x5f,0x8e,0xc2,0xc9,0xa6,0x81,0x27,0xe,0xb7,0xff,0x2,0xb6,0xff,0x0,0x85,0x8,0x26,0xf2,0xea,0x1f,0x20,0xee,0xf,0xa3,0x86,0x7f,0xb7,0xff,0x2,0xb6,0xff,0x0,0x84,0x8,0x26,0x2,0xc,0xa3,0xd7,0xa2,0x39,0x96,0x90,0x26,0xd3,0xb6,0xff,0x20,0xf6,0xff,0x23,0x34,0x6,0xc4,0xf7,0xf7,0xff,0x23,0xb6,0xff,0x1,0x8a,0x8,0xb7,0xff,0x1,0xb6,0xff,0x3,0x84,0xf7,0xb7,0xff,0x3,0x8d,0x31,0x34,0x4,0xb6,0xff,0x1,0x84,0xf7,0xb7,0xff,0x1,0x8d,0x25,0x58,0x58,0xea,0xe0,0x35,0x2,0xb7,0xff,0x20,0x35,0x2,0xb7,0xff,0x23,0xd7,0xa2,0x96,0x90,0x10,0x26,0xff,0xa8,0x86,0xff,0xb7,0xff,0x2,0xb6,0xff,0x0,0x43,0x84,0x1,0x97,0xa3,0x5d,0x39,0xc6,0x1,0x86,0x5a,0xb7,0xff,0x20,0x7d,0xff,0x0,0x2a,0xd,0x86,0xe2,0xb7,0xff,0x20,0x5f,0x7d,0xff,0x0,0x2a,0x2,0xc6,0x2,0x39,0xae,0x46,0x10,0xae,0xc8,0x12,0xe6,0x4f,0xa6,0x4e,0x34,0x10,0x34,0x6,0xa6,0xa4,0x43,0xa4,0x84,0x34,0x2,0xa6,0x89,0x18,0x0,0xa4,0xa1,0xaa,0xe0,0xa7,0x84,0x30,0x88,0x20,0x35,0x6,0x4a,0x26,0xe5,0x35,0x10,0x30,0x1,0x5a,0x26,0xda,0x39,0xa6,0x4c,0xc6,0x20,0x3d,0x8b,0x4,0x1f,0x1,0xe6,0x4d,0x57,0x3a,0xaf,0x46,0x10,0xae,0x48,0x24,0x2,0x8d,0x5c,0xa6,0x41,0x84,0xbf,0x2b,0x17,0x81,0x1,0x2d,0x23,0x2e,0x4,0x8d,0x4c,0x20,0x1d,0x10,0xae,0x48,0xa6,0x4c,0x85,0x4,0x26,0x14,0x8d,0x41,0x20,0x10,0x10,0xae,0x48,0x85,0x1,0x27,0x2,0x8d,0x34,0xa6,0x4d,0x47,0x24,0x2,0x8d,0x2f,0x10,0xaf,0xc8,0x12,0xe6,0x4f,0xa6,0x4e,0x34,0x10,0x34,0x6,0xa6,0xa0,0x43,0xa4,0x84,0x34,0x2,0xa6,0xa0,0x98,0xaa,0xa4,0x3e,0xaa,0xe0,0xa7,0x84,0x30,0x88,0x20,0x35,0x6,0x4a,0x26,0xe5,0x35,0x10,0x30,0x1,0x5a,0x26,0xda,0x39,0x8d,0x0,0xec,0x4e,0x3d,0x58,0x31,0xa5,0x39,0x34,0x44,0xdc,0x99,0xc3,0x0,0x15,0x84,0xf,0xdd,0x99,0x33,0x8d,0xfb,0xe0,0x33,0xcb,0xa6,0xc4,0x35,0xc4,0x35,0xc4,0x8e,0xff,0xc6,0xc6,0x7,0x47,0x25,0x4,0xa7,0x81,0x20,0x4,0xa7,0x1,0x30,0x2,0x5a,0x26,0xf2,0x39,0x8d,0x16,0x26,0x37,0xa6,0x4d,0x34,0x2,0x4a,0xa8,0xe0,0x85,0x8,0x27,0x2c,0x96,0xa7,0x84,0x1,0x48,0x4a,0x40,0x20,0x1f,0x96,0xa6,0x81,0x2,0x39,0x96,0xa6,0x81,0x3,0x39,0x8d,0xf4,0x26,0x15,0xa6,0x4d,0x34,0x2,0x4c,0xa8,0xe0,0x85,0x8,0x27,0xa,0x96,0xa7,0x84,0x1,0x48,0x4a,0xab,0x4c,0xa7,0x4c,0x39,0x96,0xa7,0x81,0x6,0x2c,0x38,0x34,0x41,0x1a,0x50,0x8e,0xc6,0x57,0x4a,0x48,0xae,0x86,0x9f,0x9d,0x96,0xa7,0x84,0x1,0xce,0x34,0xa8,0xc6,0x2,0xd7,0x8d,0x34,0x12,0xbd,0xc3,0x69,0x35,0x12,0x6f,0xc8,0x14,0xaf,0x4c,0xa7,0x41,0xc6,0x5,0xe7,0xc8,0x10,0x33,0xc8,0x15,0xa,0x8d,0x26,0xe6,0x86,0x23,0xa7,0x5b,0x35,0xc1,0x34,0x40,0xce,0x34,0xa8,0xc6,0x2,0xd7,0x8d,0xbd,0xc3,0x69,0x6f,0x40,0x33,0xc8,0x15,0xa,0x8d,0x26,0xf4,0x35,0xc0,0x8e,0x34,0x0,0xc6,0x11,0x6f,0x0,0x30,0x88,0x15,0x5a,0x26,0xf8,0x39,0x1,0x0,0x3,0x7,0x0,0x0,0x0,0x0,0xd2,0x95,0xc8,0x97,0x17,0x3d,0x9,0x3,0x30,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0xe8,0x0,0x0,0x0,0x0,0xd2,0x95,0xc8,0x97,0x17,0x3d,0x9,0x3,0x38,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0xc8,0x0,0x0,0x0,0x0,0xd2,0x95,0xc8,0x97,0x37,0x0,0x9,0x3,0x28,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0xaa,0x0,0x0,0x0,0x0,0xd2,0x95,0xc8,0x97,0x57,0x3d,0x9,0x3,0x20,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x8b,0x0,0x0,0x0,0x0,0xd2,0x95,0xc8,0x97,0x77,0x0,0x9,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x6b,0x0,0x0,0x0,0x0,0xd2,0x95,0xc8,0x97,0x97,0x3d,0x9,0x3,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2e,0x0,0x0,0x0,0x0,0xcf,0xe5,0xc9,0x75,0x94,0x0,0xc,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0x74,0x0,0x0,0x0,0x0,0xd0,0xf9,0xcd,0xa6,0x0,0x0,0xc,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x7,0x0,0x0,0x0,0x0,0xd4,0xb3,0xc7,0x2c,0x9f,0x3a,0x3,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0xe8,0x0,0x0,0x0,0x0,0xd4,0xb3,0xc7,0x2c,0x9f,0x3a,0x3,0x3,0x23,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x6b,0x0,0x0,0x0,0x0,0xd6,0x63,0xc7,0x44,0x0,0x3d,0x8,0x3,0x10,0x8,0x0,0x0,0x0,0x0,0x0,0x2,0x8b,0x0,0x0,0x0,0x0,0xd6,0x63,0xc7,0x44,0x2,0x0,0x8,0x3,0x20,0x8,0x0,0x0,0x0,0x0,0x1,0x2,0xaa,0x0,0x0,0x0,0x0,0xd6,0x63,0xc7,0x44,0x4,0x3d,0x8,0x3,0x30,0x8,0x0,0x0,0x0,0x0,0x3,0x3,0x25,0x0,0x0,0x0,0x0,0xd7,0x23,0xc6,0xdf,0x2,0x0,0x2,0x1,0x1,0x9,0x0,0x0,0x0,0x0,0x3,0x3,0x25,0x0,0x0,0x0,0x0,0xd7,0x23,0xc6,0xdf,0x6,0x0,0x2,0x1,0x1,0x9,0x0,0x0,0x0,0x0,0x3,0x3,0x25,0x0,0x0,0x0,0x0,0xd7,0x23,0xc6,0xdf,0xa,0x0,0x2,0x1,0x1,0x9,0x0,0x0,0x0,0x0,0x0,0x2,0xe8,0x0,0x0,0x0,0x0,0xd2,0x95,0xc8,0x95,0xf,0x0,0x9,0x3,0x0,0xff,0x0,0x0,0x0,0xff,0x6,0x87,0xa,0x88,0xe,0x89,0x12,0x8a,0x16,0x8b,0x6,0x97,0xa,0x96,0xe,0x95,0x12,0x94,0x16,0x93,0x0,0x0,0x9f,0x3a,0x7f,0x3,0x5f,0x3a,0x3f,0x3,0x1f,0x3a,0x17,0x9d,0x13,0x81,0xf,0x9d,0xb,0x81,0x7,0x9d,0x34,0x76,0x81,0x5,0x2e,0x1e,0x34,0x6,0x86,0x2,0xb7,0xff,0x20,0x86,0xc8,0x1f,0x89,0x5a,0x26,0xfd,0xf6,0xff,0x20,0xc8,0xf0,0xf7,0xff,0x20,0x80,0x3,0x81,0x3c,0x24,0xed,0x35,0x6,0x9b,0x94,0x19,0x97,0x94,0x96,0x93,0x89,0x0,0x19,0x97,0x93,0x8d,0xb,0x35,0xf6,0x9e,0x79,0xcc,0xb1,0x1a,0xdd,0x9f,0x20,0x7,0xcc,0xb1,0x6,0xdd,0x9f,0x9e,0x93,0xf,0xaf,0x34,0x10,0x35,0x2,0x8d,0x2,0x35,0x2,0x34,0x2,0x44,0x44,0x44,0x44,0x8d,0x7,0x35,0x2,0x84,0xf,0x8d,0x1,0x39,0x8b,0x30,0xd,0xaf,0x10,0x26,0x17,0x3f,0x97,0xaf,0x81,0x30,0x10,0x26,0x17,0x37,0x86,0x20,0xf,0xaf,0x7e,0xde,0xf,0xa6,0xc8,0x10,0x26,0x47,0xbd,0xc3,0x69,0xa6,0x4c,0xc6,0xe,0xfb,0x34,0x8a,0x34,0x4,0xa1,0xe0,0x24,0x31,0x8b,0x4,0xa7,0x4c,0xbd,0xc3,0x98,0xb6,0x34,0x8e,0x26,0x2b,0xb6,0x34,0x7e,0x27,0x26,0xa6,0x4d,0xb0,0x34,0x8b,0x4a,0x27,0x3,0x4a,0x26,0x1b,0xa6,0x4c,0xb1,0x34,0x8a,0x25,0x14,0xbd,0xc3,0x69,0x86,0x1,0xa7,0xc8,0x10,0xb7,0x34,0x8e,0x7e,0xc9,0x39,0x6c,0xc8,0x10,0xbd,0xc3,0x69,0x39,0x10,0x8e,0x34,0xa8,0xc6,0x2,0xa6,0xa8,0x10,0x81,0x5,0x26,0x5,0xbd,0xc8,0x48,0x20,0x6,0x31,0xa8,0x15,0x5a,0x26,0xee,0xa6,0xc8,0x10,0x27,0x8,0x6a,0xc8,0x10,0x26,0x57,0x17,0x1,0x10,0xbd,0xc3,0x69,0xa6,0x41,0x27,0x35,0xa6,0x4d,0x26,0x2a,0xc6,0x3d,0xbd,0xc4,0x59,0x27,0x2,0xc6,0x3a,0xa6,0x4c,0x34,0x2,0xbd,0xc4,0x54,0x35,0x2,0x26,0x2,0x8b,0xf9,0xed,0x4c,0xbd,0xc4,0x11,0x84,0x7,0x8b,0xf,0xa7,0xc8,0x10,0x6f,0xc8,0x14,0x17,0x0,0xc4,0x20,0x1f,0x6a,0x4d,0xbd,0xc4,0x5e,0x20,0x15,0xa6,0x4d,0x81,0x3c,0x2d,0xa,0x5f,0xbd,0xc4,0x59,0x27,0xcc,0xc6,0x3,0x20,0xc8,0x6c,0x4d,0xbd,0xc4,0x3c,0xbd,0xc3,0x98,0x11,0x83,0x34,0xd2,0x2d,0x2d,0x6d,0xc8,0x4f,0x27,0x27,0x6d,0xc8,0x10,0x26,0x22,0xa6,0xc8,0x11,0x27,0x5,0x6a,0xc8,0x11,0x20,0x18,0xa6,0x4d,0x81,0x3,0x23,0x12,0xec,0x4c,0x8b,0x2,0xed,0xc8,0x4b,0x6f,0xc8,0x4f,0xbd,0xc4,0x11,0x84,0xf,0xa7,0xc8,0x11,0x39,0xb6,0x34,0x7e,0x27,0x25,0xb6,0x34,0x8e,0x26,0x20,0xb6,0x34,0x8b,0xa0,0x4d,0x81,0x3,0x22,0x17,0x96,0xa4,0x81,0x2,0x2d,0x12,0x81,0x6,0x2e,0xe,0xa6,0xc8,0x14,0x26,0x8,0x86,0x2,0xa7,0xc8,0x14,0xbd,0xc6,0x6b,0x39,0xbd,0xc4,0x54,0x10,0x26,0x1,0x11,0x96,0xa9,0x26,0x15,0x96,0xa8,0x26,0x8,0x96,0xa1,0x81,0x2,0x2c,0xea,0x20,0x6,0x96,0xa1,0x81,0x5,0x2f,0xe2,0x7e,0xc9,0x39,0xb6,0x34,0x7f,0x26,0xf8,0xbd,0xc3,0x69,0x86,0x1,0x97,0xa5,0x86,0x5,0xbd,0xc6,0x6b,0xa6,0x4d,0x8b,0x5,0xa7,0xc8,0x10,0xdc,0x9d,0xed,0x4c,0x39,0xbd,0xc4,0x11,0x84,0x3f,0x8b,0xfd,0x39,0xbd,0xc4,0x54,0x26,0x47,0x96,0xa7,0x81,0x6,0x2c,0x41,0x10,0x8e,0xd4,0xfb,0x85,0x1,0x26,0x1d,0x10,0x8e,0xd5,0x1f,0x20,0x17,0xbd,0xc4,0x54,0x26,0x2e,0x96,0xa7,0x81,0x6,0x2c,0x28,0x10,0x8e,0xd5,0xd,0x85,0x1,0x26,0x4,0x10,0x8e,0xd5,0x31,0x8e,0xc6,0x61,0x96,0xa7,0x4a,0x48,0xae,0x86,0xc6,0x9,0xd7,0x8d,0xec,0xa1,0xed,0x84,0xed,0x89,0x18,0x0,0x30,0x88,0x20,0xa,0x8d,0x26,0xf1,0x39,0x3,0xaa,0xa6,0xc8,0x10,0x27,0x6,0x6a,0xc8,0x10,0x7e,0xc9,0x13,0x11,0x83,0x35,0x50,0x27,0x1b,0xe6,0xc8,0x11,0x26,0x13,0xa6,0x41,0x88,0x1,0xa7,0x41,0xbd,0xc4,0x11,0x84,0x7f,0x8b,0x10,0xa7,0xc8,0x11,0x6f,0xc8,0x14,0x6a,0xc8,0x11,0xbd,0xc3,0x69,0xa6,0x41,0x27,0xc,0xa6,0x4d,0x26,0x4,0x86,0x3d,0x20,0xc,0x6a,0x4d,0x20,0x25,0xa6,0x4d,0x81,0x3c,0x2d,0x1d,0x86,0xff,0xa7,0x4d,0xbd,0xc4,0x11,0x84,0xf,0x8b,0x8,0xa7,0xc8,0x10,0xbd,0xc4,0x11,0x84,0x7f,0x8b,0x10,0xa7,0xc8,0x11,0x6f,0xc8,0x14,0x20,0x1a,0x6c,0x4d,0xbd,0xc3,0x98,0xf,0xaa,0x11,0x83,0x35,0x50,0x27,0x10,0xd6,0xa7,0x8e,0xc9,0x6f,0xa6,0x85,0xa1,0x4c,0x10,0x27,0xfe,0xc5,0xf,0xaa,0x39,0xb6,0x34,0x7e,0x27,0xf8,0xa6,0x4c,0xb0,0x34,0x8a,0x8b,0x6,0x81,0x1,0x2d,0x49,0x81,0xd,0x2c,0x45,0xb6,0x34,0x8b,0xa0,0x4d,0x8b,0x5,0x81,0x4,0x25,0x3a,0x81,0x7,0x2e,0x36,0xf,0xa5,0xf,0xa9,0xf,0xa1,0x7f,0x34,0x7f,0xf,0x8f,0x34,0x40,0xce,0x34,0x7e,0xbd,0xc3,0x69,0x9e,0x9b,0xaf,0x46,0x35,0x40,0x7f,0x34,0x7e,0x86,0x1,0x97,0xa7,0xb7,0x34,0x93,0xbe,0x34,0x84,0xbf,0x34,0x99,0xbe,0x34,0x8a,0xbf,0x34,0x9f,0x9e,0x91,0xbf,0x34,0x95,0xa,0xab,0x39,0x97,0x77,0x57,0x37,0x17,0xa6,0xc8,0x10,0x27,0x1,0x39,0x3,0xb0,0x26,0x2f,0x96,0xa6,0x4a,0x26,0x9,0x10,0x8e,0x34,0x0,0x8e,0x0,0x6,0x20,0x13,0x4a,0x26,0x9,0x10,0x8e,0x34,0xa8,0x8e,0x0,0x2,0x20,0x7,0x10,0x8e,0x34,0xd2,0x8e,0x0,0x6,0xec,0x22,0xc3,0x0,0x1,0xed,0x22,0x31,0xa8,0x15,0x30,0x1f,0x26,0xf2,0x96,0xa9,0x27,0xb,0xa,0xa9,0x26,0x7,0x8e,0xcf,0xe5,0xaf,0x48,0xc,0xa5,0xa6,0x41,0x84,0xbf,0x81,0x2,0x10,0x2c,0x0,0xd2,0xbd,0xc4,0x59,0x26,0x19,0x96,0xa4,0x81,0x6,0x26,0x13,0xbd,0xcf,0xb6,0x26,0xe,0xf,0xa4,0xbd,0xcf,0xd6,0xa6,0x41,0x84,0x7f,0xa7,0x41,0x7e,0xca,0x99,0x96,0xa4,0x81,0x2,0x2d,0x16,0x81,0x5,0x2e,0x12,0xbd,0xc4,0x54,0x26,0xd,0xa6,0x4d,0x81,0x2,0x2c,0x7,0x96,0xa7,0x4c,0x47,0xbd,0xcf,0x8e,0x96,0xa4,0x10,0x27,0x0,0x92,0xe6,0x4c,0x81,0x3,0x2e,0x4,0xcb,0xfc,0x20,0x6,0x81,0x5,0x2d,0x2,0xcb,0x4,0xe7,0x4c,0xa6,0x41,0x34,0x2,0x85,0x40,0x26,0x60,0x85,0x1,0x26,0x2f,0x86,0x80,0xa7,0x41,0xa6,0x4d,0x81,0x3c,0x2d,0x8,0xa6,0xe4,0x88,0x1,0xa7,0xe4,0x20,0x52,0x6c,0x4d,0xbd,0xc4,0x54,0x26,0x4b,0xe6,0x4d,0xc1,0x39,0x2d,0xb,0x96,0xa7,0x84,0x1,0x27,0x5,0x35,0x2,0x7e,0xc9,0x39,0xbd,0xc4,0x3c,0x20,0x35,0x86,0x81,0xa7,0x41,0xa6,0x4d,0x2e,0x8,0xa6,0xe4,0x88,0x1,0xa7,0xe4,0x20,0x25,0x6a,0x4d,0xbd,0xc4,0x54,0x26,0x1e,0xe6,0x4d,0xc1,0x3,0x2e,0xb,0x96,0xa7,0x84,0x1,0x26,0x5,0x35,0x2,0x7e,0xc9,0x39,0xbd,0xc4,0x5e,0x20,0x8,0xa6,0xe4,0x84,0x1,0x8b,0x82,0xa7,0x41,0x96,0xa4,0x4c,0x84,0x7,0x97,0xa4,0x86,0x1,0x97,0xa5,0x35,0x2,0xa7,0x41,0x39,0xa6,0x41,0x8a,0x40,0xa7,0x41,0xbd,0xc2,0xfb,0x27,0x12,0xc5,0x1,0x26,0x71,0xc5,0x2,0x10,0x26,0x0,0xe6,0xc5,0x4,0x26,0x7,0xc5,0x8,0x26,0x31,0x7e,0xcc,0x16,0xd6,0xa1,0x26,0xf9,0xbd,0xc4,0x59,0x26,0x7,0xbd,0xcf,0xb6,0x10,0x26,0xfe,0x70,0xe6,0x4d,0x2f,0xe9,0x6a,0x4d,0xbd,0xc4,0x54,0x26,0xf,0xc1,0x4,0x2c,0x8,0x96,0xa7,0x84,0x1,0x10,0x27,0xfe,0x59,0xbd,0xc4,0x5e,0x86,0x1,0x20,0x2f,0xd6,0xa1,0x26,0xcb,0xbd,0xc4,0x59,0x26,0x7,0xbd,0xcf,0xb6,0x10,0x26,0xfe,0x42,0xe6,0x4d,0xc1,0x3c,0x10,0x24,0x1,0x17,0x6c,0x4d,0xbd,0xc4,0x54,0x26,0xf,0xc1,0x39,0x2d,0x8,0x96,0xa7,0x84,0x1,0x10,0x26,0xfe,0x27,0xbd,0xc4,0x3c,0x4f,0x7e,0xcb,0xf4,0xd6,0xa1,0x26,0x2c,0xd6,0xa9,0x10,0x26,0x0,0x6c,0xae,0x46,0xe6,0x89,0x18,0x0,0x27,0x16,0xbd,0xc4,0x54,0x26,0x8,0xc1,0xaa,0x26,0x5b,0x96,0xa9,0x20,0x7,0xbd,0xc4,0x59,0x26,0x52,0xc1,0xff,0x26,0x4e,0xa6,0x4d,0x84,0x1,0x26,0x48,0xf,0xa8,0xd6,0xa1,0x5c,0xc4,0x7,0xbd,0xc4,0x59,0x26,0x6,0xc1,0x6,0x2d,0x1a,0x20,0x17,0xbd,0xc4,0x54,0x26,0x13,0xc1,0x7,0x2d,0xf,0x6c,0x4c,0x96,0xa8,0x26,0x8,0xbd,0xc8,0x61,0xc,0xa7,0xbd,0xc4,0x78,0x5f,0xd7,0xa1,0x26,0xb,0xbd,0xc4,0x54,0x2c,0x6,0x96,0xa8,0x26,0x2,0xc,0xa7,0xe6,0x4c,0xcb,0xfc,0xe7,0x4c,0x86,0x2,0xd6,0xa1,0x26,0x68,0x4f,0x20,0x65,0xd6,0xa2,0x7e,0xca,0xae,0xd6,0xa1,0x26,0x44,0xd6,0xa9,0x10,0x26,0xff,0xf1,0xa6,0x4d,0x84,0x1,0x26,0xeb,0xae,0x46,0xbd,0xc4,0x59,0x26,0xc,0xa6,0x89,0x1a,0x0,0x81,0xff,0x26,0xdc,0xc6,0x6,0x20,0x1f,0xbd,0xc4,0x54,0x26,0x12,0xa6,0x89,0x19,0xe0,0x81,0xaa,0x26,0xcb,0x96,0xa9,0x26,0xc7,0x6a,0x4c,0xc6,0x7,0x20,0x8,0xe6,0x89,0x1a,0x0,0x26,0xbb,0xc6,0x8,0xd7,0xa1,0x86,0x1,0x97,0xa8,0xa,0xa1,0x26,0xc,0x96,0xa8,0x27,0x8,0xbd,0xc8,0x61,0xa,0xa7,0xbd,0xc4,0x78,0xe6,0x4c,0xcb,0x4,0xe7,0x4c,0x86,0x3,0xa7,0x41,0x96,0xa4,0x26,0x1c,0xb6,0x34,0x8b,0x85,0x1,0x26,0x15,0x86,0x14,0x1f,0x89,0x5a,0x26,0xfd,0xf6,0xff,0x20,0xc8,0x40,0xf7,0xff,0x20,0x8b,0x1,0x81,0x32,0x2f,0xed,0x8e,0xcf,0xe5,0x96,0xa9,0x27,0x3,0x8e,0xd5,0x43,0xa6,0x41,0x85,0x2,0x27,0x7,0x96,0xa1,0x27,0x3,0x8e,0xd2,0xd,0xd,0xa3,0x27,0x17,0x96,0xa1,0x26,0x13,0xa6,0x41,0x84,0xfd,0xa7,0x41,0x96,0xa4,0x26,0x9,0x96,0xa9,0x26,0x5,0xc,0xa4,0x8e,0xd3,0x6b,0xaf,0x48,0x86,0x1,0x97,0xa5,0xbd,0xc4,0x54,0x27,0x4b,0xbd,0xc4,0x59,0x26,0x33,0xae,0x4c,0x8c,0xc,0x20,0x26,0x2b,0xbd,0xcf,0xda,0x7c,0x35,0x50,0x7f,0x35,0x5d,0x7c,0x34,0x8e,0x34,0x40,0xc6,0x3,0xd7,0x8d,0xce,0x35,0x11,0x6f,0x40,0xbd,0xc3,0x69,0x33,0xc8,0x15,0xa,0x8d,0x26,0xf4,0x35,0x40,0x96,0xac,0x81,0x8,0x2c,0x2,0xc,0xac,0x39,0x8e,0xc6,0x41,0xc6,0xff,0x10,0xae,0x81,0x27,0x4b,0x5c,0x10,0xac,0x46,0x26,0xf5,0x17,0xf5,0xfc,0xae,0x4c,0x8c,0x3,0x20,0x10,0x26,0x0,0x4d,0x10,0x8e,0xd2,0xd,0x10,0xaf,0x48,0xae,0x46,0x86,0x1,0x97,0xa5,0x13,0xbd,0xcf,0xda,0xcc,0xe,0xf,0x8e,0x4,0x10,0xee,0x88,0x20,0xef,0x84,0x30,0x88,0x20,0x4a,0x26,0xf5,0xce,0x55,0x55,0xef,0x84,0x86,0xe,0x10,0x8e,0x30,0x0,0x31,0x3f,0x26,0xfc,0x5a,0x26,0xe0,0x6f,0x40,0x7e,0xcd,0x5e,0xae,0x4c,0x8c,0x14,0x2,0x10,0x26,0x0,0xb,0xa6,0x41,0x4a,0x26,0x6,0x96,0x8a,0x81,0xa,0x27,0x1,0x39,0xbd,0xcf,0xda,0xf,0xaf,0xc6,0xff,0xd7,0x8d,0x8e,0x0,0x40,0x3,0xaf,0xd6,0xaf,0xbd,0xc4,0x11,0x91,0x8d,0x25,0x4,0x44,0x5f,0x20,0xf8,0xce,0xff,0xc3,0x6f,0xc5,0x8a,0x2,0xb7,0xff,0x20,0x4a,0x26,0xfd,0x30,0x1f,0x26,0xe0,0x96,0x8d,0x80,0x2,0x97,0x8d,0x81,0x3,0x24,0xd3,0x86,0x2,0xb7,0xff,0x20,0xbd,0xc2,0xe,0xbd,0xc4,0xcd,0xce,0x34,0x7e,0x86,0x2,0x97,0xa6,0x4f,0x5f,0xdd,0xb1,0x97,0xb3,0x4c,0x97,0xa7,0xbd,0xc4,0x78,0xc6,0x2,0x8e,0x34,0xa8,0x6c,0x0,0x6f,0x88,0x14,0x30,0x88,0x15,0x5a,0x26,0xf5,0x8e,0xa2,0x0,0x20,0x29,0xbd,0xc2,0x16,0xbd,0xc4,0xcd,0x8e,0x34,0xd2,0xc6,0x3,0xd7,0x8d,0x6c,0x0,0x6c,0x88,0x3f,0x30,0x88,0x15,0xbd,0xc8,0x40,0xa7,0x88,0x11,0xa,0x8d,0x26,0xee,0xce,0x34,0x7e,0x86,0x3,0x97,0xa6,0x8e,0x9c,0x0,0xaf,0x4c,0x9f,0x9b,0x4f,0xa7,0x41,0xa7,0xc8,0x10,0x97,0xa1,0x97,0xa4,0x97,0xa9,0x4c,0xa7,0x40,0x97,0xa5,0xbd,0xce,0x62,0x10,0xce,0x3,0xf0,0x7e,0xc0,0xcb,0xbd,0xc3,0x69,0xf,0xa4,0xf,0xa1,0x8e,0xd0,0xf9,0xa6,0x4d,0x47,0x24,0x3,0x8e,0xd1,0x7d,0xa6,0x4c,0x8b,0x4,0xa7,0x4c,0x81,0xa8,0x24,0x2d,0xbd,0xc3,0x98,0xec,0x42,0xc3,0x0,0x19,0xed,0x42,0xc6,0x1e,0xd7,0x8d,0x86,0x2,0xb7,0xff,0x20,0x96,0x8f,0x8b,0x2,0x97,0x8f,0x8b,0x14,0x1f,0x89,0x5a,0x26,0xfd,0xf6,0xff,0x20,0xc8,0xf0,0xf7,0xff,0x20,0xa,0x8d,0x26,0xef,0x39,0xb6,0x35,0x50,0x27,0x24,0x34,0x40,0xce,0x35,0x50,0xbd,0xc3,0x69,0x6f,0x40,0x35,0x40,0x86,0x1,0x97,0x8b,0xc,0xab,0xc,0xab,0x86,0xa,0x91,0xab,0x2c,0x2,0x97,0xab,0x1a,0x50,0xbd,0xc2,0x6,0x7e,0xc0,0x69,0xbd,0xc3,0x69,0x9e,0x9b,0xbf,0x34,0x8a,0x4f,0xb7,0x34,0x7f,0xb7,0x34,0x8e,0x97,0xa1,0xa7,0x40,0x4c,0xb7,0x34,0x7e,0x34,0x40,0xce,0x34,0x69,0xbd,0xc3,0x69,0x8e,0x97,0x3d,0xaf,0x4c,0xbd,0xc4,0x11,0x84,0x7f,0x8b,0x10,0xa7,0xc8,0x11,0x86,0x1,0xa7,0x41,0x35,0x40,0x97,0xa7,0xb7,0x34,0x7e,0x97,0xa5,0xbd,0xc4,0x54,0x26,0x6,0x4a,0x97,0xa7,0xbd,0xc4,0x78,0x96,0xab,0x27,0x63,0xcc,0xb1,0x0,0xdd,0x9f,0xbd,0xdd,0xfa,0x53,0x43,0x4f,0x52,0x45,0x3a,0x20,0x20,0x20,0x20,0x30,0x30,0x0,0xbd,0xc6,0xa8,0xc6,0x15,0xd7,0xa0,0xbd,0xdd,0xfa,0x48,0x49,0x47,0x48,0x3a,0x20,0x20,0x20,0x20,0x30,0x30,0x0,0xbd,0xc6,0x9f,0xcc,0xb9,0x18,0xdd,0x9f,0xbd,0xdd,0xfa,0x43,0x41,0x4e,0x59,0x4f,0x4e,0x3a,0x0,0x96,0xac,0x8b,0x31,0xbd,0xde,0xf,0xcc,0xb9,0x0,0xdd,0x9f,0xcc,0x20,0x9,0xbd,0xde,0xf,0x5a,0x26,0xfa,0xd7,0xa0,0x86,0x5b,0xd6,0xab,0x5a,0x2f,0x6,0xbd,0xde,0xf,0x5a,0x26,0xfa,0x39,0x8e,0x0,0x1,0x9f,0x95,0x4f,0xb7,0x34,0x7e,0x97,0xa5,0x97,0xaf,0x97,0xa4,0x97,0x97,0x97,0x90,0x4c,0xb7,0x34,0x8e,0x34,0x40,0xce,0x34,0x7e,0xbd,0xc3,0x69,0x35,0x40,0x86,0xc,0x97,0x8c,0x8d,0xd,0x27,0xfc,0x8d,0x9,0x26,0xfc,0x8d,0x73,0x1a,0x50,0x7e,0xc0,0x69,0xce,0x34,0x0,0xa6,0x40,0x2d,0x12,0x27,0xb,0xec,0x44,0xe3,0x42,0xed,0x44,0x24,0x3,0xad,0xd8,0xa,0x33,0xc8,0x15,0x20,0xea,0x9e,0x95,0x30,0x1f,0x9f,0x95,0x26,0x37,0x8e,0x5,0x0,0x9f,0x95,0xcc,0xb9,0xa,0xdd,0x9f,0x3,0xaf,0x27,0x1f,0xbd,0xdd,0xfa,0x20,0x47,0x41,0x4d,0x45,0x20,0x20,0x4f,0x56,0x45,0x52,0x20,0x0,0xa,0x8c,0x26,0x15,0xf,0xae,0x86,0x1,0x97,0x8b,0x7e,0xc0,0x66,0x20,0xa,0x8e,0xcf,0x5a,0xbd,0xde,0x6,0x86,0x1,0x97,0x97,0x96,0x97,0x27,0x4,0xbd,0xc1,0x7b,0x4d,0x39,0x50,0x52,0x45,0x53,0x53,0x20,0x42,0x55,0x54,0x54,0x4f,0x4e,0x0,0x96,0x7b,0x90,0xae,0x97,0xab,0x9e,0x93,0x9c,0x79,0x23,0x2,0x9f,0x79,0x4f,0x5f,0x97,0xac,0x97,0xa1,0x97,0xa4,0x97,0xa9,0x97,0xb0,0x4c,0x97,0x8b,0x97,0xa7,0xcc,0x1,0x0,0xdd,0x91,0x7e,0xc2,0x6,0x8e,0x0,0xb0,0xe6,0x86,0x26,0x20,0x6c,0x86,0x8e,0xcf,0xdd,0x48,0xae,0x86,0xcc,0x55,0x7,0xa7,0x84,0xa7,0x89,0x18,0x0,0x30,0x88,0x20,0x5a,0x26,0xf4,0xbd,0xc4,0x11,0x84,0x1f,0x8b,0x20,0x97,0xa9,0x39,0xbd,0xc4,0x59,0x27,0x2,0x4f,0x39,0xae,0x46,0xe6,0x41,0xc4,0x1,0xc8,0x1,0x4f,0xc3,0x1,0x80,0x34,0x6,0xa6,0x8b,0x35,0x6,0x27,0x4,0x30,0x1,0xa6,0x8b,0x39,0x86,0x2,0x20,0x2,0x86,0x30,0x7e,0xc6,0x6b,0x16,0x20,0xe,0x20,0x6,0x20,0xf,0xf,0xf,0xf,0xc,0xc,0xf,0xf,0xf,0x3,0xf,0x0,0xf,0xf,0xf,0x0,0xc,0x0,0xc,0x0,0xc,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xc,0xc,0xc,0xf0,0xf0,0xf0,0xf0,0xc0,0xc0,0xf0,0xf0,0xf0,0x30,0xfc,0x0,0xf0,0xf0,0xf0,0x0,0xfc,0x0,0xcc,0x0,0xc,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0xf,0xf,0x3,0x3,0xf,0xf,0xf,0xc,0x3f,0x0,0xf,0xf,0xf,0x0,0x3,0x0,0x3,0x0,0x3,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,0x0,0x3,0x0,0xf,0xf,0xf0,0xf0,0xf0,0xf0,0x30,0x30,0xf0,0xf0,0xf0,0xc0,0xfc,0x0,0xf0,0xf0,0xf0,0x0,0xf0,0x0,0x30,0x0,0xf,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0xf,0x0,0x3f,0x3f,0xff,0xff,0xcf,0xcf,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0x0,0xc0,0x0,0xc,0xc,0xf0,0xf0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0xc,0x0,0xc,0x0,0xc3,0xc0,0x3f,0x3f,0xf,0xf,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0xc0,0x0,0xf0,0xf0,0xfc,0xfc,0xcc,0xcc,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x3,0xf,0xf,0xc,0xc,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0xc,0x0,0xc,0x0,0xf0,0x0,0xff,0xff,0xfc,0xfc,0xf0,0xf0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0x0,0xc3,0x0,0x3c,0x0,0xff,0xff,0xff,0xff,0x3c,0x3c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xf,0xf,0xcf,0xcf,0xcf,0xcf,0x3f,0x3f,0xf,0xf,0xf,0xf,0xf,0x0,0x3f,0x0,0x33,0x0,0x33,0x30,0x3,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0xff,0xff,0xfc,0xfc,0xfc,0xfc,0x3c,0x0,0x3f,0x0,0x33,0x0,0x33,0x3,0x30,0x0,0x30,0x30,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x15,0xcf,0x45,0xc,0x4,0x30,0x10,0xc0,0x40,0x30,0x10,0xc,0x4,0xc,0x4,0xf,0x5,0xff,0x55,0xf0,0x50,0xc,0x4,0x3,0x1,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0xc,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0x55,0xff,0x55,0xc0,0x40,0xc0,0x40,0xc3,0x41,0x0,0x0,0xc0,0x40,0xc0,0x40,0xf0,0x50,0xf0,0x50,0x0,0x0,0xc0,0x40,0xc0,0x40,0x0,0x0,0xc,0x4,0x30,0x10,0x30,0x10,0xf0,0x50,0xff,0x55,0xf,0x5,0x30,0x10,0xc0,0x40,0xc0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc,0x54,0xf3,0x51,0x30,0x10,0xc,0x4,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0x3,0x1,0xf,0x5,0xf,0x5,0x0,0x0,0x3,0x1,0x3,0x1,0x0,0x0,0xc0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0x55,0xff,0x55,0x3,0x1,0x3,0x1,0xc3,0x41,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x40,0x30,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0xf,0xf,0x33,0x33,0xf,0xc,0x3,0x0,0xf,0x0,0x30,0x0,0xc0,0xc0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0x0,0x0,0xc0,0xc0,0xf3,0xf3,0xcc,0xcc,0xc0,0x0,0xc0,0x0,0x30,0x0,0xc,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0xc,0xc,0x0,0x0,0x3c,0x3c,0x3c,0x3c,0x30,0x30,0x3c,0x3c,0xff,0xff,0x3c,0x3c,0xfc,0xc0,0x3c,0x0,0xf3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x30,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0xf0,0xf0,0x0,0x0,0x3,0x3,0x3,0x3,0x0,0x0,0x3,0x3,0xcf,0xcf,0x33,0x33,0x3,0x0,0x3,0x0,0xc,0x0,0x30,0x0,0xf0,0xf0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xf0,0xf0,0xcc,0xcc,0xf0,0x30,0xc0,0x0,0xf0,0x0,0xc,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0xf,0xf,0x0,0x0,0x3c,0x3c,0x3c,0x3c,0xc,0xc,0x3c,0x3c,0xff,0xff,0x3c,0x3c,0x3f,0x3,0x3c,0x0,0xcf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x30,0x30,0xa8,0xa8,0xaa,0x22,0xaa,0x28,0xaa,0x80,0xaa,0x0,0xa8,0x88,0xa8,0x0,0xa8,0x88,0xa8,0x0,0xa8,0x88,0x8a,0x2a,0x28,0xaa,0x28,0xaa,0x2,0xaa,0x0,0xaa,0x22,0x2a,0x0,0x2a,0x22,0x2a,0x0,0x2a,0x22,0x2a,0xf0,0x0,0x3f,0x0,0xf0,0x0,0x30,0x0,0xfc,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x0,0x3,0x0,0xf,0x0,0x3,0x0,0xff,0x0,0x3,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0xc,0x0,0x3f,0x0,0xc,0x0,0xf,0x0,0xfc,0x0,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0xc0,0x0,0xff,0x0,0xc0,0x0,0xf0,0x0,0xc0,0x0,0xf0,0x0,0x55,0x77,0x55,0xd5,0x55,0xd4,0x51,0xd4,0x40,0xff,0x51,0xd4,0x55,0xd5,0x55,0xd5,0x55,0x75,0x55,0x57,0x55,0x75,0x55,0xd4,0x55,0xd4,0x55,0xff,0x55,0xd4,0x55,0xd5,0x55,0x75,0x55,0x55,0xdd,0x55,0x57,0x55,0x17,0x55,0x17,0x15,0xff,0x5,0x17,0x15,0x57,0x55,0x57,0x55,0x5d,0x55,0xd5,0x55,0x5d,0x55,0x17,0x55,0x17,0x55,0xff,0x55,0x17,0x55,0x57,0x55,0x5d,0x55,0x55,0x55,0xf,0xf,0xf,0xf,0xc,0xc,0xf,0xf,0xf,0x3,0xf,0x0,0xf,0xf,0xf,0x0,0xc,0x0,0xc,0x0,0xc,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x30,0x0,0xc,0x0,0xc,0x0,0xfc,0x0,0xc,0x0,0xc,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xc,0xc,0xc,0xf0,0xf0,0xf0,0xf0,0xc3,0xc0,0xf0,0xf0,0xf0,0x30,0xff,0x0,0xf0,0xf0,0xf0,0x0,0xff,0x0,0xcc,0x0,0xc,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0xc0,0x0,0xc0,0x0,0xc0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x30,0x0,0xc3,0x3,0xc3,0x3,0xff,0x0,0xc3,0x3,0xc3,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x0,0xc0,0x0,0xc0,0xc0,0xc0,0x0,0xc0,0x0,0xc0,0x0,0xc0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0xc,0x0,0xc,0x0,0xf,0x0,0xc,0x0,0xc,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3c,0x3c,0x3c,0x3c,0xc,0xc,0x3c,0x3c,0x3c,0x30,0xff,0x0,0x3c,0x3c,0x3c,0x0,0xfc,0x0,0xcc,0x0,0xc3,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0xc,0xc,0x3,0x3,0x3,0x3,0xff,0xff,0x3f,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x30,0xc0,0xc0,0xfc,0xfc,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0x3c,0x3c,0x33,0x33,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0xf0,0xf0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0x3,0x3,0x3f,0x3f,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x30,0xc0,0xc0,0xc0,0xc0,0xff,0xff,0xfc,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0x3c,0x3c,0xcf,0xcf,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0xf0,0xf0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0xc0,0x0,0xc0,0x0,0xc0,0x0,0xc,0x0,0xc,0x0,0xc,0x0,0xc,0x0,0x80,0xd,0x3d,0xe0,0x2f,0xed,0x0,0x30,0xcd,0x32,0x80,0x24,0x40,0x28,0x29,0xca,0x2b,0x2c,0x60,0x41,0x22,0x21,0x33,0xce,0x36,0x41,0x22,0x21,0x40,0x23,0x20,0x34,0xcd,0x37,0x40,0x23,0x60,0x23,0x20,0x35,0xcd,0x38,0x40,0x23,0x60,0x23,0x20,0x25,0xc6,0x27,0x40,0x23,0x20,0x61,0x22,0x21,0xce,0x31,0x21,0x22,0x41,0x60,0x23,0x20,0x2f,0xad,0x40,0x23,0xa0,0x23,0x20,0x30,0x8d,0x32,0x40,0x23,0xa0,0x23,0x28,0x29,0x8a,0x2b,0x2c,0x20,0x23,0x40,0x21,0x22,0x61,0x33,0x8e,0x36,0x81,0x22,0x20,0x23,0x60,0x34,0x8d,0x37,0x80,0x23,0x20,0x23,0x60,0x35,0x8d,0x38,0x80,0x23,0x20,0x23,0x60,0x25,0x86,0x27,0x80,0x23,0x81,0x22,0x21,0x8e,0x31,0x41,0x22,0x41,0x80,0x23,0x20,0x2f,0x6d,0x60,0x23,0xc0,0x23,0x20,0x30,0x4d,0x32,0x60,0x23,0xc0,0x23,0x28,0x29,0x4a,0x2b,0x2c,0x40,0x23,0x40,0xc1,0x39,0x3a,0x3b,0x3c,0xc1,0xff,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x64,0x64,0x11,0x11,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x64,0x64,0x11,0x11,0x2a,0x2a,0x2a,0x2a,0x0,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x0,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x0,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0xa0,0x2a,0xa8,0xaa,0xa8,0xaa,0xa0,0x2a,0xa5,0x2a,0xa5,0x2a,0xa5,0x2a,0xa5,0x2a,0xaa,0xa8,0xaa,0xa0,0xaa,0x8c,0xaa,0xc,0xa8,0xcc,0xa8,0xcc,0xa8,0xcc,0xa8,0xcc,0x0,0x0,0x9f,0x3e,0xe7,0xf9,0xf9,0xe7,0x3e,0x1f,0x3e,0x1f,0xf9,0xe7,0xe7,0xf9,0xa,0xaa,0x42,0xaa,0xcc,0xaa,0xcc,0x2a,0xc,0xca,0xc,0xca,0xcc,0xca,0xcc,0xca,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xa8,0x0,0xa0,0x9f,0x8c,0xe7,0xc,0xf9,0xcc,0x3e,0xcc,0x3e,0xcc,0xf9,0xcc,0xe7,0x0,0x0,0x3e,0x1f,0xf9,0xe7,0xe7,0xf9,0x1f,0x3e,0x1f,0x3e,0xe7,0xf9,0xfb,0xe7,0x0,0xa,0x3e,0x42,0xf9,0xcc,0xe7,0xcc,0x1f,0xc,0x1f,0xc,0xe7,0xcc,0xf9,0xcc,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x2a,0xaa,0xca,0xaa,0xca,0xaa,0xca,0xaa,0xca,0xaa,0x88,0x88,0x22,0x22,0x88,0x88,0x22,0x22,0x88,0x88,0x22,0x22,0x88,0x88,0x22,0x22,0x44,0x44,0x11,0x11,0x88,0x88,0x22,0x22,0x88,0x88,0x22,0x22,0x88,0x88,0x22,0x22,0x88,0x88,0xa2,0x22,0x88,0x88,0xa2,0x22,0x88,0x88,0xa2,0x22,0x88,0x88,0xa2,0x22,0xa8,0x88,0xa2,0x22,0xa8,0x88,0xa2,0x22,0xa8,0x88,0xa2,0x22,0xa8,0x88,0xa2,0x22,0x44,0x44,0x11,0x11,0xaa,0xaa,0x2a,0xaa,0xaa,0xaa,0x2a,0xaa,0xaa,0xaa,0x2a,0xaa,0x88,0x8a,0x22,0x22,0x88,0x8a,0x22,0x22,0x88,0x8a,0x22,0x22,0x88,0x8a,0x22,0x22,0x44,0x44,0x11,0x11,0xaa,0x88,0xaa,0x22,0xaa,0x88,0xaa,0x22,0xaa,0x88,0xaa,0x22,0xaa,0x88,0xaa,0xa2,0xaa,0x88,0xaa,0xa2,0xaa,0x88,0xaa,0xa2,0xaa,0x88,0xaa,0xa2,0xaa,0xa8,0xaa,0xa2,0xaa,0xa8,0xaa,0xa2,0xaa,0xa8,0xaa,0xa2,0xaa,0xa8,0xaa,0xa2,0x44,0x44,0x11,0x11,0x88,0xaa,0x22,0x2a,0x88,0xaa,0x22,0x2a,0x88,0xaa,0x22,0x2a,0x88,0xaa,0x22,0xaa,0x88,0xaa,0x22,0xaa,0x88,0xaa,0x22,0xaa,0x88,0xaa,0x22,0xaa,0x8a,0xaa,0x22,0xaa,0x8a,0xaa,0x22,0xaa,0x8a,0xaa,0x22,0xaa,0x8a,0xaa,0x22,0xaa,0x44,0x44,0x11,0x11,0xaa,0x88,0xaa,0xa2,0xaa,0x88,0xaa,0xa2,0xaa,0x89,0xaa,0xa5,0x44,0x44,0x11,0x11,0x88,0x85,0x21,0x55,0x95,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x44,0x11,0x11,0x54,0x88,0x55,0x52,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x44,0x11,0x11,0x88,0xaa,0x22,0x2a,0x88,0xaa,0x62,0x2a,0x58,0xaa,0x56,0x2a,0xaa,0xaa,0x2a,0xaa,0xaa,0xaa,0x2a,0xaa,0xaa,0xaa,0x2a,0xaa,0xaa,0xaa,0x2a,0xaa,0x0,0x0,0xe1,0x69,0xc1,0x35,0xc0,0x28,0x34,0x28,0xa0,0x2d,0x0,0x33,0xc0,0x2e,0x0,0x33,0xa0,0x29,0x2f,0x41,0x22,0x2a,0x43,0x44,0x2c,0x25,0x46,0x47,0x48,0x30,0x40,0x2b,0x0,0x80,0x31,0x40,0x2b,0x0,0x80,0x32,0x29,0x20,0x2b,0x0,0x80,0x48,0x47,0x46,0x45,0x44,0x43,0x2a,0x22,0x41,0x35,0xe0,0x80,0x2b,0x40,0x2d,0x0,0x80,0x2b,0x40,0x2e,0x0,0x80,0x2b,0x20,0x29,0x2f,0x41,0x22,0x2a,0x43,0x44,0x45,0x46,0x47,0x48,0x30,0x40,0x2b,0x0,0x80,0x31,0x40,0x2b,0x0,0x80,0x32,0x29,0x20,0x2b,0x0,0x80,0x48,0x47,0x46,0x45,0x44,0x43,0x2a,0x22,0x41,0x35,0xe0,0x80,0x2b,0x40,0x2d,0x0,0x80,0x2b,0x40,0x2e,0x0,0x80,0x2b,0x20,0x29,0x2f,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0xff,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x46,0x45,0x21,0x21,0x95,0x95,0xaa,0x95,0x95,0x95,0x95,0x95,0x95,0x95,0xaa,0x95,0x95,0x95,0x95,0x95,0x95,0x95,0x95,0x95,0x95,0x95,0x46,0x45,0x21,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x5d,0x54,0x71,0x54,0xc5,0x54,0x15,0x54,0x15,0x57,0xd5,0x57,0xd5,0x75,0xd5,0xd4,0x15,0xd4,0xd5,0xff,0xd5,0xd4,0x15,0xd5,0xd5,0x75,0xd5,0x55,0xd5,0x55,0xd5,0x57,0xd5,0x46,0x45,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x15,0x75,0x15,0x4d,0x15,0x53,0x15,0x54,0x15,0x54,0x15,0x57,0xd5,0x57,0xd5,0x57,0x5d,0x54,0x17,0x57,0x17,0x57,0xff,0x54,0x17,0x57,0x57,0x57,0x5d,0x57,0x55,0x57,0x55,0x57,0xd5,0x46,0x45,0x95,0x95,0x95,0x95,0xaa,0x95,0x95,0x95,0x95,0x95,0x95,0x95,0xaa,0x95,0x95,0x95,0x21,0x21,0x95,0x95,0xaa,0x95,0x95,0x95,0x95,0x95,0x95,0x95,0xaa,0x95,0x95,0x95,0x55,0x55,0x51,0x55,0x54,0x55,0x54,0x55,0x50,0x55,0x54,0x55,0x54,0x55,0x51,0x55,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x3c,0xe2,0x1,0x3d,0xe1,0x1,0x3d,0xe1,0x22,0x3c,0x23,0x22,0x23,0x42,0x23,0x42,0x24,0x42,0x25,0x26,0x22,0x21,0x3d,0x1,0x2a,0x41,0x2b,0x2c,0x21,0x21,0x3d,0x1,0x31,0x41,0x32,0x33,0x21,0x42,0x27,0x1,0xe1,0x2d,0x62,0x27,0x1,0x61,0x34,0x61,0x2e,0x42,0x27,0xe1,0x36,0x81,0x35,0x41,0x2d,0x22,0x23,0x22,0x27,0x61,0x37,0x81,0x37,0x41,0x37,0x61,0x2d,0x22,0x3c,0x21,0x38,0xe1,0x38,0xa1,0x3d,0x1,0xe1,0x3d,0x1,0xc1,0x28,0x22,0x1,0x61,0x28,0x42,0x29,0x1,0x28,0x62,0x2f,0x41,0x30,0xa1,0x28,0x42,0x29,0x61,0x31,0x41,0x3a,0x61,0x28,0x22,0x29,0x41,0x30,0x81,0x27,0x21,0x3b,0x21,0x42,0x2f,0x21,0x30,0x41,0x31,0x81,0x39,0x41,0x25,0xff,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x0,0x0,0x88,0x88,0xa2,0x22,0xa8,0x8a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x2a,0xa8,0x2a,0xa8,0x8a,0xa2,0x8a,0xa2,0xa0,0xa,0xaa,0xaa,0xaa,0xaa,0x2a,0xa8,0x2a,0xa8,0x2a,0xa2,0x2a,0xa2,0x8a,0x8a,0x8a,0x8a,0x8a,0x2a,0x8a,0x2a,0x2a,0xaa,0x2a,0xaa,0x8a,0xaa,0x8a,0xaa,0xa2,0xaa,0xa2,0xaa,0xa8,0xaa,0xa8,0xaa,0xaa,0x80,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0x2a,0xaa,0x2a,0xaa,0x2a,0xaa,0x2a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa2,0xaa,0xa2,0xaa,0xa2,0xaa,0xa2,0x2a,0xa2,0x2a,0xa2,0x2a,0xa2,0x2a,0xa2,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0xa0,0xaa,0xa0,0xaa,0xa2,0xaa,0xa2,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xa2,0xa8,0xa2,0xa8,0xa2,0xa2,0xa2,0xa2,0xa8,0x8a,0xa8,0x8a,0xa8,0x2a,0xa8,0x2a,0xa2,0xa8,0xa2,0xa8,0xa2,0xa8,0xa2,0xa8,0xa8,0xa2,0xa8,0xa2,0xa8,0xa2,0xa8,0xa2,0x2a,0x8a,0x2a,0x8a,0x8a,0x8a,0x8a,0x8a,0xa2,0x2a,0xa2,0x2a,0xa8,0x2a,0xa8,0x2a,0xa2,0x2a,0xa2,0x2a,0xa2,0x2a,0xa2,0x2a,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xaa,0x2a,0xaa,0x2a,0xaa,0x8a,0xaa,0x8a,0xaa,0xa2,0xaa,0xa2,0xaa,0xa8,0xaa,0xa8,0xaa,0x2a,0xaa,0x8a,0xaa,0x8a,0xaa,0xa2,0xaa,0xa2,0xaa,0xa8,0xaa,0xaa,0xaa,0xaa,0xaa,0x8a,0xaa,0x8a,0xaa,0x2a,0xaa,0x2a,0xa8,0xaa,0x2,0xaa,0xaa,0xaa,0xaa,0xaa,0xa8,0xaa,0xa8,0xaa,0xa2,0xaa,0xa2,0xaa,0x8a,0xaa,0x8a,0xaa,0x2a,0xaa,0x2a,0xaa,0xa8,0x8a,0xa8,0x8a,0xa8,0x8a,0xa8,0x8a,0xa8,0x2a,0xa8,0x2a,0xa8,0x2a,0xa8,0x2a,0xaa,0xa8,0xaa,0xa8,0xaa,0xa2,0xaa,0xa2,0xaa,0x8a,0xaa,0x8a,0xaa,0x2a,0xaa,0x2a,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa2,0xaa,0xa2,0xaa,0xa2,0xaa,0xa2,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x2a,0xaa,0x2a,0xaa,0x2a,0xaa,0x2a,0xaa,0xa2,0xaa,0xa2,0xaa,0xa2,0xaa,0xa2,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xaa,0x2a,0xaa,0x2a,0xaa,0x2a,0xaa,0x2a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0x8a,0xaa,0xa2,0xaa,0xa2,0xaa,0xa2,0xaa,0xa2,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0xaa,0xa8,0x0,0x0,0xea,0xea,0xea,0xea,0xea,0xea,0xff,0xea,0xea,0xea,0xea,0xea,0xea,0xea,0xff,0xea,0xea,0xea,0xea,0xea,0xea,0xea,0xff,0xea,0xea,0xea,0xea,0xea,0xea,0xea,0xae,0xe1,0xa6,0x80,0x27,0x4,0x8d,0xd,0x20,0xf8,0x6e,0x84,0xa6,0x80,0x27,0x4,0x8d,0x3,0x20,0xf8,0x39,0x34,0x56,0xa6,0xe4,0x80,0x20,0xce,0xde,0x3e,0xc6,0x7,0x3d,0x33,0xcb,0x96,0x9f,0xc6,0x20,0x3d,0x8b,0x4,0x1f,0x1,0xd6,0xa0,0x3a,0xc6,0x7,0xa6,0xc0,0x43,0xa7,0x84,0xa7,0x89,0x18,0x0,0x30,0x88,0x20,0x5a,0x26,0xf1,0xc,0xa0,0x35,0xd6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x8,0x8,0x0,0x8,0xa,0xa,0xa,0x0,0x0,0x0,0x0,0xa,0xa,0x1f,0xa,0x1f,0xa,0xa,0x8,0x1e,0x28,0x1c,0xa,0x3c,0x8,0x32,0x32,0x4,0x8,0x10,0x26,0x26,0x10,0x28,0x28,0x10,0x2a,0x24,0x1a,0x8,0x8,0x10,0x0,0x0,0x0,0x0,0x2,0x4,0x8,0x8,0x8,0x4,0x2,0x8,0x4,0x2,0x2,0x2,0x4,0x8,0x8,0x2a,0x1c,0x3e,0x1c,0x2a,0x8,0x0,0x8,0x8,0x3e,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x10,0x0,0x0,0x0,0x3e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x2,0x2,0x4,0x8,0x10,0x20,0x20,0x1c,0x22,0x26,0x2a,0x32,0x22,0x1c,0x8,0x18,0x8,0x8,0x8,0x8,0x1c,0x1c,0x22,0x2,0xc,0x10,0x20,0x3e,0x1c,0x22,0x2,0xc,0x2,0x22,0x1c,0x2,0x6,0xa,0x1f,0x2,0x2,0x2,0x3e,0x20,0x20,0x3c,0x2,0x2,0x3c,0x1c,0x22,0x20,0x3c,0x22,0x22,0x1c,0x3e,0x22,0x4,0x4,0x8,0x8,0x8,0x1c,0x22,0x22,0x1c,0x22,0x22,0x1c,0x1c,0x22,0x22,0x1e,0x2,0x22,0x1c,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x8,0x8,0x10,0x4,0x8,0x10,0x20,0x10,0x8,0x4,0x0,0x0,0x3e,0x0,0x3e,0x0,0x0,0x10,0x8,0x4,0x2,0x4,0x8,0x10,0x1c,0x22,0x2,0x4,0x8,0x0,0x8,0x1c,0x22,0x2,0x1a,0x2a,0x2a,0x1c,0x1c,0x22,0x22,0x3e,0x22,0x22,0x22,0x3c,0x22,0x22,0x3c,0x22,0x22,0x3c,0x1c,0x22,0x20,0x20,0x20,0x22,0x1c,0x38,0x24,0x22,0x22,0x22,0x24,0x38,0x3e,0x20,0x20,0x3c,0x20,0x20,0x3e,0x3e,0x20,0x20,0x3c,0x20,0x20,0x20,0x1c,0x22,0x20,0x2e,0x22,0x22,0x1c,0x22,0x22,0x22,0x3e,0x22,0x22,0x22,0x3e,0x8,0x8,0x8,0x8,0x8,0x3e,0xf,0x2,0x2,0x2,0x2,0x12,0xc,0x22,0x24,0x28,0x30,0x28,0x24,0x22,0x20,0x20,0x20,0x20,0x20,0x20,0x3c,0x22,0x36,0x2a,0x2a,0x22,0x22,0x22,0x22,0x32,0x32,0x2a,0x26,0x26,0x22,0x1c,0x22,0x22,0x22,0x22,0x22,0x1c,0x3c,0x22,0x22,0x3c,0x20,0x20,0x20,0x1c,0x22,0x22,0x22,0x2a,0x24,0x1a,0x3c,0x22,0x22,0x3c,0x28,0x24,0x22,0x1c,0x22,0x20,0x1c,0x2,0x22,0x1c,0x3e,0x8,0x8,0x8,0x8,0x8,0x8,0x22,0x22,0x22,0x22,0x22,0x22,0x1c,0x22,0x22,0x22,0x22,0x14,0x14,0x8,0x22,0x22,0x22,0x2a,0x2a,0x36,0x22,0x22,0x22,0x14,0x8,0x14,0x22,0x22,0x22,0x22,0x14,0x8,0x8,0x8,0x8,0x3e,0x2,0x4,0x8,0x10,0x20,0x3e,0xc,0xc,0x8,0xe,0xc,0x12,0x21,0xbd,0xc4,0x11,0x96,0xa5,0x27,0xb,0xce,0x34,0x7e,0xbd,0xc3,0x69,0xbd,0xc3,0x98,0xf,0xa5,0xb6,0xff,0x3,0xb6,0xff,0x2,0x3b,0x4a,0x2e,0x47,0x2e,0x0 };


// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------
//
// Begin MC6809 Bus Interface Unit 
//
// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------


// Setup Teensy 4.1 IO's
//
void setup() {

  pinMode(PIN_RESET_n,         INPUT);  
  pinMode(PIN_FIRQ_n,          INPUT);  
  pinMode(PIN_IRQ_n,           INPUT);  
  pinMode(PIN_HALT_n,          INPUT);  
  pinMode(PIN_NMI_n,           INPUT);  
  pinMode(PIN_CLK_E,           INPUT);    
  pinMode(PIN_RDWR_n,          OUTPUT); 

  pinMode(PIN_ADDR15,          OUTPUT); 
  pinMode(PIN_ADDR14,          OUTPUT); 
  pinMode(PIN_ADDR13,          OUTPUT); 
  pinMode(PIN_ADDR12,          OUTPUT); 
  pinMode(PIN_ADDR11,          OUTPUT); 
  pinMode(PIN_ADDR10,          OUTPUT); 
  pinMode(PIN_ADDR9,           OUTPUT); 
  pinMode(PIN_ADDR8,           OUTPUT); 
  pinMode(PIN_ADDR7,           OUTPUT); 
  pinMode(PIN_ADDR6,           OUTPUT); 
  pinMode(PIN_ADDR5,           OUTPUT); 
  pinMode(PIN_ADDR4,           OUTPUT); 
  pinMode(PIN_ADDR3,           OUTPUT); 
  pinMode(PIN_ADDR2,           OUTPUT); 
  pinMode(PIN_ADDR1,           OUTPUT); 
  pinMode(PIN_ADDR0,           OUTPUT); 
  pinMode(PIN_ADDR_OE_n,       OUTPUT); 

  pinMode(PIN_DATA_IN7,        INPUT); 
  pinMode(PIN_DATA_IN6,        INPUT); 
  pinMode(PIN_DATA_IN5,        INPUT); 
  pinMode(PIN_DATA_IN4,        INPUT); 
  pinMode(PIN_DATA_IN3,        INPUT); 
  pinMode(PIN_DATA_IN2,        INPUT); 
  pinMode(PIN_DATA_IN1,        INPUT); 
  pinMode(PIN_DATA_IN0,        INPUT); 

  pinMode(PIN_DATA_OUT7,       OUTPUT); 
  pinMode(PIN_DATA_OUT6,       OUTPUT); 
  pinMode(PIN_DATA_OUT5,       OUTPUT); 
  pinMode(PIN_DATA_OUT4,       OUTPUT); 
  pinMode(PIN_DATA_OUT3,       OUTPUT); 
  pinMode(PIN_DATA_OUT2,       OUTPUT); 
  pinMode(PIN_DATA_OUT1,       OUTPUT); 
  pinMode(PIN_DATA_OUT0,       OUTPUT); 
  pinMode(PIN_DATA_OE_n,       OUTPUT); 


  digitalWriteFast(PIN_RDWR_n,0x1);
  digitalWriteFast(PIN_ADDR_OE_n,0x0);
  digitalWriteFast(PIN_DATA_OE_n,0x1);

  Serial.begin(9600);
  
}


// ----------------------------------------------------------
// Address range check
// Mode 0 = All acceleration and mirroring disabled   
// Mode 1 = Eliminates 6809 VMA cycles   
// Mode 2 = Reads and writes are cycle accurate using internal memory with writes passing through to motherboard   
// Mode 3 = Reads accelerated using internal memory and writes are cycle accurate and pass through to motherboard   
// Mode 4 = All read and write accesses use accelerated internal memory    
// ----------------------------------------------------------
inline uint8_t internal_address_check(uint16_t local_address) {
    
    if ( (local_address >= 0xC000) && (local_address <= 0xFEFF) ) return mode;     //  Tandy CoCo - Cartridge ROM
    if ( (local_address >= 0xA000) && (local_address <= 0xBFFF) ) return 0;        //  Tandy CoCo - BASIC ROM
    if ( (local_address >= 0x0600) && (local_address <= 0x9FFF) ) return mode;     //  Tandy CoCo - RAM
    if ( (local_address >= 0x0400) && (local_address <= 0x05FF) ) return 0;        //  Tandy CoCo - Normal Video RAM
    if ( (local_address >= 0x0000) && (local_address <= 0x03FF) ) return mode;     //  Tandy CoCo - RAM

    return 0x0;
} 
  

// -------------------------------------------------
// Wait for the CLK rising edge  
// -------------------------------------------------         
inline void wait_for_CLK_rising_edge() {

    while ( (GPIO9_DR&0x80000000) != 0) {}                                              // First ensure clock is at a low level
    do { GPIO9_raw_data = GPIO9_DR;   } while ( (GPIO9_raw_data&0x80000000) == 0);      // Then poll for the first instance where clock is not low
    
    return;}
      
// -------------------------------------------------
// Wait for the CLK falling edge  
// -------------------------------------------------         
inline void wait_for_CLK_falling_edge() {
  
  old_GPIO6 = GPIO6_DR;
  
  
  // Halt handler
  // ---------------
  
  while (direct_halt_n==0)  {                             // If HALT_n detected, immediately hi-Z signals and poll CLL until HALT_n deasserted
      halt_occured=1;
        digitalWriteFast(PIN_ADDR_OE_n,0x1);
        digitalWriteFast(PIN_DATA_OE_n,0x1);
        pinMode(PIN_RDWR_n,          INPUT);
      
      while ( (GPIO9_DR&0x80000000) == 0) {}                                          // Poll for next falling CLK edge
        do { GPIO9_raw_data   = GPIO9_DR; 
             direct_halt_n    = (GPIO9_raw_data&0x00000040);         
           } while ( (GPIO9_raw_data&0x80000000) != 0); 
    }
  
  if (halt_occured==1)  {                               // Re-enable OE drivers and RD_WR_n to pre-HALT_n cycle settings
    halt_occured=0;
    GPIO6_DR = old_GPIO6;
        pinMode(PIN_RDWR_n,          OUTPUT);
  }
           
       
  // Normal CLK falling edge handler
  // -------------------------------- 

    while ( (GPIO9_DR&0x80000000) == 0) {}                                              // First ensure clock is at a high level
    do { GPIO7_raw_data   = GPIO7_DR;                         // Then poll for the first instance where clock is not high
       GPIO9_raw_data   = GPIO9_DR;   
     } while ( (GPIO9_raw_data&0x80000000) != 0);                     
     
    
    direct_nmi_n_d2  = direct_nmi_n_d1;      
  direct_nmi_n_d1  = direct_nmi_n;
    direct_irq_n_d1  = direct_irq_n;
    direct_firq_n_d1 = direct_firq_n;

    direct_reset_n    = (GPIO9_raw_data&0x00000100);                    // Sample all signals at E falling edge
    direct_nmi_n      = (GPIO9_raw_data&0x00000080);   
    direct_halt_n     = (GPIO9_raw_data&0x00000040);   
    direct_irq_n      = (GPIO9_raw_data&0x00000020);   
    direct_firq_n     = (GPIO9_raw_data&0x00000010);   
  
    if (direct_nmi_n_d2!=0 && direct_nmi_n_d1==0 && nmi_enabled==1) nmi_latched=1;         
    
    return;}
    

// -------------------------------------------------
// Initiate a MC6809 Read Bus Cycle
// -------------------------------------------------    
inline uint8_t BIU_Read_Byte(uint16_t local_address)  {
    uint16_t read_data;
   
         if ( (internal_address_check(local_address) > 2) && (local_address>=0xC000) && (local_address<0xFF00) )  { read_data = internal_RAM[local_address];  return read_data; }   // Cartridge ROMs always internal for testing
    else if ( (internal_address_check(local_address) > 2) && local_address<0xA000 )                               { read_data = internal_RAM[local_address];  return read_data;}   // Accelerated internal reads below 0xA000
	    
     
  noInterrupts();                                     // Disable Teensy interupts so the MC6809 bus cycle can complete without interruption
  
  GPIO6_DR = (local_address << 16) | 0x2008;          // Drive address, RDWR_n(bit13), ADDR_OE_n(bit12), DATA_OE_n(bit3)
  
  wait_for_CLK_falling_edge();
  
  read_data = ((GPIO7_raw_data&0x000F0000)>>12) | (GPIO7_raw_data&0x0000000F) ; 

  //if (local_address==0xFF22)   read_data = read_data | 0x04;  // force memory size to 16K
  //if (local_address==0xFF22)   read_data = read_data & 0xFB;  // force memory size to 64K?
  
  interrupts(); 

    
  if ( (local_address>=0xC000) && (local_address<0xFF00)) read_data = internal_RAM[local_address];    // Cartridge ROMs always internal for testing
  
          
  return read_data;
}


  
// -------------------------------------------------
// Initiate a MC6809 Write Bus Cycle
// -------------------------------------------------    
void BIU_Write_Byte(uint16_t local_address , uint8_t local_data)  {
  uint32_t address_shifted_16;
  
  if ( (internal_address_check(local_address) > 3) && (local_address<0xA000) )  { internal_RAM[local_address]=local_data; return;  }  // Accelerated internal writes

  noInterrupts();                                   // Disable Teensy interupts so the MC6809 bus cycle can complete without interruption

  address_shifted_16 = (local_address << 16);
  
  GPIO6_DR = address_shifted_16 | 0x0008;          // Drive address, RDWR_n(bit13), ADDR_OE_n(bit12), DATA_OE_n(bit3)

  GPIO7_DR = ((local_data&0xC0)<<22) | ((local_data&0x38)<<7); // Dataout[7:3]
  GPIO8_DR = ((local_data&0x06)<<21) | ((local_data&0x01)<<18); // Dataout[2:0]
  
  wait_for_CLK_rising_edge();
  GPIO6_DR = address_shifted_16 | 0x0000;         // Turn on Data bus buffer output on rising edge of E_CLK
  
  wait_for_CLK_falling_edge();
  GPIO6_DR = address_shifted_16 | 0x2008;         // Debounce RDWR_n and disable Data bus buffer outputs

  if (local_address<0xA000) internal_RAM[local_address]=local_data;  // Always mirror to internal RAM for writes below 0xA000 
  
  interrupts(); 

  return;
}

// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------
//
// End MC6809 Bus Interface Unit
//
// --------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------


uint16_t Sign_Extend5(uint8_t local_data)  {  if ((0x0010&local_data)!=0) return (0xFFF0|local_data); else return (0x001F&local_data); }
uint16_t Sign_Extend8(uint8_t local_data)  {  if ((0x0080&local_data)!=0) return (0xFF00|local_data); else return (0x00FF&local_data); }


void UpdateFlags(uint8_t local_flags)  {
  
  flag_c = (local_flags>>0 & 0x01);
  flag_v = (local_flags>>1 & 0x01);
  flag_z = (local_flags>>2 & 0x01);
  flag_n = (local_flags>>3 & 0x01);
  flag_i = (local_flags>>4 & 0x01);
  flag_h = (local_flags>>5 & 0x01);
  flag_f = (local_flags>>6 & 0x01);
  flag_e = (local_flags>>7 & 0x01);
  
  return;
}
void UpdateRegisterD(uint16_t local_word)  {
  
  register_A = local_word >> 8;
  register_B = local_word & 0x00FF;
  
  return;
}


// ------------------------------------------------------
// Fetch an opcode byte
// ------------------------------------------------------
uint8_t Fetch_Opcode_Byte()  {    
    uint8_t local_byte;
    
    local_byte = BIU_Read_Byte(register_PC);     
    register_PC++;

    return local_byte;
}

// ------------------------------------------------------
// Fetch an opcode word
// ------------------------------------------------------
uint16_t Fetch_Opcode_Word()  {    
    uint16_t local_word;
    
    local_word = BIU_Read_Byte(register_PC);     
    register_PC++;
    local_word = (local_word<<8) | BIU_Read_Byte(register_PC);     
    register_PC++;

    return local_word;
}


// ------------------------------------------------------
// Read and Write data from BIU
// ------------------------------------------------------
uint8_t Read_Byte(uint16_t local_address)  {    
    uint8_t local_byte;
    local_byte = BIU_Read_Byte(local_address);     
    return local_byte;
}

uint16_t Read_Word(uint16_t local_address)  {    
    uint16_t local_word;

    local_word = BIU_Read_Byte(local_address);
    local_word = (local_word<<8) | BIU_Read_Byte(local_address+1);
    return local_word;
}

void Write_Byte(uint16_t local_address , uint8_t local_data)  {    
    BIU_Write_Byte(local_address , local_data );
    return;
}

void Write_Word(uint16_t local_address , uint16_t local_data)  {    
    BIU_Write_Byte(local_address   , local_data>>8 );  
    BIU_Write_Byte(local_address+1 , local_data );  
    return;
}

void VMA_Cycle(uint8_t local_count , uint16_t local_address)  { 

    if (mode==0)   for (uint8_t i=1; i<=local_count; i++)  temp8 = BIU_Read_Byte(local_address);    
     
  return;
}


// ------------------------------------------------------
// Stack
// ------------------------------------------------------
void PushU8(uint8_t local_data)  {    
    register_USP--;
    Write_Byte(register_USP,local_data); 
    return;
}

void PushU16(uint16_t local_data)  {    
    PushU8(local_data    );  // Low  Byte
    PushU8(local_data>>8 );  // High Byte
    return;
}

uint8_t PopU8()  {    
    uint8_t local_data_low;
  
    local_data_low = Read_Byte(register_USP );
    register_USP++;
    return local_data_low;
}

uint16_t PopU16()  {    
    uint8_t local_data_low;
    uint8_t local_data_high;
  
    local_data_high = PopU8();
    local_data_low  = PopU8();
    return( (local_data_high<<8) | local_data_low);
}


void PushS8(uint8_t local_data)  {    
    register_SSP--;
    Write_Byte(register_SSP,local_data); 
    return;
}

void PushS16(uint16_t local_data)  {    
    PushS8(local_data    );  // Low  Byte
    PushS8(local_data>>8 );  // High Byte
    return;
}

uint8_t PopS8()  {    
    uint8_t local_data_low;
  
    local_data_low = Read_Byte(register_SSP);
    register_SSP++;
    return local_data_low;
}

uint16_t PopS16()  {    
    uint8_t local_data_low;
    uint8_t local_data_high;
  
    local_data_high = PopS8();
    local_data_low  = PopS8();
    return( (local_data_high<<8) | local_data_low);
}


// ------------------------------------------------------
// Reset routine
// ------------------------------------------------------
//
void Reset_sequence()  {
  uint32_t q=0;


  // Allow for cartridge switching during chip reset
  //
  switch (cart)  {
    case 0:     for ( q=0; q<=0x3EFF ; q++ )   { internal_RAM[q+0xC000] = CARTRIDGE_0[q]; }   break;
    case 1:     for ( q=0; q<=0x3EFF ; q++ )   { internal_RAM[q+0xC000] = CARTRIDGE_1[q]; }   break;
    case 2:     for ( q=0; q<=0x3EFF ; q++ )   { internal_RAM[q+0xC000] = CARTRIDGE_2[q]; }   break;
    case 3:     for ( q=0; q<=0x3EFF ; q++ )   { internal_RAM[q+0xC000] = CARTRIDGE_3[q]; }   break;
  }

   // Copy ROM to internal memory
   for ( q=0xA000; q<=0xA008 ; q++ )   { internal_RAM[q] = Read_Byte(q); } 
    
  register_DP = 0;
  flag_i = 1;                                                       // Set I and F flags to mask interrupts
  flag_f = 1; 
  GPIO6_DR = (0xFFFF << 16) | 0x2008;                               // Debounce RDWR_n and disable Data bus buffer outputs
  nmi_latched = 0;
  nmi_enabled = 0;
    
    while (direct_reset_n==0) wait_for_CLK_falling_edge();          // Stay here until HALT_n and RESET_n de-aserted
  
  VMA_Cycle(3,0xFFFE);
    
  register_PC = Read_Word(0xFFFE);

  //for (uint16_t i=0; i<0x2000; i++)  internal_RAM[i]=0;  // Clear all RAM so that each reset is a Cold-Boot
    
    return;
}


// -------------------------------------------------
// NMI Handler     
// -------------------------------------------------
void NMI_Handler() {

  flag_e = 1;             // Stacking all state registers
  
  VMA_Cycle(1,0xFFFF);
  PushS16(register_PC);
  PushS16(register_USP);
  PushS16(register_Y);
  PushS16(register_X);
  PushS8(register_DP);
  PushS8(register_B);
  PushS8(register_A);
  PushS8(REGISTER_CC);
  flag_i = 1;
  flag_f = 1;
  VMA_Cycle(1,0xFFFF);
  register_PC = Read_Word(0xFFFC);
  VMA_Cycle(1,0xFFFF);
   nmi_latched=0;
  
    return;
}

// -------------------------------------------------
// INTR Handler     
// -------------------------------------------------
void IRQ_Handler() {

  flag_e = 1;             // Stacking all state registers
  
  VMA_Cycle(1,0xFFFF);
  PushS16(register_PC);
  PushS16(register_USP);
  PushS16(register_Y);
  PushS16(register_X);
  PushS8(register_DP);
  PushS8(register_B);
  PushS8(register_A);
  PushS8(REGISTER_CC);
  flag_i = 1;
  VMA_Cycle(1,0xFFFF);
  register_PC = Read_Word(0xFFF8);
  VMA_Cycle(1,0xFFFF);
  nmi_latched=0;
  
    return;
}

// -------------------------------------------------
// FINTR Handler     
// -------------------------------------------------
void FIRQ_Handler() {

  flag_e = 0;
  
  VMA_Cycle(1,0xFFFF);
  PushS16(register_PC);
  PushS8(REGISTER_CC);
  flag_i = 1;
  flag_f = 1;
  VMA_Cycle(1,0xFFFF);
  register_PC = Read_Word(0xFFF6);
  VMA_Cycle(1,0xFFFF);
  nmi_latched=0;
  
    return;
}


// -------------------------------------------------
// SWI Handler     
// -------------------------------------------------
void opcode_0x3F() {          // SWI

  flag_e = 1;             // Stacking all state registers
  
  VMA_Cycle(1,register_PC);
  VMA_Cycle(1,0xFFFF);
  PushS16(register_PC);
  PushS16(register_USP);
  PushS16(register_Y);
  PushS16(register_X);
  PushS8(register_DP);
  PushS8(register_B);
  PushS8(register_A);
  PushS8(REGISTER_CC);
  flag_i=1;
  flag_f=1;
  VMA_Cycle(1,0xFFFF);
       if (page3set==1) register_PC = Read_Word(0xFFF2);  // SWI3
  else if (page2set==1) register_PC = Read_Word(0xFFF4);  // SWI2
  else                  register_PC = Read_Word(0xFFFA);  // SWI

  VMA_Cycle(1,0xFFFF);
  page2set=0;
  page3set=0;
  
  return;
}

void opcode_0x3B ()   { VMA_Cycle(1,register_PC);             // RTI
                        UpdateFlags(PopS8());
            if (flag_e==1)  {
              register_A   = PopS8();
              register_B   = PopS8();
              register_DP  = PopS8();
              register_X   = PopS16();
              register_Y   = PopS16();
              register_USP = PopS16();
            }
            register_PC=PopS16();
            VMA_Cycle(1,register_USP);
            return;  } 
  
void opcode_0x13 ()   { VMA_Cycle(1,register_PC);             // SYNC
                        digitalWriteFast(PIN_ADDR_OE_n,0x1);
                        digitalWriteFast(PIN_DATA_OE_n,0x1);
                        pinMode(PIN_RDWR_n,          INPUT);
            VMA_Cycle(1,0xFFFF); 
                      while ( (direct_irq_n!=0) && (direct_firq_n!=0) && (direct_nmi_n!=0) )  wait_for_CLK_falling_edge();
                        digitalWriteFast(PIN_ADDR_OE_n,0x0);
                        pinMode(PIN_RDWR_n,          OUTPUT);
            VMA_Cycle(1,0xFFFF); 
            return;  } 
            


void opcode_0x3C ()   {                   // CWAI
  
  UpdateFlags(REGISTER_CC & Fetch_Opcode_Byte());
  VMA_Cycle(1,register_PC);  
  VMA_Cycle(1,0xFFFF);
  flag_e = 1;
  PushS16(register_PC);
  PushS16(register_USP);
  PushS16(register_Y);
  PushS16(register_X);
  PushS8(register_DP);
  PushS8(register_B);
  PushS8(register_A);
  PushS8(REGISTER_CC);
  VMA_Cycle(1,0xFFFF);
  while ( (direct_irq_n!=0) && (direct_firq_n!=0) && (direct_nmi_n!=0) )  wait_for_CLK_falling_edge();
    
       if (direct_nmi_n==0)                register_PC = Read_Word(0xFFFC);
  else if (flag_f==0 && direct_firq_n==0)  register_PC = Read_Word(0xFFF6);
  else if (flag_i==0 && direct_irq_n==0)   register_PC = Read_Word(0xFFF8);
  
  VMA_Cycle(1,0xFFFF);
  return;
}



void Set_Flags_Byte_NZ (uint8_t local_byte)   { 

  if ( (local_byte&0x80) != 0)  flag_n=1;  else flag_n=0;
  if ( (local_byte&0xFF) == 0)  flag_z=1;  else flag_z=0;
  
  return;
}


void Set_Flags_Word_NZ (uint16_t local_word)   {  
 
  if ( (local_word&0x8000) != 0)  flag_n=1;  else flag_n=0;
  if (  local_word         == 0)  flag_z=1;  else flag_z=0;
  
  return;
}

  
void opcode_0x12 ()   {  VMA_Cycle(1,register_PC);  return; } // NOP


void opcode_0x19 ()   {  // DAA
  uint8_t lsn;
  uint8_t msn;
  uint8_t cf=0;
    
  lsn = register_A & 0x0F;
  msn = (register_A & 0xF0) >> 4;
  
  if ( flag_h==1 || lsn>0x09 )                              cf = cf + 0x06;
  if ( flag_c==1 || msn>0x09  || (msn>0x08 && lsn>0x09 ) )  cf = cf + 0x60;
  
  temp16 = register_A + cf;
  
  if (temp16>0xFF) flag_c=1;
  
  register_A = (uint8_t) temp16;
  Set_Flags_Byte_NZ(register_A);
  
  VMA_Cycle(1,register_PC);  
  return;
}
  
  
void Branch_Handler(uint8_t local_condition)   {
  uint16_t offset;

  if (page2set==0) {  offset = Fetch_Opcode_Byte();
                    VMA_Cycle(1,0xFFFF);
                    if (local_condition==TRUE) register_PC = register_PC + Sign_Extend8(offset);
                   }
  else             {  offset = Fetch_Opcode_Word();
                    VMA_Cycle(1,0xFFFF);
                    if (local_condition==TRUE) { VMA_Cycle(1,0xFFFF);  register_PC = register_PC + offset;  }
                   }  
  page2set=0;          
  return;
} 


void opcode_0x21 ()   {             Branch_Handler(FALSE);                  return;  }  // BRN
void opcode_0x20 ()   {             Branch_Handler(TRUE);                   return;  }  // BRA
void opcode_0x16 ()   { page2set=1; Branch_Handler(TRUE);                   return;  }  // LBRA

void opcode_0x2B ()   { Branch_Handler(flag_n==1);                          return;  }  // BMI
void opcode_0x27 ()   { Branch_Handler(flag_z==1);                          return;  }  // BEQ
void opcode_0x29 ()   { Branch_Handler(flag_v==1);                          return;  }  // BVS
void opcode_0x25 ()   { Branch_Handler(flag_c==1);                          return;  }  // BCS
void opcode_0x2A ()   { Branch_Handler(flag_n==0);                          return;  }  // BPL
void opcode_0x26 ()   { Branch_Handler(flag_z==0);                          return;  }  // BNE
void opcode_0x28 ()   { Branch_Handler(flag_v==0);                          return;  }  // BVC
void opcode_0x24 ()   { Branch_Handler(flag_c==0);                          return;  }  // BCC

void opcode_0x2C ()   { Branch_Handler(flag_n==flag_v);                     return;  }  // BGE
void opcode_0x2E ()   { Branch_Handler( (flag_n==flag_v) && (flag_z==0) );  return;  }  // BGT
void opcode_0x22 ()   { Branch_Handler( (flag_z==0) && (flag_c==0) );       return;  }  // BHI
void opcode_0x2F ()   { Branch_Handler( (flag_n!=flag_v) || (flag_z==1) );  return;  }  // BLE
void opcode_0x23 ()   { Branch_Handler( (flag_z!=0) || (flag_c!=0) );       return;  }  // BLS
void opcode_0x2D ()   { Branch_Handler(flag_n!=flag_v);                     return;  }  // BLT

void opcode_0x8D ()   { uint16_t offset;
                        offset=Fetch_Opcode_Byte();                 // BSR
                        VMA_Cycle(1,0xFFFF); 
                        VMA_Cycle(1,offset); 
                        VMA_Cycle(1,0xFFFF); 
                        PushS16(register_PC);  
                        register_PC = register_PC + Sign_Extend8(offset);                
                        return;  } 


void opcode_0x17 ()   { uint16_t offset;
                        offset=Fetch_Opcode_Word();                 // LBSR
                        VMA_Cycle(2,0xFFFF); 
                        VMA_Cycle(1,offset); 
                        VMA_Cycle(1,0xFFFF); 
                        PushS16(register_PC);  
                        register_PC = register_PC + offset;                
                        return;  } 




void opcode_0x3A ()   { register_X = register_X + register_B;       // ABX
                        VMA_Cycle(1,register_PC);
                        VMA_Cycle(1,0xFFFF);
                        return;  } 
  

void opcode_0x39 ()   { VMA_Cycle(1,register_PC);                   // RTS
                        register_PC = PopS16();
                        VMA_Cycle(1,0xFFFF);
                        return;  } 
  
  


  
void opcode_0x37 ()   {                         // PULU
    uint8_t postbyte;
    
    postbyte = Fetch_Opcode_Byte();
    VMA_Cycle(2,0xFFFF);
    if ( (postbyte & 0x01) != 0)  UpdateFlags(PopS8());
    if ( (postbyte & 0x02) != 0)  register_A   = PopU8();
    if ( (postbyte & 0x04) != 0)  register_B   = PopU8();
    if ( (postbyte & 0x08) != 0)  register_DP  = PopU8();
    if ( (postbyte & 0x10) != 0)  register_X   = PopU16();
    if ( (postbyte & 0x20) != 0)  register_Y   = PopU16();
     if ( (postbyte & 0x40) != 0)  { register_SSP = PopU16(); nmi_enabled=1; }
    if ( (postbyte & 0x80) != 0)  register_PC  = PopU16();
    VMA_Cycle(1,0xFFFF);
  
  return;
}
  
void opcode_0x35 ()   {                         // PULS
    uint8_t postbyte;
    
    postbyte = Fetch_Opcode_Byte();
    VMA_Cycle(2,0xFFFF);
    nmi_enabled=1; // (undocumented)
    if ( (postbyte & 0x01) != 0)  UpdateFlags(PopS8());
    if ( (postbyte & 0x02) != 0)  register_A   = PopS8();
    if ( (postbyte & 0x04) != 0)  register_B   = PopS8();
    if ( (postbyte & 0x08) != 0)  register_DP  = PopS8();
    if ( (postbyte & 0x10) != 0)  register_X   = PopS16();
    if ( (postbyte & 0x20) != 0)  register_Y   = PopS16();
    if ( (postbyte & 0x40) != 0)  register_USP = PopS16();
    if ( (postbyte & 0x80) != 0)  register_PC  = PopS16();
    VMA_Cycle(1,0xFFFF);
  
  return;
}

void opcode_0x36 ()   {                         // PSHU
    uint8_t postbyte;
    
    postbyte = Fetch_Opcode_Byte();
    VMA_Cycle(2,0xFFFF);
    VMA_Cycle(1,register_SSP);
    if ( (postbyte & 0x80) != 0)  PushU16(register_PC);
    if ( (postbyte & 0x40) != 0)  PushU16(register_SSP);
    if ( (postbyte & 0x20) != 0)  PushU16(register_Y);
    if ( (postbyte & 0x10) != 0)  PushU16(register_X);
    if ( (postbyte & 0x08) != 0)  PushU8(register_DP);
    if ( (postbyte & 0x04) != 0)  PushU8(register_B);
    if ( (postbyte & 0x02) != 0)  PushU8(register_A);
    if ( (postbyte & 0x01) != 0)  PushU8(REGISTER_CC);
  
  return;
}

void opcode_0x34 ()   {                         // PSHS
    uint8_t postbyte;
    
    postbyte = Fetch_Opcode_Byte();
    VMA_Cycle(2,0xFFFF);
    VMA_Cycle(1,register_SSP);
    nmi_enabled=1; // (undocumented)
    if ( (postbyte & 0x80) != 0)  PushS16(register_PC);
    if ( (postbyte & 0x40) != 0)  PushS16(register_USP);
    if ( (postbyte & 0x20) != 0)  PushS16(register_Y);
    if ( (postbyte & 0x10) != 0)  PushS16(register_X);
    if ( (postbyte & 0x08) != 0)  PushS8(register_DP);
    if ( (postbyte & 0x04) != 0)  PushS8(register_B);
    if ( (postbyte & 0x02) != 0)  PushS8(register_A);
    if ( (postbyte & 0x01) != 0)  PushS8(REGISTER_CC);
  
  return;
}
  
    
uint16_t EXG_Read_Source(uint8_t reg_select)   {
  uint16_t source_value=0;
  
  switch (reg_select)  {
    case 0x0: source_value = REGISTER_D;                      break;
    case 0x1: source_value = register_X;                      break;
    case 0x2: source_value = register_Y;                      break;
    case 0x3: source_value = register_USP;                    break;
    case 0x4: source_value = register_SSP;                    break;
    case 0x5: source_value = register_PC;                     break;
    case 0x6: source_value = 0xEEEE;                          break;
    case 0x7: source_value = 0xEEEE;                          break;
    case 0x8: source_value = 0xFF00 | register_A;             break;
    case 0x9: source_value = 0xFF00 | register_B;             break;
    case 0xa: source_value = (REGISTER_CC<<8 | REGISTER_CC);  break;
    case 0xb: source_value = (register_DP<<8 | register_DP);  break;
    case 0xc: source_value = 0xEEEE;                          break;
    case 0xd: source_value = 0xEEEE;                          break;
    case 0xe: source_value = 0xEEEE;                          break;
    case 0xf: source_value = 0xEEEE;                          break;
  }
  return source_value;
}       

    
void EXG_Write_Destination(uint8_t reg_select, uint16_t write_value)   {
  
  switch (reg_select)  {
    case 0x0:   UpdateRegisterD(write_value);                  break;
    case 0x1: register_X       = write_value;                  break;
    case 0x2: register_Y       = write_value;                  break;
    case 0x3: register_USP     = write_value;                  break;
    case 0x4: register_SSP     = write_value;  nmi_enabled=1;  break;
    case 0x5: register_PC      = write_value;                  break;
                      
    case 0x8: register_A       = write_value;                  break;
    case 0x9: register_B       = write_value;                  break;
    case 0xA:        UpdateFlags(write_value);                 break;
    case 0xB: register_DP      = write_value;                  break;
 
  }
  return;
}       

void opcode_0x1E ()   {                         // EXG
    uint8_t  postbyte;
    uint8_t  reg_upper;
    uint8_t  reg_lower;
    uint16_t upper_value;
    uint16_t lower_value;
        
    postbyte = Fetch_Opcode_Byte();
    VMA_Cycle(6,0xFFFF);
    reg_upper = postbyte >>   4;
    reg_lower = postbyte & 0x0F;
    
    upper_value = EXG_Read_Source(reg_upper);
    lower_value = EXG_Read_Source(reg_lower);
    
    EXG_Write_Destination(reg_upper , lower_value);
    EXG_Write_Destination(reg_lower , upper_value);
    
  return;
} 

void opcode_0x1F ()   {                         // TFR
    uint8_t  postbyte;
    uint8_t  reg_upper;
    uint8_t  reg_lower;
    uint16_t upper_value;
        
    postbyte = Fetch_Opcode_Byte();
    VMA_Cycle(4,0xFFFF);
    reg_upper = postbyte >>   4;
    reg_lower = postbyte & 0x0F;
    
    upper_value = EXG_Read_Source(reg_upper);
    
    EXG_Write_Destination(reg_lower , upper_value);
    
  return;
}       

 

void opcode_0x1D ()   { VMA_Cycle(1,register_PC);           // SEX
                        UpdateRegisterD(Sign_Extend8(register_B));
                        Set_Flags_Byte_NZ(register_B);
                        return;  } 
    



uint16_t FetchReg_EA(uint8_t local_postbyte)   {
  uint16_t local_regval;

   switch ((local_postbyte&0x60)>>5)  {
     case 0x0:  local_regval = register_X;      break;
     case 0x1:  local_regval = register_Y;      break;
     case 0x2:  local_regval = register_USP;    break;
     case 0x3:  local_regval = register_SSP;    break;
   }
   return local_regval;
}
    

void WBReg_EA(uint8_t local_postbyte , uint16_t local_data)   {

   switch ((local_postbyte&0x60)>>5)  {
     case 0x0:  register_X   = local_data;    break;
     case 0x1:  register_Y   = local_data;    break;
     case 0x2:  register_USP = local_data;    break;
     case 0x3:  register_SSP = local_data;  nmi_enabled=1;   break;// (undocumented)
  
   }
   return;
}



// Calculate Effective Address - EA
// -------------------------------------
uint16_t Calculate_EA(uint8_t ea_type)   {
  uint16_t  local_offset;
  uint8_t   local_postbyte;
  uint16_t  local_postword;
  uint16_t  local_ea = 0xEEEE;


   switch (ea_type)  {
     case DIRECT:    local_postbyte=Fetch_Opcode_Byte();  VMA_Cycle(1,0xFFFF);  local_ea=((register_DP<<8) | local_postbyte);    break;
     case EXTENDED:  local_postword=Fetch_Opcode_Word();  VMA_Cycle(1,0xFFFF);  local_ea=local_postword;                         break;
     
     case INDEXED:   local_postbyte=Fetch_Opcode_Byte();
     
                     if ( (local_postbyte&0x80) == 0)  { VMA_Cycle(2,0xFFFF);  local_ea=(FetchReg_EA(local_postbyte) + Sign_Extend5(local_postbyte&0x1F) );   }  // Non-Indirect Register 5-bit offset
                     else  {
               
        switch (local_postbyte&0x1F)  {   
               
  case 0x04: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(1,register_PC);  local_ea=local_offset;                                                                                                      break;  // Non-Indirect Register no offset
  case 0x14: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(1,register_PC);  local_ea=Read_Word(local_offset);                                                                  VMA_Cycle(1,0xFFFF);     break;  // Indirect Register no offset
                                                                                                                                                                                            
  case 0x08: local_offset=Fetch_Opcode_Byte();                VMA_Cycle(1,0xFFFF);  local_ea=          (FetchReg_EA(local_postbyte) + Sign_Extend8(local_offset) );                                                  break;  // Non-Indirect Register 8-bit offset
  case 0x18: local_offset=Fetch_Opcode_Byte();                VMA_Cycle(1,0xFFFF);  local_ea=Read_Word((FetchReg_EA(local_postbyte) + Sign_Extend8(local_offset) ));                        VMA_Cycle(1,0xFFFF);     break;  // Indirect Register 8-bit offset
                                                                                                                                                                                            
  case 0x09: local_offset=Fetch_Opcode_Word();                VMA_Cycle(3,0xFFFF);  local_ea=          (FetchReg_EA(local_postbyte) + local_offset );                                                                break;  // Non-Indirect Register 16-bit offset
  case 0x19: local_offset=Fetch_Opcode_Word();                VMA_Cycle(3,0xFFFF);  local_ea=Read_Word((FetchReg_EA(local_postbyte) + local_offset ));                                      VMA_Cycle(1,0xFFFF);     break;  // Indirect Register 16-bit offset
                                                                                                                                                                                            
                                                                                                                                                                                            
  case 0x06: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(2,0xFFFF);  local_ea= Sign_Extend8(register_A) + local_offset;                                                                               break;  // Non-Indirect A Accumulator offset
  case 0x07: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(2,0xFFFF);  local_ea= Sign_Extend8(register_A) + local_offset;                                                                               break;  // Non-Indirect A Accumulator offset (undocumented)
  case 0x05: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(2,0xFFFF);  local_ea= Sign_Extend8(register_B) + local_offset;                                                                               break;  // Non-Indirect B Accumulator offset
  case 0x0B: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(5,0xFFFF);  local_ea= REGISTER_D + local_offset;                                                                                             break;  // Non-Indirect D Accumulator offset
                                                                                                                                                                                            
                                                                                                                                                                                            
  case 0x16: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(2,0xFFFF);  local_ea= Read_Word(Sign_Extend8(register_A) + local_offset);                                           VMA_Cycle(1,0xFFFF);     break;  // Indirect A Accumulator offset
  case 0x15: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(2,0xFFFF);  local_ea= Read_Word(Sign_Extend8(register_B) + local_offset);                                           VMA_Cycle(1,0xFFFF);     break;  // Indirect B Accumulator offset
  case 0x1B: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(5,0xFFFF);  local_ea= Read_Word(REGISTER_D + local_offset);                                                         VMA_Cycle(1,0xFFFF);     break;  // Indirect D Accumulator offset
                                                                                                       
                                                                                                       
  case 0x00: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(3,0xFFFF);  local_ea= local_offset;             WBReg_EA(local_postbyte,local_offset+1);                                                     break;  // Non-Indirect Post-Increment by 1
                                                                                                       
  case 0x01: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(3,0xFFFF);  local_ea= local_offset;             WBReg_EA(local_postbyte,local_offset+2);                                                     break;  // Non-Indirect Post-Increment by 2
  case 0x11: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(4,0xFFFF);  local_ea= Read_Word(local_offset);  WBReg_EA(local_postbyte,local_offset+2);                            VMA_Cycle(1,0xFFFF);     break;  // Indirect Post-Increment by 2
                                                                                                       
                                                                                                       
  case 0x02: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(3,0xFFFF); local_offset=local_offset-1;  local_ea= local_offset;             WBReg_EA(local_postbyte,local_offset);                          break;  // Non-Indirect Pre-Decrement by 1
                                                                                                        
  case 0x03: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(3,0xFFFF); local_offset=local_offset-2;  local_ea= local_offset;             WBReg_EA(local_postbyte,local_offset);                          break;  // Non-Indirect Pre-Decrement by 2
  case 0x13: local_offset=FetchReg_EA(local_postbyte);        VMA_Cycle(4,0xFFFF); local_offset=local_offset-2;  local_ea= Read_Word(local_offset);  WBReg_EA(local_postbyte,local_offset); VMA_Cycle(1,0xFFFF);     break;  // Indirect Pre-Decrement by 2
                                                                                                    
                                                                                                    
  case 0x0C: local_offset=Sign_Extend8(Fetch_Opcode_Byte());  VMA_Cycle(1,0xFFFF);  local_ea=register_PC+local_offset;                                                                                               break;  // Non-Indirect Constant 8-bit  Offset from PC
  case 0x1C: local_offset=Sign_Extend8(Fetch_Opcode_Byte());  VMA_Cycle(1,0xFFFF);  local_ea=Read_Word(register_PC+local_offset);                                                           VMA_Cycle(1,0xFFFF);     break;  // Indirect Constant 8-bit  Offset from PC
                                                                                                                                                                                            
  case 0x0D: local_offset=Fetch_Opcode_Word();                VMA_Cycle(4,0xFFFF);  local_ea=register_PC+local_offset;                                                                                               break;  // Non-IndirectConstant 16-bit Offset from PC
  case 0x1D: local_offset=Fetch_Opcode_Word();                VMA_Cycle(4,0xFFFF);  local_ea=Read_Word(register_PC+local_offset);                                                           VMA_Cycle(1,0xFFFF);     break;  // Indirect Constant 16-bit Offset from PC
                                                                                                                                                                                            
  case 0x1F: local_offset=Fetch_Opcode_Word();                VMA_Cycle(1,register_PC);  local_ea=Read_Word(local_offset);                                                                  VMA_Cycle(1,0xFFFF);     break;  // Extended Indirect
           
            
   }
   }
   }
    
   return local_ea;
}

    
uint8_t ASL_Common(uint8_t local_byte)   {
  flag_c = local_byte >> 7;
  if ( ((local_byte&0xC0) == 0x80) || ((local_byte&0xC0) == 0x40) )  flag_v=1; else flag_v=0;
  local_byte = local_byte << 1;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
}   
void opcode_0x48 ()  {  VMA_Cycle(1,register_PC);                                        register_A = ASL_Common(register_A);                                                        return;  }   // ASLA
void opcode_0x58 ()  {  VMA_Cycle(1,register_PC);                                        register_B = ASL_Common(register_B);                                                        return;  }   // ASLB
void opcode_0x08 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  ea_data8=ASL_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ASL Direct         
void opcode_0x68 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  ea_data8=ASL_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ASL Indexed          
void opcode_0x78 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  ea_data8=ASL_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ASL Extended         
    
    

uint8_t ASR_Common(uint8_t local_byte)   {  
  temp8 = local_byte & 0x80;
  flag_c = local_byte & 0x01;
  local_byte = local_byte >> 1;
  local_byte = temp8 | local_byte;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
}
void opcode_0x47 ()  {  VMA_Cycle(1,register_PC);                                        register_A = ASR_Common(register_A);                                                        return;  }   // ASRA
void opcode_0x57 ()  {  VMA_Cycle(1,register_PC);                                        register_B = ASR_Common(register_B);                                                        return;  }   // ASRB
void opcode_0x07 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  ea_data8=ASR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ASR Direct         
void opcode_0x67 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  ea_data8=ASR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ASR Indexed          
void opcode_0x77 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  ea_data8=ASR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ASR Extended         
  

    
void CLR_Common()   {
  VMA_Cycle(1,register_PC);
  flag_n = 0;
  flag_z = 1;
  flag_v = 0;
  flag_c = 0;
  return;
} 
void opcode_0x4F ()   { CLR_Common();   register_A = 0;                                                                                                         return;  }      // CLRA
void opcode_0x5F ()   { CLR_Common();   register_B = 0;                                                                                                         return;  }      // CLRB
void opcode_0x0F ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,0x00);  CLR_Common();  return;  }  // CLR DIRECT
void opcode_0x6F ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,0x00);  CLR_Common();  return;  }  // CLR INDEXED
void opcode_0x7F ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,0x00);  CLR_Common();  return;  }  // CLR EXTENDED
                        


  
uint8_t COM_Common(uint8_t local_byte)   {
  VMA_Cycle(1,register_PC);
  local_byte = ~local_byte;
  flag_v = 0;
  flag_c = 1;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
} 
void opcode_0x43 ()   { register_A = COM_Common(register_A);                                                                                                     return;  }      // COMA
void opcode_0x53 ()   { register_B = COM_Common(register_B);                                                                                                     return;  }      // COMB
void opcode_0x03 ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,COM_Common(ea_data8));  return;  }  // COM DIRECT
void opcode_0x63 ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,COM_Common(ea_data8));  return;  }  // COM INDEXED
void opcode_0x73 ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,COM_Common(ea_data8));  return;  }  // COM EXTENDED
                        

  
uint8_t DEC_Common(uint8_t local_byte)   {
  VMA_Cycle(1,register_PC);
  if (local_byte == 0x80) flag_v=1; else flag_v=0;
  local_byte--;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
} 
void opcode_0x4A ()   { register_A = DEC_Common(register_A);                                                                                                     return;  }      // DECA
void opcode_0x5A ()   { register_B = DEC_Common(register_B);                                                                                                     return;  }      // DECB
void opcode_0x0A ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,DEC_Common(ea_data8));  return;  }  // DEC DIRECT
void opcode_0x6A ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,DEC_Common(ea_data8));  return;  }  // DEC INDEXED
void opcode_0x7A ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,DEC_Common(ea_data8));  return;  }  // DEC EXTENDED
                        

  
  
uint8_t INC_Common(uint8_t local_byte)   {
  VMA_Cycle(1,register_PC);
  if (local_byte == 0x7F) flag_v=1; else flag_v=0;
  local_byte++;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
} 
void opcode_0x4C ()   { register_A = INC_Common(register_A);                                                                                                     return;  }      // INCA
void opcode_0x5C ()   { register_B = INC_Common(register_B);                                                                                                     return;  }      // INCB
void opcode_0x0C ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,INC_Common(ea_data8));  return;  }  // INC DIRECT
void opcode_0x6C ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,INC_Common(ea_data8));  return;  }  // INC INDEXED
void opcode_0x7C ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,INC_Common(ea_data8));  return;  }  // INC EXTENDED
                        
    

uint8_t LSR_Common(uint8_t local_byte)   {
  flag_c = local_byte & 0x01;
  local_byte = local_byte >> 1;
  Set_Flags_Byte_NZ(local_byte);
  flag_n = 0;
  return local_byte;
}
void opcode_0x44 ()  {  VMA_Cycle(1,register_PC);                                        register_A = LSR_Common(register_A);                                                        return;  }   // LSRA
void opcode_0x54 ()  {  VMA_Cycle(1,register_PC);                                        register_B = LSR_Common(register_B);                                                        return;  }   // LSRB
void opcode_0x04 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  ea_data8=LSR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // LSR Direct         
void opcode_0x64 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  ea_data8=LSR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // LSR Indexed          
void opcode_0x74 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  ea_data8=LSR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // LSR Extended         
  
  
uint8_t NEG_Common(uint8_t local_byte)   {
  VMA_Cycle(1,register_PC);
  if (local_byte==0x00) flag_c=0; else flag_c=1;
  if (local_byte==0x80) flag_v=1; else flag_v=0;
  local_byte = 0 - local_byte;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
} 
void opcode_0x40 ()   { register_A = NEG_Common(register_A);                                                                                                     return;  }      // NEGA
void opcode_0x50 ()   { register_B = NEG_Common(register_B);                                                                                                     return;  }      // NEGB
void opcode_0x00 ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NEG_Common(ea_data8));  return;  }  // NEG DIRECT
void opcode_0x60 ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NEG_Common(ea_data8));  return;  }  // NEG INDEXED
void opcode_0x70 ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NEG_Common(ea_data8));  return;  }  // NEG EXTENDED
 
 

    

uint8_t ROL_Common(uint8_t local_byte)   {
  uint8_t old_c;
  
  old_c = flag_c;
  flag_c = local_byte >> 7;
  if ( ((local_byte&0xC0) == 0x80) || ((local_byte&0xC0) == 0x40)  ) flag_v=1; else flag_v=0;
  local_byte = local_byte << 1;
  local_byte = local_byte | old_c;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
}
void opcode_0x49 ()  {  VMA_Cycle(1,register_PC);                                        register_A = ROL_Common(register_A);                                                        return;  }   // ROLA
void opcode_0x59 ()  {  VMA_Cycle(1,register_PC);                                        register_B = ROL_Common(register_B);                                                        return;  }   // ROLB
void opcode_0x09 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  ea_data8=ROL_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ROL Direct         
void opcode_0x69 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  ea_data8=ROL_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ROL Indexed          
void opcode_0x79 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  ea_data8=ROL_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ROL Extended         
  
      
    
uint8_t ROR_Common(uint8_t local_byte)   {
  uint8_t old_c;
  
  old_c = flag_c;
  flag_c = local_byte & 0x01;
  local_byte = local_byte >> 1;
  local_byte = (old_c<<7) | local_byte;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
}
void opcode_0x46 ()  {  VMA_Cycle(1,register_PC);                                        register_A = ROR_Common(register_A);                                                        return;  }   // RORA
void opcode_0x56 ()  {  VMA_Cycle(1,register_PC);                                        register_B = ROR_Common(register_B);                                                        return;  }   // RORB
void opcode_0x06 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  ea_data8=ROR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ROR Direct         
void opcode_0x66 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  ea_data8=ROR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ROR Indexed          
void opcode_0x76 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  ea_data8=ROR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // ROR Extended         
  
  

void TST_Common(uint8_t local_byte)   {
  flag_v = 0;
  Set_Flags_Byte_NZ(local_byte);
  return;
}
void opcode_0x4D ()  {  VMA_Cycle(1,register_PC);                                            TST_Common(register_A);                                              return;  }   // TSTA
void opcode_0x5D ()  {  VMA_Cycle(1,register_PC);                                            TST_Common(register_B);                                              return;  }   // TSTB
void opcode_0x0D ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  TST_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  VMA_Cycle(1,0xFFFF);    return;  }   // TST Direct         
void opcode_0x6D ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  TST_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  VMA_Cycle(1,0xFFFF);    return;  }   // TST Indexed          
void opcode_0x7D ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  TST_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  VMA_Cycle(1,0xFFFF);    return;  }   // TST Extended         
  


  

uint8_t AND_Common(uint8_t local_byte1, uint8_t local_byte2)   {
  local_byte1 = local_byte1 & local_byte2;
  flag_v = 0;
  Set_Flags_Byte_NZ(local_byte1);
  return local_byte1;
}
void opcode_0x84 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_A = AND_Common(register_A,ea_data8);     return;  }   // ANDA Immediate         
void opcode_0x94 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_A = AND_Common(register_A,ea_data8);     return;  }   // ANDA Direct          
void opcode_0xA4 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_A = AND_Common(register_A,ea_data8);     return;  }   // ANDA Indexed         
void opcode_0xB4 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_A = AND_Common(register_A,ea_data8);     return;  }   // ANDA Extended  

void opcode_0xC4 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_B = AND_Common(register_B,ea_data8);     return;  }   // ANDB Immediate         
void opcode_0xD4 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_B = AND_Common(register_B,ea_data8);     return;  }   // ANDB Direct          
void opcode_0xE4 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_B = AND_Common(register_B,ea_data8);     return;  }   // ANDB Indexed         
void opcode_0xF4 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_B = AND_Common(register_B,ea_data8);     return;  }   // ANDB Extended  

void opcode_0x85 ()  {                                      ea_data8=Fetch_Opcode_Byte();    temp8 = AND_Common(register_A,ea_data8);          return;  }   // BITA Immediate         
void opcode_0x95 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  temp8 = AND_Common(register_A,ea_data8);          return;  }   // BITA Direct          
void opcode_0xA5 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  temp8 = AND_Common(register_A,ea_data8);          return;  }   // BITA Indexed         
void opcode_0xB5 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  temp8 = AND_Common(register_A,ea_data8);          return;  }   // BITA Extended  
                                                                         
void opcode_0xC5 ()  {                                      ea_data8=Fetch_Opcode_Byte();    temp8 = AND_Common(register_B,ea_data8);          return;  }   // BITB Immediate         
void opcode_0xD5 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  temp8 = AND_Common(register_B,ea_data8);          return;  }   // BITB Direct          
void opcode_0xE5 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  temp8 = AND_Common(register_B,ea_data8);          return;  }   // BITB Indexed         
void opcode_0xF5 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  temp8 = AND_Common(register_B,ea_data8);          return;  }   // BITB Extended  

void opcode_0x1C ()  {                                      ea_data8=Fetch_Opcode_Byte();    UpdateFlags( AND_Common(REGISTER_CC,ea_data8) );  return;  }   // ANDCC Immediate          


uint8_t OR_Common(uint8_t local_byte1, uint8_t local_byte2)   {
  local_byte1 = local_byte1 | local_byte2;
  flag_v = 0;
  Set_Flags_Byte_NZ(local_byte1);
  return local_byte1;
}
void opcode_0x8A ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_A = OR_Common(register_A,ea_data8);     return;  }   // ORA Immediate         
void opcode_0x9A ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_A = OR_Common(register_A,ea_data8);     return;  }   // ORA Direct          
void opcode_0xAA ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_A = OR_Common(register_A,ea_data8);     return;  }   // ORA Indexed         
void opcode_0xBA ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_A = OR_Common(register_A,ea_data8);     return;  }   // ORA Extended  
                                                                                
void opcode_0xCA ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_B = OR_Common(register_B,ea_data8);     return;  }   // ORB Immediate         
void opcode_0xDA ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_B = OR_Common(register_B,ea_data8);     return;  }   // ORB Direct          
void opcode_0xEA ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_B = OR_Common(register_B,ea_data8);     return;  }   // ORB Indexed         
void opcode_0xFA ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_B = OR_Common(register_B,ea_data8);     return;  }   // ORB Extended  
                                                                                 
void opcode_0x1A ()  {                                      ea_data8=Fetch_Opcode_Byte();    UpdateFlags( OR_Common(REGISTER_CC,ea_data8) );  return;  }   // ORCC Immediate          



uint8_t EOR_Common(uint8_t local_byte1, uint8_t local_byte2)   {
  local_byte1 = local_byte1 ^ local_byte2;
  flag_v = 0;
  Set_Flags_Byte_NZ(local_byte1);
  return local_byte1;
}
void opcode_0x88 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_A = EOR_Common(register_A,ea_data8);     return;  }   // EORA Immediate         
void opcode_0x98 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_A = EOR_Common(register_A,ea_data8);     return;  }   // EORA Direct          
void opcode_0xA8 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_A = EOR_Common(register_A,ea_data8);     return;  }   // EORA Indexed         
void opcode_0xB8 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_A = EOR_Common(register_A,ea_data8);     return;  }   // EORA Extended  
                                                                                  
void opcode_0xC8 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_B = EOR_Common(register_B,ea_data8);     return;  }   // EORB Immediate         
void opcode_0xD8 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_B = EOR_Common(register_B,ea_data8);     return;  }   // EORB Direct          
void opcode_0xE8 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_B = EOR_Common(register_B,ea_data8);     return;  }   // EORB Indexed         
void opcode_0xF8 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_B = EOR_Common(register_B,ea_data8);     return;  }   // EORB Extended  
                                                                                  

void opcode_0x3D ()   {                         // MUL
  uint16_t product;
  
  VMA_Cycle(1,register_PC);           
  
  product = register_A * register_B;
  UpdateRegisterD(product);
  if (product==0) flag_z=1; else flag_z=0;
  flag_c = register_B >> 7;

  VMA_Cycle(9,0xFFFF);
  return;  
}



uint8_t ADD8_Common(uint8_t local_byte1, uint8_t local_byte2, uint8_t local_carry)   {
  uint8_t  operand0=0;
  uint8_t  operand1=0;
  uint8_t  result=0;
  
  temp8  = (local_byte1&0x0F) + (local_byte2&0x0F) + local_carry;
  if (temp8>0xF)  flag_h = 1; else flag_h = 0;
    
  temp16 = local_byte1 + local_byte2 + local_carry;
  if (temp16>0xFF)  flag_c = 1; else flag_c = 0;
  
  operand0 = (local_byte1  & 0x80);  
  operand1 = (local_byte2  & 0x80);  
  result   = (temp16       & 0x80); 
  flag_v = 0;
  if      (operand0==0 && operand1==0 && result!=0)  flag_v = 1; 
  else if (operand0!=0 && operand1!=0 && result==0)  flag_v = 1;      

  Set_Flags_Byte_NZ(temp16);
  return (temp16&0xFF);
}
void opcode_0x8B ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_A = ADD8_Common(register_A,ea_data8,0);         return;  }   // ADDA Immediate          
void opcode_0x9B ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_A = ADD8_Common(register_A,ea_data8,0);         return;  }   // ADDA Direct         
void opcode_0xAB ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_A = ADD8_Common(register_A,ea_data8,0);         return;  }   // ADDA Indexed          
void opcode_0xBB ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_A = ADD8_Common(register_A,ea_data8,0);         return;  }   // ADDA Extended 

void opcode_0x89 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_A = ADD8_Common(register_A,ea_data8,flag_c);    return;  }   // ADCA Immediate          
void opcode_0x99 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_A = ADD8_Common(register_A,ea_data8,flag_c);    return;  }   // ADCA Direct         
void opcode_0xA9 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_A = ADD8_Common(register_A,ea_data8,flag_c);    return;  }   // ADCA Indexed          
void opcode_0xB9 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_A = ADD8_Common(register_A,ea_data8,flag_c);    return;  }   // ADCA Extended 
    
    
void opcode_0xCB ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_B = ADD8_Common(register_B,ea_data8,0);         return;  }   // ADDBB Immediate         
void opcode_0xDB ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_B = ADD8_Common(register_B,ea_data8,0);         return;  }   // ADDBB Direct          
void opcode_0xEB ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_B = ADD8_Common(register_B,ea_data8,0);         return;  }   // ADDBB Indexed         
void opcode_0xFB ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_B = ADD8_Common(register_B,ea_data8,0);         return;  }   // ADDBB Extended  
    
void opcode_0xC9 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_B = ADD8_Common(register_B,ea_data8,flag_c);    return;  }   // ADCBB Immediate         
void opcode_0xD9 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_B = ADD8_Common(register_B,ea_data8,flag_c);    return;  }   // ADCBB Direct          
void opcode_0xE9 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_B = ADD8_Common(register_B,ea_data8,flag_c);    return;  }   // ADCBB Indexed         
void opcode_0xF9 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_B = ADD8_Common(register_B,ea_data8,flag_c);    return;  }   // ADCBB Extended  
  
  
uint16_t ADD16_Common(uint16_t local_word1, uint16_t local_word2, uint16_t local_carry)   {
  uint8_t  operand0=0;
  uint8_t  operand1=0;
  uint8_t  result=0;
  uint32_t temp32=0;
    
  temp32 = local_word1 + local_word2 + local_carry;
  if (temp32>0xFFFF)  flag_c = 1; else flag_c = 0;
  
  operand0 = (local_word1  & 0x8000);  
  operand1 = (local_word2  & 0x8000);  
  result   = (temp32       & 0x8000); 
  flag_v = 0;
  if      (operand0==0 && operand1==0 && result!=0)  flag_v = 1; 
  else if (operand0!=0 && operand1!=0 && result==0)  flag_v = 1;     

  Set_Flags_Word_NZ(temp32);    
  return (temp32&0xFFFF);
} 
void opcode_0xC3 ()  {                                      ea_data16=Fetch_Opcode_Word();    UpdateRegisterD(ADD16_Common(REGISTER_D,ea_data16,0)); VMA_Cycle(1,0xFFFF);  return;  }   // ADDD Immediate         
void opcode_0xD3 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data16=Read_Word(ea_address);  UpdateRegisterD(ADD16_Common(REGISTER_D,ea_data16,0)); VMA_Cycle(1,0xFFFF);  return;  }   // ADDD Direct          
void opcode_0xE3 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data16=Read_Word(ea_address);  UpdateRegisterD(ADD16_Common(REGISTER_D,ea_data16,0)); VMA_Cycle(1,0xFFFF);  return;  }   // ADDD Indexed         
void opcode_0xF3 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data16=Read_Word(ea_address);  UpdateRegisterD(ADD16_Common(REGISTER_D,ea_data16,0)); VMA_Cycle(1,0xFFFF);  return;  }   // ADDD Extended  
  
  
uint8_t SUB8_Common(uint8_t local_byte1, uint8_t local_byte2, uint8_t local_carry)   {
  uint8_t  operand0=0;
  uint8_t  operand1=0;
  uint8_t  result=0;
  
  temp8  = (local_byte1&0x0F) - (local_byte2&0x0F) - local_carry;
  if (temp8>0xF)  flag_h = 1; else flag_h = 0;
    
  temp16 = local_byte1 - local_byte2 - local_carry;
  if (temp16>0xFF)  flag_c = 1; else flag_c = 0;
  
  operand0 = (local_byte1  & 0x80);  
  operand1 = (local_byte2  & 0x80);  
  result   = (temp16       & 0x80); 
  flag_v = 0;
  if      (operand0==0 && operand1!=0 && result!=0)   flag_v = 1; 
  else if (operand0!=0 && operand1==0 && result==0)   flag_v = 1;    

  Set_Flags_Byte_NZ(temp16);  
  return (temp16&0xFF);
}
void opcode_0x80 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_A = SUB8_Common(register_A,ea_data8,0);         return;  }   // SUBA Immediate          
void opcode_0x90 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_A = SUB8_Common(register_A,ea_data8,0);         return;  }   // SUBA Direct         
void opcode_0xA0 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_A = SUB8_Common(register_A,ea_data8,0);         return;  }   // SUBA Indexed          
void opcode_0xB0 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_A = SUB8_Common(register_A,ea_data8,0);         return;  }   // SUBA Extended 
                                                   
void opcode_0x82 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_A = SUB8_Common(register_A,ea_data8,flag_c);    return;  }   // SBCA Immediate          
void opcode_0x92 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_A = SUB8_Common(register_A,ea_data8,flag_c);    return;  }   // SBCA Direct         
void opcode_0xA2 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_A = SUB8_Common(register_A,ea_data8,flag_c);    return;  }   // SBCA Indexed          
void opcode_0xB2 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_A = SUB8_Common(register_A,ea_data8,flag_c);    return;  }   // SBCA Extended                                                        
                                                       
void opcode_0xC0 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_B = SUB8_Common(register_B,ea_data8,0);         return;  }   // SUBB Immediate          
void opcode_0xD0 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_B = SUB8_Common(register_B,ea_data8,0);         return;  }   // SUBB Direct         
void opcode_0xE0 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_B = SUB8_Common(register_B,ea_data8,0);         return;  }   // SUBB Indexed          
void opcode_0xF0 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_B = SUB8_Common(register_B,ea_data8,0);         return;  }   // SUBB Extended 

void opcode_0xC2 ()  {                                      ea_data8=Fetch_Opcode_Byte();    register_B = SUB8_Common(register_B,ea_data8,flag_c);    return;  }   // SBCB Immediate          
void opcode_0xD2 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  register_B = SUB8_Common(register_B,ea_data8,flag_c);    return;  }   // SBCB Direct         
void opcode_0xE2 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  register_B = SUB8_Common(register_B,ea_data8,flag_c);    return;  }   // SBCB Indexed          
void opcode_0xF2 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  register_B = SUB8_Common(register_B,ea_data8,flag_c);    return;  }   // SBCB Extended 


void opcode_0x81 ()  {                                      ea_data8=Fetch_Opcode_Byte();    temp8 = SUB8_Common(register_A,ea_data8,0);              return;  }   // CMPA Immediate          
void opcode_0x91 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  temp8 = SUB8_Common(register_A,ea_data8,0);              return;  }   // CMPA Direct         
void opcode_0xA1 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  temp8 = SUB8_Common(register_A,ea_data8,0);              return;  }   // CMPA Indexed          
void opcode_0xB1 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  temp8 = SUB8_Common(register_A,ea_data8,0);              return;  }   // CMPA Extended 

void opcode_0xC1 ()  {                                      ea_data8=Fetch_Opcode_Byte();    temp8 = SUB8_Common(register_B,ea_data8,0);              return;  }   // CMPB Immediate          
void opcode_0xD1 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  temp8 = SUB8_Common(register_B,ea_data8,0);              return;  }   // CMPB Direct         
void opcode_0xE1 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  temp8 = SUB8_Common(register_B,ea_data8,0);              return;  }   // CMPB Indexed          
void opcode_0xF1 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  temp8 = SUB8_Common(register_B,ea_data8,0);              return;  }   // CMPB Extended 


  
  
uint16_t SUB16_Common(uint16_t local_word1, uint16_t local_word2, uint16_t local_carry)   {
  uint8_t  operand0=0;
  uint8_t  operand1=0;
  uint8_t  result=0;
  uint32_t temp32=0;
    
  temp32 = local_word1 - local_word2 - local_carry;
  if (temp32>0xFFFF)  flag_c = 1; else flag_c = 0;
  
  operand0 = (local_word1  & 0x8000);  
  operand1 = (local_word2  & 0x8000);  
  result   = (temp32       & 0x8000); 
  flag_v = 0;
  if      (operand0==0 && operand1==0 && result!=0)  flag_v = 1; 
  else if (operand0!=0 && operand1!=0 && result==0)  flag_v = 1;   

  Set_Flags_Word_NZ(temp32);   
  return (temp32&0xFFFF);
} 
void opcode_0x83 ()  {  if (page3set==1) {                                    ea_data16=Fetch_Opcode_Word();             temp16=SUB16_Common(register_USP,ea_data16,0);  VMA_Cycle(1,0xFFFF);  page3set=0;  return;  }    // CMPU Immediate 
                   else if (page2set==1) {                                    ea_data16=Fetch_Opcode_Word();             temp16=SUB16_Common(REGISTER_D,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }    // CMPD Immediate 
                   else if (page2set==0) {                                    ea_data16=Fetch_Opcode_Word();    UpdateRegisterD(SUB16_Common(REGISTER_D,ea_data16,0));   VMA_Cycle(1,0xFFFF);  page2set=0;  return;  } }  // SUBD Immediate         
                                                                 
void opcode_0x93 ()  {  if (page3set==1) { ea_address=Calculate_EA(DIRECT);   ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_USP,ea_data16,0);  VMA_Cycle(1,0xFFFF);  page3set=0;  return;  }    // CMPU Direct  
                   else if (page2set==1) { ea_address=Calculate_EA(DIRECT);   ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(REGISTER_D,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }    // CMPD Direct  
                   else if (page2set==0) { ea_address=Calculate_EA(DIRECT);   ea_data16=Read_Word(ea_address);  UpdateRegisterD(SUB16_Common(REGISTER_D,ea_data16,0));   VMA_Cycle(1,0xFFFF);  page2set=0;  return;  } }  // SUBD Direct  
                                                                 
void opcode_0xA3 ()  {  if (page3set==1) { ea_address=Calculate_EA(INDEXED);  ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_USP,ea_data16,0);  VMA_Cycle(1,0xFFFF);  page3set=0;  return;  }    // CMPU Indexed 
                   else if (page2set==1) { ea_address=Calculate_EA(INDEXED);  ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(REGISTER_D,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }    // CMPD Indexed 
                   else if (page2set==0) { ea_address=Calculate_EA(INDEXED);  ea_data16=Read_Word(ea_address);  UpdateRegisterD(SUB16_Common(REGISTER_D,ea_data16,0));   VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }  } // SUBD Indexed 
                                                                 
void opcode_0xB3 ()  {  if (page3set==1) { ea_address=Calculate_EA(EXTENDED); ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_USP,ea_data16,0);  VMA_Cycle(1,0xFFFF);  page3set=0;  return;  }    // CMPU Extended  
                   else if (page2set==1) { ea_address=Calculate_EA(EXTENDED); ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(REGISTER_D,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }    // CMPD Extended  
                   else if (page2set==0) { ea_address=Calculate_EA(EXTENDED); ea_data16=Read_Word(ea_address);  UpdateRegisterD(SUB16_Common(REGISTER_D,ea_data16,0));   VMA_Cycle(1,0xFFFF);  page2set=0;  return;  } }  // SUBD Extended  
                                                                 
                                                                 
void opcode_0x8C ()  {  if (page3set==1) {                                    ea_data16=Fetch_Opcode_Word();             temp16=SUB16_Common(register_SSP,ea_data16,0);  VMA_Cycle(1,0xFFFF);  page3set=0;  return;  }    // CMPS Immediate 
                   else if (page2set==1) {                                    ea_data16=Fetch_Opcode_Word();             temp16=SUB16_Common(register_Y,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }    // CMPY Immediate 
                   else if (page2set==0) {                                    ea_data16=Fetch_Opcode_Word();             temp16=SUB16_Common(register_X,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  } }  // CMPX Immediate 
                                                                       
void opcode_0x9C ()  {  if (page3set==1) { ea_address=Calculate_EA(DIRECT);   ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_SSP,ea_data16,0);  VMA_Cycle(1,0xFFFF);  page3set=0;  return;  }    // CMPS Direct  
                   else if (page2set==1) { ea_address=Calculate_EA(DIRECT);   ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_Y,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }    // CMPY Direct  
                   else if (page2set==0) { ea_address=Calculate_EA(DIRECT);   ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_X,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  } }  // CMPX Direct  
                                                                       
void opcode_0xAC ()  {  if (page3set==1) { ea_address=Calculate_EA(INDEXED);  ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_SSP,ea_data16,0);  VMA_Cycle(1,0xFFFF);  page3set=0;  return;  }    // CMPS Indexed 
                   else if (page2set==1) { ea_address=Calculate_EA(INDEXED);  ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_Y,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }    // CMPY Indexed 
                   else if (page2set==0) { ea_address=Calculate_EA(INDEXED);  ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_X,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  } }  // CMPX Indexed 
                                                                       
void opcode_0xBC ()  {  if (page3set==1) { ea_address=Calculate_EA(EXTENDED); ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_SSP,ea_data16,0);  VMA_Cycle(1,0xFFFF);  page3set=0;  return;  }    // CMPS Extended  
                   else if (page2set==1) { ea_address=Calculate_EA(EXTENDED); ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_Y,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  }    // CMPY Extended  
                   else if (page2set==0) { ea_address=Calculate_EA(EXTENDED); ea_data16=Read_Word(ea_address);           temp16=SUB16_Common(register_X,ea_data16,0);    VMA_Cycle(1,0xFFFF);  page2set=0;  return;  } }  // CMPX Extended  
  
                
  

void opcode_0x86 ()   {                                     ea_data8=Fetch_Opcode_Byte();     register_A=ea_data8;         Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // LDA Immediate          
void opcode_0x96 ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);   register_A=ea_data8;         Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // LDA DIRECT
void opcode_0xA6 ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);   register_A=ea_data8;         Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // LDA INDEXED
void opcode_0xB6 ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);   register_A=ea_data8;         Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // LDA EXTENDED
                                                                              
void opcode_0xC6 ()   {                                     ea_data8=Fetch_Opcode_Byte();     register_B=ea_data8;         Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // LDB Immediate          
void opcode_0xD6 ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);   register_B=ea_data8;         Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // LDB DIRECT
void opcode_0xE6 ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);   register_B=ea_data8;         Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // LDB INDEXED
void opcode_0xF6 ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);   register_B=ea_data8;         Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // LDB EXTENDED
   
void opcode_0xCC ()   {                                     ea_data16=Fetch_Opcode_Word();    UpdateRegisterD(ea_data16);  Set_Flags_Word_NZ(ea_data16);  flag_v=0;   return;  }  // LDD Immediate          
void opcode_0xDC ()   { ea_address=Calculate_EA(DIRECT);    ea_data16=Read_Word(ea_address);  UpdateRegisterD(ea_data16);  Set_Flags_Word_NZ(ea_data16);  flag_v=0;   return;  }  // LDD DIRECT
void opcode_0xEC ()   { ea_address=Calculate_EA(INDEXED);   ea_data16=Read_Word(ea_address);  UpdateRegisterD(ea_data16);  Set_Flags_Word_NZ(ea_data16);  flag_v=0;   return;  }  // LDD INDEXED
void opcode_0xFC ()   { ea_address=Calculate_EA(EXTENDED);  ea_data16=Read_Word(ea_address);  UpdateRegisterD(ea_data16);  Set_Flags_Word_NZ(ea_data16);  flag_v=0;   return;  }  // LDD EXTENDED
              
void opcode_0xCE ()   {                                     ea_data16=Fetch_Opcode_Word();    if (page2set==1) register_SSP=ea_data16; else register_USP=ea_data16;  Set_Flags_Word_NZ(ea_data16);  flag_v=0;  nmi_enabled=1; page2set=0; return;  }  // LDS/LSU Immediate          
void opcode_0xDE ()   { ea_address=Calculate_EA(DIRECT);    ea_data16=Read_Word(ea_address);  if (page2set==1) register_SSP=ea_data16; else register_USP=ea_data16;  Set_Flags_Word_NZ(ea_data16);  flag_v=0;  nmi_enabled=1; page2set=0; return;  }  // LDS/LSU DIRECT
void opcode_0xEE ()   { ea_address=Calculate_EA(INDEXED);   ea_data16=Read_Word(ea_address);  if (page2set==1) register_SSP=ea_data16; else register_USP=ea_data16;  Set_Flags_Word_NZ(ea_data16);  flag_v=0;  nmi_enabled=1; page2set=0; return;  }  // LDS/LSU INDEXED
void opcode_0xFE ()   { ea_address=Calculate_EA(EXTENDED);  ea_data16=Read_Word(ea_address);  if (page2set==1) register_SSP=ea_data16; else register_USP=ea_data16;  Set_Flags_Word_NZ(ea_data16);  flag_v=0;  nmi_enabled=1; page2set=0; return;  }  // LDS/LSU EXTENDED
        
void opcode_0x8E ()   {                                     ea_data16=Fetch_Opcode_Word();    if (page2set==0) register_X=ea_data16; else register_Y=ea_data16;      Set_Flags_Word_NZ(ea_data16);  flag_v=0;   page2set=0; return;  }  // LDX/LSY Immediate          
void opcode_0x9E ()   { ea_address=Calculate_EA(DIRECT);    ea_data16=Read_Word(ea_address);  if (page2set==0) register_X=ea_data16; else register_Y=ea_data16;      Set_Flags_Word_NZ(ea_data16);  flag_v=0;   page2set=0; return;  }  // LDX/LSY DIRECT
void opcode_0xAE ()   { ea_address=Calculate_EA(INDEXED);   ea_data16=Read_Word(ea_address);  if (page2set==0) register_X=ea_data16; else register_Y=ea_data16;      Set_Flags_Word_NZ(ea_data16);  flag_v=0;   page2set=0; return;  }  // LDX/LSY INDEXED
void opcode_0xBE ()   { ea_address=Calculate_EA(EXTENDED);  ea_data16=Read_Word(ea_address);  if (page2set==0) register_X=ea_data16; else register_Y=ea_data16;      Set_Flags_Word_NZ(ea_data16);  flag_v=0;   page2set=0; return;  }  // LDX/LSY EXTENDED
    
  

void opcode_0x97 ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=register_A;     Write_Byte(ea_address, ea_data8);   Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // STA DIRECT
void opcode_0xA7 ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=register_A;     Write_Byte(ea_address, ea_data8);   Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // STA INDEXED
void opcode_0xB7 ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=register_A;     Write_Byte(ea_address, ea_data8);   Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // STA EXTENDED

void opcode_0xD7 ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=register_B;     Write_Byte(ea_address, ea_data8);   Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // STB DIRECT
void opcode_0xE7 ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=register_B;     Write_Byte(ea_address, ea_data8);   Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // STB INDEXED
void opcode_0xF7 ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=register_B;     Write_Byte(ea_address, ea_data8);   Set_Flags_Byte_NZ(ea_data8);   flag_v=0;   return;  }  // STB EXTENDED

void opcode_0xDD ()   { ea_address=Calculate_EA(DIRECT);    ea_data16=REGISTER_D;    Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16);  flag_v=0;   return;  }  // STD DIRECT
void opcode_0xED ()   { ea_address=Calculate_EA(INDEXED);   ea_data16=REGISTER_D;    Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16);  flag_v=0;   return;  }  // STD INDEXED
void opcode_0xFD ()   { ea_address=Calculate_EA(EXTENDED);  ea_data16=REGISTER_D;    Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16);  flag_v=0;   return;  }  // STD EXTENDED
    
void opcode_0xDF ()   { ea_address=Calculate_EA(DIRECT);    if (page2set==1) ea_data16=register_SSP; else ea_data16=register_USP;  Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16); page2set=0; flag_v=0;   return;  }  // STS_U DIRECT
void opcode_0xEF ()   { ea_address=Calculate_EA(INDEXED);   if (page2set==1) ea_data16=register_SSP; else ea_data16=register_USP;  Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16); page2set=0; flag_v=0;   return;  }  // STS_U INDEXED
void opcode_0xFF ()   { ea_address=Calculate_EA(EXTENDED);  if (page2set==1) ea_data16=register_SSP; else ea_data16=register_USP;  Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16); page2set=0; flag_v=0;   return;  }  // STS_U EXTENDED
  
void opcode_0x9F ()   { ea_address=Calculate_EA(DIRECT);    if (page2set==1) ea_data16=register_Y;   else ea_data16=register_X;    Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16); page2set=0; flag_v=0;   return;  }  // STX_Y DIRECT
void opcode_0xAF ()   { ea_address=Calculate_EA(INDEXED);   if (page2set==1) ea_data16=register_Y;   else ea_data16=register_X;    Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16); page2set=0; flag_v=0;   return;  }  // STX_Y INDEXED
void opcode_0xBF ()   { ea_address=Calculate_EA(EXTENDED);  if (page2set==1) ea_data16=register_Y;   else ea_data16=register_X;    Write_Word(ea_address, ea_data16);  Set_Flags_Word_NZ(ea_data16); page2set=0; flag_v=0;   return;  }  // STX_Y EXTENDED
  

  
void opcode_0x0E ()   { ea_address=Calculate_EA(DIRECT);                                                 register_PC = ea_address;   return;  }  // JMP DIRECT
void opcode_0x6E ()   { ea_address=Calculate_EA(INDEXED);                                                register_PC = ea_address;   return;  }  // JMP INDEXED
void opcode_0x7E ()   { ea_address=Calculate_EA(EXTENDED);                                               register_PC = ea_address;   return;  }  // JMP EXTENDED
  
void opcode_0x9D ()   { ea_address=Calculate_EA(DIRECT);    VMA_Cycle(1,0xFFFF);  PushS16(register_PC);  register_PC = ea_address;   return;  }  // JSR DIRECT
void opcode_0xAD ()   { ea_address=Calculate_EA(INDEXED);   VMA_Cycle(1,0xFFFF);  PushS16(register_PC);  register_PC = ea_address;   return;  }  // JSR INDEXED
void opcode_0xBD ()   { ea_address=Calculate_EA(EXTENDED);  VMA_Cycle(1,0xFFFF);  PushS16(register_PC);  register_PC = ea_address;   return;  }  // JSR EXTENDED



void opcode_0x30 ()   { register_X=Calculate_EA(INDEXED);    VMA_Cycle(1,0xFFFF);   if (register_X==0) flag_z=1; else flag_z=0;      return;  }  // LEAX INDEXED
void opcode_0x31 ()   { register_Y=Calculate_EA(INDEXED);    VMA_Cycle(1,0xFFFF);   if (register_Y==0) flag_z=1; else flag_z=0;      return;  }  // LEAY INDEXED
void opcode_0x32 ()   { register_SSP=Calculate_EA(INDEXED);  VMA_Cycle(1,0xFFFF);         nmi_enabled=1;                             return;  }  // LEAS INDEXED
void opcode_0x33 ()   { register_USP=Calculate_EA(INDEXED);  VMA_Cycle(1,0xFFFF);                                                    return;  }  // LEAU INDEXED



// Undocumented opcodes
//------------------------    
//------------------------   
 
void opcode_0x41 ()   { register_A = NEG_Common(register_A);      return;  }      // NEGA
void opcode_0x51 ()   { register_B = NEG_Common(register_B);      return;  }      // NEGB
void opcode_0x01 ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NEG_Common(ea_data8));  return;  }  // NEG DIRECT
void opcode_0x61 ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NEG_Common(ea_data8));  return;  }  // NEG INDEXED
void opcode_0x71 ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NEG_Common(ea_data8));  return;  }  // NEG EXTENDED
                        
   
uint8_t NGC_Common(uint8_t local_byte)   {
  VMA_Cycle(1,register_PC);
  if (local_byte==0x00) flag_c=0; else flag_c=1;
  if (local_byte==0x80) flag_v=1; else flag_v=0;
    local_byte = local_byte + 1 - flag_c;
  Set_Flags_Byte_NZ(local_byte);
  return local_byte;
} 
void opcode_0x42 ()   { register_A = NGC_Common(register_A);                                                                                                     return;  }      // NGCA
void opcode_0x52 ()   { register_B = NGC_Common(register_B);                                                                                                     return;  }      // NGCB
void opcode_0x02 ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NGC_Common(ea_data8));  return;  }  // NGC DIRECT
void opcode_0x62 ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NGC_Common(ea_data8));  return;  }  // NGC INDEXED
void opcode_0x72 ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,NGC_Common(ea_data8));  return;  }  // NGC EXTENDED
   
   
   
void opcode_0x14()   {  Write_Byte(0xDEAD, 0x77);  while (direct_reset_n!=0) {VMA_Cycle(1,0x1100);Fetch_Opcode_Byte();}    return;  }  // HCF - Halt and Catch Fire until RESET_n is aserted
void opcode_0x15()   {  Write_Byte(0xDEAD, 0x77);  while (direct_reset_n!=0) {VMA_Cycle(1,0x2200);Fetch_Opcode_Byte();}    return;  } 
void opcode_0xCD()   {  Write_Byte(0xDEAD, 0x77);  while (direct_reset_n!=0) {VMA_Cycle(1,0x3300);Fetch_Opcode_Byte();}    return;  } 

   
void opcode_0x45 ()  {  VMA_Cycle(1,register_PC);                                        register_A = LSR_Common(register_A);                                                        return;  }   // LSRA
void opcode_0x55 ()  {  VMA_Cycle(1,register_PC);                                        register_B = LSR_Common(register_B);                                                        return;  }   // LSRB
void opcode_0x05 ()  {  ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  ea_data8=LSR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // LSR Direct         
void opcode_0x65 ()  {  ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  ea_data8=LSR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // LSR Indexed          
void opcode_0x75 ()  {  ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  ea_data8=LSR_Common(ea_data8);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,ea_data8);  return;  }   // LSR Extended         
  

void opcode_0x18 ()  {  UpdateFlags( (REGISTER_CC<<1) & Fetch_Opcode_Byte() );  VMA_Cycle(1,0xFFFF);  return;  }   // LSACC

void opcode_0x87 ()  {  Fetch_Opcode_Byte();  flag_n=1;  flag_z=0;  flag_v=0;   return;  }   // BROK
void opcode_0xC7 ()  {  Fetch_Opcode_Byte();  flag_n=1;  flag_z=0;  flag_v=0;   return;  }  

void opcode_0x38 ()  {  ea_data8=Fetch_Opcode_Byte();  UpdateFlags( AND_Common(REGISTER_CC,ea_data8) );  VMA_Cycle(1,0xFFFF);  return;  }   // ANDCC2         

void opcode_0x1B ()   {  VMA_Cycle(1,register_PC);  return; } // NOP


  
uint8_t DEC2_Common(uint8_t local_byte)   {
  VMA_Cycle(1,register_PC);
  if (local_byte == 0x80) flag_v=1; else flag_v=0;
  local_byte--;
  Set_Flags_Byte_NZ(local_byte);
  if (local_byte == 0xFF) flag_c=0; else flag_c=1;
  return local_byte;
} 
void opcode_0x4B ()   { register_A = DEC2_Common(register_A);                                                                                                     return;  }  // DECA2
void opcode_0x5B ()   { register_B = DEC2_Common(register_B);                                                                                                     return;  }  // DECB2
void opcode_0x0B ()   { ea_address=Calculate_EA(DIRECT);    ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,DEC2_Common(ea_data8));  return;  }  // DEC2 DIRECT
void opcode_0x6B ()   { ea_address=Calculate_EA(INDEXED);   ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,DEC2_Common(ea_data8));  return;  }  // DEC2 INDEXED
void opcode_0x7B ()   { ea_address=Calculate_EA(EXTENDED);  ea_data8=Read_Byte(ea_address);  VMA_Cycle(1,0xFFFF);  Write_Byte(ea_address,DEC2_Common(ea_data8));  return;  }  // DEC2 EXTENDED
           
       
void opcode_0x3E() {          // SWI4
  
  VMA_Cycle(1,register_PC);
  VMA_Cycle(1,0xFFFF);
  PushS16(register_PC);
  PushS16(register_USP);
  PushS16(register_Y);
  PushS16(register_X);
  PushS8(register_DP);
  PushS8(register_B);
  PushS8(register_A);
  PushS8(REGISTER_CC);
  flag_i=1;
  flag_f=1;
  VMA_Cycle(1,0xFFFF);
  register_PC = Read_Word(0xFFFE);  // Reset Vector
  VMA_Cycle(1,0xFFFF);
  page2set=0;
  page3set=0;
  
    return;
}


void CLR2_Common()   {
  VMA_Cycle(1,register_PC);
  flag_n = 0;
  flag_z = 1;
  flag_v = 0;
  return;
} 
void opcode_0x4E ()   { CLR2_Common();  register_A = 0;   return;  }      // CLRA2
void opcode_0x5E ()   { CLR2_Common();  register_B = 0;   return;  }      // CLRB2



void opcode_0x8F ()   { ea_data16=Fetch_Opcode_Word();   flag_n = 1; flag_z = 0; flag_v = 0;    return;  }  // STX Immediate          
void opcode_0xCF ()   { ea_data16=Fetch_Opcode_Word();   flag_n = 1; flag_z = 0; flag_v = 0;    return;  }  // STU Immediate          



// -------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------

void opcode_0x10 ()   {  if (page2set==0 && page3set==0) page2set=1;  return;  }     // Set Page 2/3
void opcode_0x11 ()   {  if (page2set==0 && page3set==0) page3set=1;  return;  }     //  ** Ignore all page-sets after the first instance


// -------------------------------------------------
//
// Main loop
//
// -------------------------------------------------
void loop() {

  uint16_t local_counter=0;


  // Give Teensy 4.1 a moment
  //
  delay (1000);
  wait_for_CLK_rising_edge();
  wait_for_CLK_rising_edge();
  wait_for_CLK_rising_edge();


  Reset_sequence();
  
  
  while (1) {

   
      // Acceleration Modes
      // -----------------------
      // Press 0 = All acceleration and mirroring disabled   
      // Press 1 = Eliminates 6809 VMA cycles   
      // Press 2 = Reads and writes are cycle accurate using internal memory with writes passing through to motherboard   
      // Press 3 = Reads accelerated using internal memory and writes are cycle accurate and pass through to motherboard   
      // Press 4 = All read and write accesses use accelerated internal memory    

      // Press 6 = Load Cartridge - Tandy diagnostics 
      // Press 7 = DragonFire
      // Press 8 = Stellar Lifeline
      // Press 9 = Canyon Climber

      local_counter++;
      if (local_counter==8000){
        if (Serial.available() ) { 
          incomingByte = Serial.read();   
          switch (incomingByte){
            case 48: mode=0;    break;
            case 49: mode=1;    break;
            case 50: mode=2;    break;
            case 51: mode=3;    break;
            case 52: mode=4;    break;
            
            case 54: cart=0;    break;
            case 55: cart=1;    break;
            case 56: cart=2;    break;
            case 57: cart=3;    break;
          }
        }
      }
      

      // Poll for interrupts between instructions
      //

     if (page2set==0 && page3set==0)  {  // Dont allow interrupts between prefix and opcode
      
           if (direct_reset_n==0)                  { Reset_sequence(); }
      else if (nmi_latched==1)                     { NMI_Handler();    }           
      else if (flag_f==0 && direct_firq_n_d1==0)   { FIRQ_Handler();   }
      else if (flag_i==0 && direct_irq_n_d1==0)    { IRQ_Handler();    }

     }
     

    // Process new instruction
    //
    opcode_byte = Fetch_Opcode_Byte();   

    switch (opcode_byte)  {
        
        case 0x00:  opcode_0x00();  break;
        case 0x01:  opcode_0x01();  break;
        case 0x02:  opcode_0x02();  break;
        case 0x03:  opcode_0x03();  break;
        case 0x04:  opcode_0x04();  break;
        case 0x05:  opcode_0x05();  break;
        case 0x06:  opcode_0x06();  break;
        case 0x07:  opcode_0x07();  break;
        case 0x08:  opcode_0x08();  break;
        case 0x09:  opcode_0x09();  break;
        case 0x0A:  opcode_0x0A();  break;
        case 0x0B:  opcode_0x0B();  break;
        case 0x0C:  opcode_0x0C();  break;
        case 0x0D:  opcode_0x0D();  break;
        case 0x0E:  opcode_0x0E();  break;
        case 0x0F:  opcode_0x0F();  break;
        case 0x10:  opcode_0x10();  break;
        case 0x11:  opcode_0x11();  break;
        case 0x12:  opcode_0x12();  break;
        case 0x13:  opcode_0x13();  break;
        case 0x14:  opcode_0x14();  break;
        case 0x15:  opcode_0x15();  break;
        case 0x16:  opcode_0x16();  break;
        case 0x17:  opcode_0x17();  break;
        case 0x18:  opcode_0x18();  break;
        case 0x19:  opcode_0x19();  break;
        case 0x1A:  opcode_0x1A();  break;
        case 0x1B:  opcode_0x1B();  break;
        case 0x1C:  opcode_0x1C();  break;
        case 0x1D:  opcode_0x1D();  break;
        case 0x1E:  opcode_0x1E();  break;
        case 0x1F:  opcode_0x1F();  break;
        case 0x20:  opcode_0x20();  break;
        case 0x21:  opcode_0x21();  break;
        case 0x22:  opcode_0x22();  break;
        case 0x23:  opcode_0x23();  break;
        case 0x24:  opcode_0x24();  break;
        case 0x25:  opcode_0x25();  break;
        case 0x26:  opcode_0x26();  break;
        case 0x27:  opcode_0x27();  break;
        case 0x28:  opcode_0x28();  break;
        case 0x29:  opcode_0x29();  break;
        case 0x2A:  opcode_0x2A();  break;
        case 0x2B:  opcode_0x2B();  break;
        case 0x2C:  opcode_0x2C();  break;
        case 0x2D:  opcode_0x2D();  break;
        case 0x2E:  opcode_0x2E();  break;
        case 0x2F:  opcode_0x2F();  break;
        case 0x30:  opcode_0x30();  break;
        case 0x31:  opcode_0x31();  break;
        case 0x32:  opcode_0x32();  break;
        case 0x33:  opcode_0x33();  break;
        case 0x34:  opcode_0x34();  break;
        case 0x35:  opcode_0x35();  break;
        case 0x36:  opcode_0x36();  break;
        case 0x37:  opcode_0x37();  break;
        case 0x38:  opcode_0x38();  break;
        case 0x39:  opcode_0x39();  break;
        case 0x3A:  opcode_0x3A();  break;
        case 0x3B:  opcode_0x3B();  break;
        case 0x3C:  opcode_0x3C();  break;
        case 0x3D:  opcode_0x3D();  break;
        case 0x3E:  opcode_0x3E();  break;
        case 0x3F:  opcode_0x3F();  break;
        case 0x40:  opcode_0x40();  break;
        case 0x41:  opcode_0x41();  break;
        case 0x42:  opcode_0x42();  break;
        case 0x43:  opcode_0x43();  break;
        case 0x44:  opcode_0x44();  break;
        case 0x45:  opcode_0x45();  break;
        case 0x46:  opcode_0x46();  break;
        case 0x47:  opcode_0x47();  break;
        case 0x48:  opcode_0x48();  break;
        case 0x49:  opcode_0x49();  break;
        case 0x4A:  opcode_0x4A();  break;
        case 0x4B:  opcode_0x4B();  break;
        case 0x4C:  opcode_0x4C();  break;
        case 0x4D:  opcode_0x4D();  break;
        case 0x5C:  opcode_0x5C();  break;
        case 0x5D:  opcode_0x5D();  break;
        case 0x4E:  opcode_0x4E();  break;
        case 0x4F:  opcode_0x4F();  break;
        case 0x50:  opcode_0x50();  break;
        case 0x51:  opcode_0x51();  break;
        case 0x52:  opcode_0x52();  break;
        case 0x53:  opcode_0x53();  break;
        case 0x54:  opcode_0x54();  break;
        case 0x55:  opcode_0x55();  break;
        case 0x56:  opcode_0x56();  break;
        case 0x57:  opcode_0x57();  break;
        case 0x58:  opcode_0x58();  break;
        case 0x59:  opcode_0x59();  break;
        case 0x5A:  opcode_0x5A();  break;
        case 0x5B:  opcode_0x5B();  break;
        case 0x5E:  opcode_0x5E();  break;
        case 0x5F:  opcode_0x5F();  break;
        case 0x60:  opcode_0x60();  break;
        case 0x61:  opcode_0x61();  break;
        case 0x62:  opcode_0x62();  break;
        case 0x63:  opcode_0x63();  break;
        case 0x64:  opcode_0x64();  break;
        case 0x65:  opcode_0x65();  break;
        case 0x66:  opcode_0x66();  break;
        case 0x67:  opcode_0x67();  break;
        case 0x68:  opcode_0x68();  break;
        case 0x69:  opcode_0x69();  break;
        case 0x6A:  opcode_0x6A();  break;
        case 0x6B:  opcode_0x6B();  break;
        case 0x6C:  opcode_0x6C();  break;
        case 0x6D:  opcode_0x6D();  break;
        case 0x6E:  opcode_0x6E();  break;
        case 0x6F:  opcode_0x6F();  break;
        case 0x70:  opcode_0x70();  break;
        case 0x71:  opcode_0x71();  break;
        case 0x72:  opcode_0x72();  break;
        case 0x73:  opcode_0x73();  break;
        case 0x74:  opcode_0x74();  break;
        case 0x75:  opcode_0x75();  break;
        case 0x76:  opcode_0x76();  break;
        case 0x77:  opcode_0x77();  break;
        case 0x78:  opcode_0x78();  break;
        case 0x79:  opcode_0x79();  break;
        case 0x7A:  opcode_0x7A();  break;
        case 0x7B:  opcode_0x7B();  break;
        case 0x7C:  opcode_0x7C();  break;
        case 0x7D:  opcode_0x7D();  break;
        case 0x7E:  opcode_0x7E();  break;
        case 0x7F:  opcode_0x7F();  break;
        case 0x80:  opcode_0x80();  break;
        case 0x81:  opcode_0x81();  break;
        case 0x82:  opcode_0x82();  break;
        case 0x83:  opcode_0x83();  break;
        case 0x84:  opcode_0x84();  break;
        case 0x85:  opcode_0x85();  break;
        case 0x86:  opcode_0x86();  break;
        case 0x87:  opcode_0x87();  break;
        case 0x88:  opcode_0x88();  break;
        case 0x89:  opcode_0x89();  break;
        case 0x8A:  opcode_0x8A();  break;
        case 0x8B:  opcode_0x8B();  break;
        case 0x8C:  opcode_0x8C();  break;
        case 0x8D:  opcode_0x8D();  break;
        case 0x8E:  opcode_0x8E();  break;
        case 0x8F:  opcode_0x8F();  break;
        case 0x90:  opcode_0x90();  break;
        case 0x91:  opcode_0x91();  break;
        case 0x92:  opcode_0x92();  break;
        case 0x93:  opcode_0x93();  break;
        case 0x94:  opcode_0x94();  break;
        case 0x95:  opcode_0x95();  break;
        case 0x96:  opcode_0x96();  break;
        case 0x97:  opcode_0x97();  break;
        case 0x98:  opcode_0x98();  break;
        case 0x99:  opcode_0x99();  break;
        case 0x9A:  opcode_0x9A();  break;
        case 0x9B:  opcode_0x9B();  break;
        case 0x9C:  opcode_0x9C();  break;
        case 0x9D:  opcode_0x9D();  break;
        case 0x9E:  opcode_0x9E();  break;
        case 0x9F:  opcode_0x9F();  break;
        case 0xA0:  opcode_0xA0();  break;
        case 0xA1:  opcode_0xA1();  break;
        case 0xA2:  opcode_0xA2();  break;
        case 0xA3:  opcode_0xA3();  break;
        case 0xA4:  opcode_0xA4();  break;
        case 0xA5:  opcode_0xA5();  break;
        case 0xA6:  opcode_0xA6();  break;
        case 0xA7:  opcode_0xA7();  break;
        case 0xA8:  opcode_0xA8();  break;
        case 0xA9:  opcode_0xA9();  break;
        case 0xAA:  opcode_0xAA();  break;
        case 0xAB:  opcode_0xAB();  break;
        case 0xAC:  opcode_0xAC();  break;
        case 0xAD:  opcode_0xAD();  break;
        case 0xAE:  opcode_0xAE();  break;
        case 0xAF:  opcode_0xAF();  break;
        case 0xB0:  opcode_0xB0();  break;
        case 0xB1:  opcode_0xB1();  break;
        case 0xB2:  opcode_0xB2();  break;
        case 0xB3:  opcode_0xB3();  break;
        case 0xB4:  opcode_0xB4();  break;
        case 0xB5:  opcode_0xB5();  break;
        case 0xB6:  opcode_0xB6();  break;
        case 0xB7:  opcode_0xB7();  break;
        case 0xB8:  opcode_0xB8();  break;
        case 0xB9:  opcode_0xB9();  break;
        case 0xBA:  opcode_0xBA();  break;
        case 0xBB:  opcode_0xBB();  break;
        case 0xBC:  opcode_0xBC();  break;
        case 0xBD:  opcode_0xBD();  break;
        case 0xBE:  opcode_0xBE();  break;
        case 0xBF:  opcode_0xBF();  break;
        case 0xC0:  opcode_0xC0();  break;
        case 0xC1:  opcode_0xC1();  break;
        case 0xC2:  opcode_0xC2();  break;
        case 0xC3:  opcode_0xC3();  break;
        case 0xC4:  opcode_0xC4();  break;
        case 0xC5:  opcode_0xC5();  break;
        case 0xC6:  opcode_0xC6();  break;
        case 0xC7:  opcode_0xC7();  break;
        case 0xC8:  opcode_0xC8();  break;
        case 0xC9:  opcode_0xC9();  break;
        case 0xCA:  opcode_0xCA();  break;
        case 0xCB:  opcode_0xCB();  break;
        case 0xCC:  opcode_0xCC();  break;
        case 0xCD:  opcode_0xCD();  break;
        case 0xCE:  opcode_0xCE();  break;
        case 0xCF:  opcode_0xCF();  break;
        case 0xD0:  opcode_0xD0();  break;
        case 0xD1:  opcode_0xD1();  break;
        case 0xD2:  opcode_0xD2();  break;
        case 0xD3:  opcode_0xD3();  break;
        case 0xD4:  opcode_0xD4();  break;
        case 0xD5:  opcode_0xD5();  break;
        case 0xD6:  opcode_0xD6();  break;
        case 0xD7:  opcode_0xD7();  break;
        case 0xD8:  opcode_0xD8();  break;
        case 0xD9:  opcode_0xD9();  break;
        case 0xDA:  opcode_0xDA();  break;
        case 0xDB:  opcode_0xDB();  break;
        case 0xDC:  opcode_0xDC();  break;
        case 0xDD:  opcode_0xDD();  break;
        case 0xDE:  opcode_0xDE();  break;
        case 0xDF:  opcode_0xDF();  break;
        case 0xE0:  opcode_0xE0();  break;
        case 0xE1:  opcode_0xE1();  break;
        case 0xE2:  opcode_0xE2();  break;
        case 0xE3:  opcode_0xE3();  break;
        case 0xE4:  opcode_0xE4();  break;
        case 0xE5:  opcode_0xE5();  break;
        case 0xE6:  opcode_0xE6();  break;
        case 0xE7:  opcode_0xE7();  break;
        case 0xE8:  opcode_0xE8();  break;
        case 0xE9:  opcode_0xE9();  break;
        case 0xEA:  opcode_0xEA();  break;
        case 0xEB:  opcode_0xEB();  break;
        case 0xEC:  opcode_0xEC();  break;
        case 0xED:  opcode_0xED();  break;
        case 0xEE:  opcode_0xEE();  break;
        case 0xEF:  opcode_0xEF();  break;
        case 0xF0:  opcode_0xF0();  break;
        case 0xF1:  opcode_0xF1();  break;
        case 0xF2:  opcode_0xF2();  break;
        case 0xF3:  opcode_0xF3();  break;
        case 0xF4:  opcode_0xF4();  break;
        case 0xF5:  opcode_0xF5();  break;
        case 0xF6:  opcode_0xF6();  break;
        case 0xF7:  opcode_0xF7();  break;
        case 0xF8:  opcode_0xF8();  break;
        case 0xF9:  opcode_0xF9();  break;
        case 0xFA:  opcode_0xFA();  break;
        case 0xFB:  opcode_0xFB();  break;
        case 0xFC:  opcode_0xFC();  break;
        case 0xFD:  opcode_0xFD();  break;
        case 0xFE:  opcode_0xFE();  break;
        case 0xFF:  opcode_0xFF();  break;
      }

// ** End main loop

  } 
}
      
