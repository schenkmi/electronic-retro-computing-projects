00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 9/9/2023 10:34:14 PM

00000000                             1  *
00000000                             2  *
00000000                             3  *  File Name   :  MCL68 Opcode Tests
00000000                             4  *  Used on     :  
00000000                             5  *  Author      :  Ted Fried, MicroCore Labs
00000000                             6  *  Creation    :  7/14/2020
00000000                             7  *
00000000                             8  *   Description:
00000000                             9  *   ============
00000000                            10  *   
00000000                            11  *  Program to test all of the Motorola 68000's opcodes.
00000000                            12  *
00000000                            13  *  If failures are detected, the code will immediately loop on itself.
00000000                            14  *  All addressing modes, data sizes, and opcode combinations are tested.
00000000                            15  *
00000000                            16  *  This code was developed using the Easy68K simulator where all tests passed!
00000000                            17  *
00000000                            18  *------------------------------------------------------------------------
00000000                            19  *
00000000                            20  * Modification History:
00000000                            21  * =====================
00000000                            22  *
00000000                            23  * Revision 1 7/14/2020 
00000000                            24  * Initial revision
00000000                            25  *
00000000                            26  *
00000000                            27  *------------------------------------------------------------------------
00000000                            28  *
00000000                            29  * Copyright (c) 2020 Ted Fried
00000000                            30  * 
00000000                            31  * Permission is hereby granted, free of charge, to any person obtaining a copy
00000000                            32  * of this software and associated documentation files (the "Software"), to deal
00000000                            33  * in the Software without restriction, including without limitation the rights
00000000                            34  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
00000000                            35  * copies of the Software, and to permit persons to whom the Software is
00000000                            36  * furnished to do so, subject to the following conditions:
00000000                            37  * 
00000000                            38  * The above copyright notice and this permission notice shall be included in all
00000000                            39  * copies or substantial portions of the Software.
00000000                            40  * 
00000000                            41  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
00000000                            42  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
00000000                            43  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
00000000                            44  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
00000000                            45  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
00000000                            46  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
00000000                            47  * SOFTWARE.
00000000                            48  *
00000000                            49  
00000000                            50  
00000000                            51  * Populate Exception Vectors
00000000                            52  *
00000000                            53    ORG $00000   
00000000= 000003F0                  54    dc.l    $000003F0  * Vector = 0   Reset Supervisor Stack Pointer
00000004= 00000400                  55    dc.l    $00000400  * Vector = 1   Reset Initial PC
00000008= 22222222                  56    dc.l    $22222222  * Vector = 2   Bus Error
0000000C= 30303033                  57    dc.l    $30303033  * Vector = 3   Address Error
00000010= 44444444                  58    dc.l    $44444444  * Vector = 4   Illegal Instruction
00000014= 55555555                  59    dc.l    $55555555  * Vector = 5   Zero Divide
00000018= 0000F010                  60    dc.l    $0000F010  * Vector = 6   CHK Instruction
0000001C= 0000F020                  61    dc.l    $0000F020  * Vector = 7   TRAPV Instruction
00000020= 88888888                  62    dc.l    $88888888  * Vector = 8   Privilege Violation 
00000024= 99999999                  63    dc.l    $99999999  * Vector = 9   Trace
00000028= AAAAAAAA                  64    dc.l    $aaaaaaaa  * Vector = 10  Line A Emulator
0000002C= BBBBBBBB                  65    dc.l    $bbbbbbbb  * Vector = 11  Line F Emulator
00000030                            66    
00000060                            67    ORG $00060   
00000060= 12121212                  68    dc.l    $12121212  * Vector = 24  Spurrious Interrupt
00000064= 11111111                  69    dc.l    $11111111  * Vector = 25  Level 1 Interrupt Autovector
00000068= 22222222                  70    dc.l    $22222222  * Vector = 26  Level 2 Interrupt Autovector
0000006C= 33333333                  71    dc.l    $33333333  * Vector = 27  Level 3 Interrupt Autovector
00000070= 44444444                  72    dc.l    $44444444  * Vector = 28  Level 4 Interrupt Autovector
00000074= 55555555                  73    dc.l    $55555555  * Vector = 29  Level 5 Interrupt Autovector
00000078= 66666666                  74    dc.l    $66666666  * Vector = 30  Level 6 Interrupt Autovector
0000007C= 77777777                  75    dc.l    $77777777  * Vector = 31  Level 7 Interrupt Autovector
00000080                            76    
00000080                            77  
00000080                            78  * Loop here when all tests pass
00000080                            79  *
0000F000                            80    ORG $00F000 
0000F000  60FE                      81  ALL_DONE: bra ALL_DONE
0000F002                            82  
0000F002                            83   
0000F002                            84  * Exception Vector = 6   CHK Instruction
0000F002                            85  *
0000F010                            86    ORG $00F010 
0000F010                            87    
0000F010                            88  EXCEPTION_6:
0000F010  2C3C EEEE0006             89              move.l #$EEEE0006 , d6      * Set d6 to the exception vector 
0000F016  4E73                      90              rte
0000F018                            91            
0000F018                            92  
0000F018                            93   
0000F018                            94  * Exception Vector = 7   TRAPV Instruction
0000F018                            95  *
0000F020                            96    ORG $00F020 
0000F020                            97    
0000F020                            98  EXCEPTION_7:
0000F020  203C 12345678             99              move.l #$12345678 , d0      * Set d6 to the exception vector 
0000F026  4E73                     100              rte
0000F028                           101            
0000F028                           102  
0000F028                           103  
0000F028                           104  * Beginning of opcode tests
0000F028                           105  *
00000400                           106  START   ORG $000400 
00000400                           107  
00000400  2E7C 000003F0            108     move.l #$000003F0  , a7      * populate stack pointer
00000406                           109  
00000406                           110  
00000406  4EB9 0000057C            111     jsr op_ORI_TO_CCR
0000040C  4EB9 000005B0            112     jsr op_ORI_TO_SR
00000412  4EB9 000005E4            113     jsr op_EORI_TO_CCR
00000418  4EB9 0000061C            114     jsr op_EORI_TO_SR
0000041E  4EB9 00000654            115     jsr op_ANDI_TO_CCR
00000424  4EB9 0000068C            116     jsr op_ANDI_TO_SR
0000042A  4EB9 000006C4            117     jsr op_BTST
00000430  4EB9 00000B76            118     jsr op_BCHG
00000436  4EB9 00001008            119     jsr op_BCLR
0000043C  4EB9 000013BA            120     jsr op_BSET
00000442  4EB9 00001856            121     jsr op_MOVEP
00000448  4EB9 000018EC            122     jsr op_BOOL_I
0000044E  4EB9 00001B0C            123     jsr op_CMP_I
00000454  4EB9 00001D0E            124     jsr op_ADD_I
0000045A  4EB9 00001E94            125     jsr op_SUB_I
00000460  4EB9 0000201A            126     jsr op_MOVE
00000466  4EB9 0000222C            127     jsr op_MOVE_xxx_FLAGS
0000046C  4EB9 0000243A            128     jsr op_EXT
00000472  4EB9 00002464            129     jsr op_SWAP
00000478  4EB9 0000247A            130     jsr op_LEAPEA 
0000047E  4EB9 00002526            131     jsr op_TAS 
00000484  4EB9 00002550            132     jsr op_TST 
0000048A  4EB9 00002598            133     jsr op_LINKS 
00000490  4EB9 000025B6            134     jsr op_MOVE_USP
00000496  4EB9 000025C4            135     jsr op_CHK
0000049C  4EB9 000025DC            136     jsr op_NEGS
000004A2  4EB9 00002992            137     jsr op_MOVEM
000004A8  4EB9 00002D16            138     jsr op_ABCD
000004AE  4EB9 00002E2C            139     jsr op_SBCD
000004B4  4EB9 00002F42            140     jsr op_NBCD
000004BA  4EB9 00002FE0            141     jsr op_TRAPV
000004C0  4EB9 00002FF2            142     jsr op_RTR
000004C6  4EB9 00001AD6            143     jsr op_BSR
000004CC  4EB9 00003016            144     jsr op_BCC
000004D2  4EB9 00003096            145     jsr op_DBCC
000004D8  4EB9 000030BC            146     jsr op_SCC
000004DE  4EB9 000030E6            147     jsr op_ADDQ
000004E4  4EB9 000031A2            148     jsr op_SUBQ
000004EA  4EB9 0000325E            149     jsr op_MOVEQ
000004F0  4EB9 0000327E            150     jsr op_DIVU
000004F6  4EB9 000032D0            151     jsr op_DIVS
000004FC  4EB9 00003322            152     jsr op_OR
00000502  4EB9 00003410            153     jsr op_AND
00000508  4EB9 000034FE            154     jsr op_EOR
0000050E  4EB9 00003576            155     jsr op_CMP
00000514  4EB9 000035EE            156     jsr op_CMPA
0000051A  4EB9 00003656            157     jsr op_CMPM
00000520  4EB9 0000370C            158     jsr op_ADD
00000526  4EB9 000037FA            159     jsr op_SUB
0000052C  4EB9 000038E8            160     jsr op_ADDA
00000532  4EB9 00003936            161     jsr op_SUBA
00000538  4EB9 00003984            162     jsr op_ADDX
0000053E  4EB9 00003AA2            163     jsr op_SUBX
00000544  4EB9 00003BC0            164     jsr op_MULU
0000054A  4EB9 00003C0C            165     jsr op_MULS
00000550  4EB9 00003C58            166     jsr op_EXG
00000556  4EB9 00003CC6            167     jsr op_ROx
0000055C  4EB9 00003F06            168     jsr op_ROXx
00000562  4EB9 00004146            169     jsr op_SHIFTS
00000568  4EB9 00004392            170     jsr op_SHIFTS2
0000056E                           171     
0000056E  4EF9 0000F000            172     jmp ALL_DONE
00000574                           173  
00000574                           174     
00000574                           175  
00000574  263C 33333333            176  BSR_FAR1:       move.l #$33333333 , d3
0000057A  4E75                     177                  rts
0000057C                           178  
0000057C                           179  *-----------------------------------------------------------
0000057C                           180  *-----------------------------------------------------------
0000057C                           181  * OPCODE : ORI_TO_CCR
0000057C                           182  *-----------------------------------------------------------
0000057C                           183  *-----------------------------------------------------------
0000057C                           184  op_ORI_TO_CCR: 
0000057C                           185  
0000057C  003C 00FF                186      ori.b #$FF, CCR
00000580  6A00 002C                187      bpl ORI_TO_CCR_FAIL     * branch if Z clear  
00000584  6600 0028                188      bne ORI_TO_CCR_FAIL     * branch if N clear
00000588  6800 0024                189      bvc ORI_TO_CCR_FAIL     * branch if V clear 
0000058C  6400 0020                190      bcc ORI_TO_CCR_FAIL     * branch if C clear 
00000590                           191      
00000590  44FC 0000                192      move #$00, CCR
00000594  003C 0000                193      ori.b #$00, CCR
00000598  6700 0014                194      beq ORI_TO_CCR_FAIL     * branch if Z set  
0000059C  6B00 0010                195      bmi ORI_TO_CCR_FAIL     * branch if N set  
000005A0  6900 000C                196      bvs ORI_TO_CCR_FAIL     * branch if V set  
000005A4  6500 0008                197      bcs ORI_TO_CCR_FAIL     * branch if C set  
000005A8                           198     
000005A8  46FC 2700                199      move #$2700, SR         * Put flags back to initial value
000005AC                           200  
000005AC  4E75                     201      rts
000005AE                           202      
000005AE  60FE                     203  ORI_TO_CCR_FAIL: bra ORI_TO_CCR_FAIL
000005B0                           204     
000005B0                           205  
000005B0                           206  *-----------------------------------------------------------
000005B0                           207  *-----------------------------------------------------------
000005B0                           208  * OPCODE : ORI_TO_SR
000005B0                           209  *-----------------------------------------------------------
000005B0                           210  *-----------------------------------------------------------
000005B0                           211  op_ORI_TO_SR: 
000005B0                           212  
000005B0  007C 2FFF                213      ori.w #$2FFF, SR
000005B4  6A00 002C                214      bpl ORI_TO_SR_FAIL     * branch if Z clear  
000005B8  6600 0028                215      bne ORI_TO_SR_FAIL     * branch if N clear
000005BC  6800 0024                216      bvc ORI_TO_SR_FAIL     * branch if V clear 
000005C0  6400 0020                217      bcc ORI_TO_SR_FAIL     * branch if C clear 
000005C4                           218      
000005C4  46FC 2000                219      move #$2000, SR
000005C8  007C 0000                220      ori.w #$0000, SR
000005CC  6700 0014                221      beq ORI_TO_SR_FAIL     * branch if Z set  
000005D0  6B00 0010                222      bmi ORI_TO_SR_FAIL     * branch if N set  
000005D4  6900 000C                223      bvs ORI_TO_SR_FAIL     * branch if V set  
000005D8  6500 0008                224      bcs ORI_TO_SR_FAIL     * branch if C set  
000005DC                           225     
000005DC  46FC 2700                226      move #$2700, SR        * Put flags back to initial value
000005E0                           227  
000005E0  4E75                     228      rts
000005E2                           229      
000005E2  60FE                     230  ORI_TO_SR_FAIL: bra ORI_TO_SR_FAIL
000005E4                           231     
000005E4                           232  
000005E4                           233  *-----------------------------------------------------------
000005E4                           234  *-----------------------------------------------------------
000005E4                           235  * OPCODE : EORI_TO_CCR
000005E4                           236  *-----------------------------------------------------------
000005E4                           237  *-----------------------------------------------------------
000005E4                           238  op_EORI_TO_CCR: 
000005E4                           239  
000005E4  44FC 0000                240      move #$00, CCR
000005E8  0A3C 00FF                241      eori.b #$FF, CCR
000005EC  6A00 002C                242      bpl EORI_TO_CCR_FAIL     * branch if Z clear  
000005F0  6600 0028                243      bne EORI_TO_CCR_FAIL     * branch if N clear
000005F4  6800 0024                244      bvc EORI_TO_CCR_FAIL     * branch if V clear 
000005F8  6400 0020                245      bcc EORI_TO_CCR_FAIL     * branch if C clear 
000005FC                           246      
000005FC  44FC 0000                247      move #$00, CCR
00000600  0A3C 0000                248      eori.b #$00, CCR
00000604  6700 0014                249      beq EORI_TO_CCR_FAIL     * branch if Z set  
00000608  6B00 0010                250      bmi EORI_TO_CCR_FAIL     * branch if N set  
0000060C  6900 000C                251      bvs EORI_TO_CCR_FAIL     * branch if V set  
00000610  6500 0008                252      bcs EORI_TO_CCR_FAIL     * branch if C set  
00000614                           253     
00000614  46FC 2700                254      move #$2700, SR         * Put flags back to initial value
00000618                           255  
00000618  4E75                     256      rts
0000061A                           257      
0000061A  60FE                     258  EORI_TO_CCR_FAIL: bra EORI_TO_CCR_FAIL
0000061C                           259     
0000061C                           260  
0000061C                           261  *-----------------------------------------------------------
0000061C                           262  *-----------------------------------------------------------
0000061C                           263  * OPCODE : EORI_TO_SR
0000061C                           264  *-----------------------------------------------------------
0000061C                           265  *-----------------------------------------------------------
0000061C                           266  op_EORI_TO_SR: 
0000061C                           267  
0000061C  46FC 2000                268      move #$2000, SR
00000620  0A7C 0FFF                269      eori.w #$0FFF, SR
00000624  6A00 002C                270      bpl EORI_TO_SR_FAIL     * branch if Z clear  
00000628  6600 0028                271      bne EORI_TO_SR_FAIL     * branch if N clear
0000062C  6800 0024                272      bvc EORI_TO_SR_FAIL     * branch if V clear 
00000630  6400 0020                273      bcc EORI_TO_SR_FAIL     * branch if C clear 
00000634                           274      
00000634  46FC 2000                275      move #$2000, SR
00000638  0A7C 0000                276      eori.w #$0000, SR
0000063C  6700 0014                277      beq EORI_TO_SR_FAIL     * branch if Z set  
00000640  6B00 0010                278      bmi EORI_TO_SR_FAIL     * branch if N set  
00000644  6900 000C                279      bvs EORI_TO_SR_FAIL     * branch if V set  
00000648  6500 0008                280      bcs EORI_TO_SR_FAIL     * branch if C set  
0000064C                           281     
0000064C  46FC 2700                282      move #$2700, SR        * Put flags back to initial value
00000650                           283  
00000650  4E75                     284      rts
00000652                           285      
00000652  60FE                     286  EORI_TO_SR_FAIL: bra EORI_TO_SR_FAIL
00000654                           287     
00000654                           288  
00000654                           289  
00000654                           290  *-----------------------------------------------------------
00000654                           291  *-----------------------------------------------------------
00000654                           292  * OPCODE : ANDI_TO_CCR
00000654                           293  *-----------------------------------------------------------
00000654                           294  *-----------------------------------------------------------
00000654                           295  op_ANDI_TO_CCR: 
00000654                           296  
00000654  44FC 00FF                297      move #$FF, CCR
00000658  023C 00FF                298      andi.b #$FF, CCR
0000065C  6A00 002C                299      bpl ANDI_TO_CCR_FAIL     * branch if Z clear  
00000660  6600 0028                300      bne ANDI_TO_CCR_FAIL     * branch if N clear
00000664  6800 0024                301      bvc ANDI_TO_CCR_FAIL     * branch if V clear 
00000668  6400 0020                302      bcc ANDI_TO_CCR_FAIL     * branch if C clear 
0000066C                           303      
0000066C  44FC 00FF                304      move #$FF, CCR
00000670  023C 0000                305      andi.b #$00, CCR
00000674  6700 0014                306      beq ANDI_TO_CCR_FAIL     * branch if Z set  
00000678  6B00 0010                307      bmi ANDI_TO_CCR_FAIL     * branch if N set  
0000067C  6900 000C                308      bvs ANDI_TO_CCR_FAIL     * branch if V set  
00000680  6500 0008                309      bcs ANDI_TO_CCR_FAIL     * branch if C set  
00000684                           310     
00000684  46FC 2700                311      move #$2700, SR         * Put flags back to initial value
00000688                           312  
00000688  4E75                     313      rts
0000068A                           314      
0000068A  60FE                     315  ANDI_TO_CCR_FAIL: bra ANDI_TO_CCR_FAIL
0000068C                           316     
0000068C                           317  
0000068C                           318  *-----------------------------------------------------------
0000068C                           319  *-----------------------------------------------------------
0000068C                           320  * OPCODE : ANDI_TO_SR
0000068C                           321  *-----------------------------------------------------------
0000068C                           322  *-----------------------------------------------------------
0000068C                           323  op_ANDI_TO_SR: 
0000068C  46FC 20FF                324      move #$20FF, SR
00000690  027C FFFF                325      andi.w #$FFFF, SR
00000694  6A00 002C                326      bpl ANDI_TO_SR_FAIL     * branch if Z clear  
00000698  6600 0028                327      bne ANDI_TO_SR_FAIL     * branch if N clear
0000069C  6800 0024                328      bvc ANDI_TO_SR_FAIL     * branch if V clear 
000006A0  6400 0020                329      bcc ANDI_TO_SR_FAIL     * branch if C clear 
000006A4                           330      
000006A4  46FC 20FF                331      move #$20FF, SR
000006A8  027C FF00                332      andi.w #$FF00, SR
000006AC  6700 0014                333      beq ANDI_TO_SR_FAIL     * branch if Z set  
000006B0  6B00 0010                334      bmi ANDI_TO_SR_FAIL     * branch if N set  
000006B4  6900 000C                335      bvs ANDI_TO_SR_FAIL     * branch if V set  
000006B8  6500 0008                336      bcs ANDI_TO_SR_FAIL     * branch if C set  
000006BC                           337     
000006BC  46FC 2700                338      move #$2700, SR         * Put flags back to initial value
000006C0                           339  
000006C0  4E75                     340      rts
000006C2                           341      
000006C2  60FE                     342  ANDI_TO_SR_FAIL: bra ANDI_TO_SR_FAIL
000006C4                           343    
000006C4                           344    
000006C4                           345  *-----------------------------------------------------------
000006C4                           346  *-----------------------------------------------------------
000006C4                           347  * OPCODE : BTST
000006C4                           348  *-----------------------------------------------------------
000006C4                           349  *-----------------------------------------------------------
000006C4                           350  op_BTST: 
000006C4                           351  
000006C4                           352  *  Bit Number Static 
000006C4                           353      
000006C4                           354              * EA = Dn  - LONG only
000006C4  203C 80000001            355              move.l #$80000001 , d0      * populate test data
000006CA  0800 0000                356              btst.l #0 , d0              
000006CE  6700 04A4                357              beq BTST_FAIL               * branch if Z set
000006D2  0800 0001                358              btst.l #1 , d0              * 
000006D6  6600 049C                359              bne BTST_FAIL               * branch if Z clear  
000006DA  0800 001F                360              btst.l #31 , d0             * 
000006DE  6700 0494                361              beq BTST_FAIL               * branch if Z set
000006E2                           362              
000006E2                           363              
000006E2                           364              * EA = (An)  - BYTE only
000006E2  207C 00000100            365              move.l #$00000100 , a0      * point to memory to address 0x100
000006E8  10BC 0081                366              move.b #$81 , (a0)          * populate test data
000006EC  1210                     367              move.b (a0) , d1            * Check to see if data in memory is 0x81
000006EE  0810 0000                368              btst.b #0 , (a0)            
000006F2  6700 0480                369              beq BTST_FAIL               * branch if Z set
000006F6  0810 0001                370              btst.b #1 , (a0)            * 
000006FA  6600 0478                371              bne BTST_FAIL               * branch if Z clear  
000006FE  0810 0007                372              btst.b #7 , (a0)            * 
00000702  6700 0470                373              beq BTST_FAIL               * branch if Z set
00000706                           374              
00000706                           375              
00000706                           376              * EA = (An)+  - BYTE only
00000706  207C 00000100            377              move.l #$00000100 , a0      * point to memory to address 0x100 
0000070C  10FC 0001                378              move.b #$01 , (a0)+         * populate test data
00000710  10FC 00FC                379              move.b #$FC , (a0)+         * populate test data
00000714  10FC 0080                380              move.b #$80 , (a0)+         * populate test data
00000718  207C 00000100            381              move.l #$00000100 , a0      * point to memory to address 0x100 
0000071E  0818 0000                382              btst.b #0 , (a0)+            
00000722  6700 0450                383              beq BTST_FAIL               * branch if Z set
00000726  0818 0001                384              btst.b #1 , (a0)+           * 
0000072A  6600 0448                385              bne BTST_FAIL               * branch if Z clear  
0000072E  0818 0007                386              btst.b #7 , (a0)+           * 
00000732  6700 0440                387              beq BTST_FAIL               * branch if Z set
00000736                           388          
00000736                           389          
00000736                           390              * EA = -(An)  - BYTE only
00000736  207C 00000100            391              move.l #$00000100 , a0      * point to memory to address
0000073C  10FC 0080                392              move.b #$80 , (a0)+         * populate test data
00000740  10FC 00FC                393              move.b #$FC , (a0)+         * populate test data
00000744  10FC 0001                394              move.b #$01 , (a0)+         * populate test data
00000748  207C 00000103            395              move.l #$00000103 , a0      * point to memory to address 
0000074E  0820 0000                396              btst.b #0 , -(a0)            
00000752  6700 0420                397              beq BTST_FAIL               * branch if Z set
00000756  0820 0001                398              btst.b #1 , -(a0)           * 
0000075A  6600 0418                399              bne BTST_FAIL               * branch if Z clear  
0000075E  0820 0007                400              btst.b #7 , -(a0)           * 
00000762  6700 0410                401              beq BTST_FAIL               * branch if Z set
00000766                           402          
00000766                           403          
00000766                           404              * EA = n(An)  - BYTE only
00000766  207C 00000100            405              move.l #$00000100 , a0      * point to memory to address
0000076C  10FC 0001                406              move.b #$01 , (a0)+         * populate test data
00000770  10FC 00FC                407              move.b #$FC , (a0)+         * populate test data
00000774  10FC 0080                408              move.b #$80 , (a0)+         * populate test data
00000778  207C 00000100            409              move.l #$00000100 , a0      * point to memory to address
0000077E  0828 0000 0000           410              btst.b #0 , 0(a0)            
00000784  6700 03EE                411              beq BTST_FAIL               * branch if Z set
00000788  0828 0001 0001           412              btst.b #1 , 1(a0)           * 
0000078E  6600 03E4                413              bne BTST_FAIL               * branch if Z clear  
00000792  0828 0007 0002           414              btst.b #7 , 2(a0)           * 
00000798  6700 03DA                415              beq BTST_FAIL               * branch if Z set
0000079C                           416          
0000079C                           417          
0000079C                           418              * EA = n(An,R.W)  - BYTE only
0000079C  207C 00000100            419              move.l #$00000100 , a0      * point to memory to address
000007A2  227C 00000000            420              move.l #$00000000 , a1      * point to memory to address
000007A8  247C 00000001            421              move.l #$00000001 , a2      * point to memory to address
000007AE  7000                     422              move.l #$00000000 , d0      * point to memory to address
000007B0  7201                     423              move.l #$00000001 , d1      * point to memory to address
000007B2  0830 0000 0000           424              btst.b #0 , 0(a0,d0.w)            
000007B8  6700 03BA                425              beq BTST_FAIL               * branch if Z set
000007BC  0830 0001 1000           426              btst.b #1 , 0(a0,d1.w)      * 
000007C2  6600 03B0                427              bne BTST_FAIL               * branch if Z clear  
000007C6  0830 0007 1001           428              btst.b #7 , 1(a0,d1.w)      * 
000007CC  6700 03A6                429              beq BTST_FAIL               * branch if Z set
000007D0                           430              * EA = n(An,R.L)  - BYTE only
000007D0  0830 0000 0800           431              btst.b #0 , 0(a0,d0.l)  
000007D6  6700 039C                432              beq BTST_FAIL               * branch if Z set
000007DA  0830 0001 1800           433              btst.b #1 , 0(a0,d1.l)      * 
000007E0  6600 0392                434              bne BTST_FAIL               * branch if Z clear  
000007E4  0830 0007 1801           435              btst.b #7 , 1(a0,d1.l)      * 
000007EA  6700 0388                436              beq BTST_FAIL               * branch if Z set
000007EE                           437              * EA = n(An,A.W)  - BYTE only
000007EE  0830 0000 9000           438              btst.b #0 , 0(a0,a1.w)            
000007F4  6700 037E                439              beq BTST_FAIL               * branch if Z set
000007F8  0830 0001 A000           440              btst.b #1 , 0(a0,a2.w)      * 
000007FE  6600 0374                441              bne BTST_FAIL               * branch if Z clear  
00000802  0830 0007 A001           442              btst.b #7 , 1(a0,a2.w)      * 
00000808  6700 036A                443              beq BTST_FAIL               * branch if Z set
0000080C                           444              * EA = n(An,A.L)  - BYTE only
0000080C  0830 0000 9800           445              btst.b #0 , 0(a0,a1.l)  
00000812  6700 0360                446              beq BTST_FAIL               * branch if Z set
00000816  0830 0001 A800           447              btst.b #1 , 0(a0,a2.l)      * 
0000081C  6600 0356                448              bne BTST_FAIL               * branch if Z clear  
00000820  0830 0007 A801           449              btst.b #7 , 1(a0,a2.l)      * 
00000826  6700 034C                450              beq BTST_FAIL               * branch if Z set
0000082A                           451          
0000082A                           452          
0000082A                           453              * EA = x.W  - BYTE only
0000082A  0838 0000 0100           454              btst.b #0 , $0100            
00000830  6700 0342                455              beq BTST_FAIL               * branch if Z set
00000834  0838 0001 0101           456              btst.b #1 , $0101           * 
0000083A  6600 0338                457              bne BTST_FAIL               * branch if Z clear  
0000083E  0838 0007 0102           458              btst.b #7 , $0102           * 
00000844  6700 032E                459              beq BTST_FAIL               * branch if Z set
00000848                           460          
00000848                           461          
00000848                           462              * EA = x.L  - BYTE only
00000848  207C 000F0100            463              move.l #$000F0100 , a0      * point to memory to address 0x100 
0000084E  10FC 0001                464              move.b #$01 , (a0)+         * populate test data
00000852  10FC 00FC                465              move.b #$FC , (a0)+         * populate test data
00000856  10FC 0080                466              move.b #$80 , (a0)+         * populate test data
0000085A  0839 0000 000F0100       467              btst.b #0 , $000F0100 
00000862  6700 0310                468              beq BTST_FAIL               * branch if Z set
00000866  0839 0001 000F0101       469              btst.b #1 , $000F0101       * 
0000086E  6600 0304                470              bne BTST_FAIL               * branch if Z clear  
00000872  0839 0007 000F0102       471              btst.b #7 , $000F0102       * 
0000087A  6700 02F8                472              beq BTST_FAIL               * branch if Z set
0000087E                           473          
0000087E                           474          
0000087E                           475              * EA = x(PC)  - BYTE only
0000087E  4BFA FE44                476              lea op_BTST(pc) , a5
00000882  083A 0000 FE3E           477              btst.b #0 , op_BTST(pc) 
00000888  6600 02EA                478              bne BTST_FAIL               * branch if Z clear  
0000088C  083A 0003 0026           479              btst.b #3 ,op_BTST0(pc)     * 
00000892  6700 02E0                480              beq BTST_FAIL               * branch if Z set
00000896  083A 0006 0094           481              btst.b #6 , op_BTST12(pc)    * 
0000089C  6700 02D6                482              beq BTST_FAIL               * branch if Z set
000008A0                           483    
000008A0                           484    
000008A0                           485              * EA = n(PC,R.W)  - BYTE only
000008A0  207C 00000100            486              move.l #$00000100 , a0      * point to memory to address
000008A6  227C 00000000            487              move.l #$00000000 , a1      * point to memory to address
000008AC  247C 00000001            488              move.l #$00000001 , a2      * point to memory to address
000008B2  7000                     489              move.l #$00000000 , d0      * point to memory to address
000008B4  7201                     490              move.l #$00000001 , d1      * point to memory to address
000008B6                           491      
000008B6  083B 0000 00FC           492  op_BTST0:   btst.b #0 , op_BTST0(pc,d0.w)            
000008BC  6600 02B6                493              bne BTST_FAIL               * branch if Z clear  
000008C0                           494              
000008C0  4BFB 1002                495              lea op_BTST1(pc,d1.w) , a5
000008C4  083B 0001 10FC           496  op_BTST1:   btst.b #1 , op_BTST1(pc,d1.w)      * 
000008CA  6700 02A8                497              beq BTST_FAIL               * branch if Z set
000008CE  083B 0007 10FC           498  op_BTST2:   btst.b #7 , op_BTST2(pc,d1.w)      * 
000008D4  6600 029E                499              bne BTST_FAIL               * branch if Z clear  
000008D8                           500              * EA = n(PC,R.L)  - BYTE only
000008D8  083B 0000 08FC           501  op_BTST3:   btst.b #0 , op_BTST3(pc,d0.l)  
000008DE  6600 0294                502              bne BTST_FAIL               * branch if Z clear  
000008E2  083B 0001 18FC           503  op_BTST4:   btst.b #1 , op_BTST4(pc,d1.l)      * 
000008E8  6700 028A                504              beq BTST_FAIL               * branch if Z set
000008EC  083B 0007 18FC           505  op_BTST5:   btst.b #7 , op_BTST5(pc,d1.l)      * 
000008F2  6600 0280                506              bne BTST_FAIL               * branch if Z clear  
000008F6                           507              * EA = n(PC,A.W)  - BYTE only
000008F6  083B 0000 90FC           508  op_BTST6    btst.b #0 , op_BTST6(pc,a1.w)            
000008FC  6600 0276                509              bne BTST_FAIL               * branch if Z clear  
00000900  083B 0001 A0FC           510  op_BTST7:   btst.b #1 , op_BTST7(pc,a2.w)      * 
00000906  6700 026C                511              beq BTST_FAIL               * branch if Z set
0000090A  083B 0007 A0FC           512  op_BTST8:   btst.b #7 , op_BTST8(pc,a2.w)      * 
00000910  6600 0262                513              bne BTST_FAIL               * branch if Z clear  
00000914                           514              * EA = n(PC,A.L)  - BYTE only
00000914  083B 0000 98FC           515  op_BTST9:   btst.b #0 , op_BTST9(pc,a1.l)  
0000091A  6600 0258                516              bne BTST_FAIL               * branch if Z clear  
0000091E  083B 0001 A8FC           517  op_BTST10:  btst.b #1 , op_BTST10(pc,a2.l)      * 
00000924  6700 024E                518              beq BTST_FAIL               * branch if Z set
00000928  083B 0007 A8FC           519  op_BTST11:  btst.b #7 , op_BTST11(pc,a2.l)      * 
0000092E  6600 0244                520  op_BTST12:  bne BTST_FAIL               * branch if Z clear  
00000932                           521   
00000932                           522  
00000932                           523  
00000932                           524  * Bit Number Dynamic
00000932                           525      
00000932                           526              * EA = Dn  - LONG only
00000932  203C 80000001            527              move.l #$80000001 , d0      * populate test data
00000938  7A00                     528              move.l #0,  d5              * populate bit number to test
0000093A  7C01                     529              move.l #1,  d6              * populate bit number to test
0000093C  7E1F                     530              move.l #31, d7              * populate bit number to test
0000093E                           531              
0000093E  0B00                     532              btst.l d5 , d0              
00000940  6700 0232                533              beq BTST_FAIL               * branch if Z set
00000944  0D00                     534              btst.l d6 , d0              * 
00000946  6600 022C                535              bne BTST_FAIL               * branch if Z clear  
0000094A  0F00                     536              btst.l d7 , d0             * 
0000094C  6700 0226                537              beq BTST_FAIL               * branch if Z set
00000950                           538              
00000950                           539              
00000950                           540              * EA = (An)  - BYTE only
00000950  7A00                     541              move.l #0,  d5              * populate bit number to test
00000952  7C01                     542              move.l #1,  d6              * populate bit number to test
00000954  7E07                     543              move.l #7,  d7              * populate bit number to test           
00000956  207C 00000100            544              move.l #$00000100 , a0      * point to memory to address 0x100
0000095C  10BC 0081                545              move.b #$81 , (a0)          * populate test data
00000960  1210                     546              move.b (a0) , d1            * Check to see if data in memory is 0x81
00000962  0B10                     547              btst.b d5 , (a0)            
00000964  6700 020E                548              beq BTST_FAIL               * branch if Z set
00000968  0D10                     549              btst.b d6 , (a0)            * 
0000096A  6600 0208                550              bne BTST_FAIL               * branch if Z clear  
0000096E  0F10                     551              btst.b d7 , (a0)            * 
00000970  6700 0202                552              beq BTST_FAIL               * branch if Z set
00000974                           553              
00000974                           554  * ---
00000974                           555  
00000974                           556      
00000974                           557              * EA = (An)+  - BYTE only
00000974  207C 00000100            558              move.l #$00000100 , a0      * point to memory to address 0x100 
0000097A  10FC 0001                559              move.b #$01 , (a0)+         * populate test data
0000097E  10FC 00FC                560              move.b #$FC , (a0)+         * populate test data
00000982  10FC 0080                561              move.b #$80 , (a0)+         * populate test data
00000986  207C 00000100            562              move.l #$00000100 , a0      * point to memory to address 0x100 
0000098C  0B18                     563              btst.b d5 , (a0)+            
0000098E  6700 01E4                564              beq BTST_FAIL               * branch if Z set
00000992  0D18                     565              btst.b d6 , (a0)+           * 
00000994  6600 01DE                566              bne BTST_FAIL               * branch if Z clear  
00000998  0F18                     567              btst.b d7 , (a0)+           * 
0000099A  6700 01D8                568              beq BTST_FAIL               * branch if Z set
0000099E                           569          
0000099E                           570          
0000099E                           571              * EA = -(An)  - BYTE only
0000099E  207C 00000100            572              move.l #$00000100 , a0      * point to memory to address
000009A4  10FC 0080                573              move.b #$80 , (a0)+         * populate test data
000009A8  10FC 00FC                574              move.b #$FC , (a0)+         * populate test data
000009AC  10FC 0001                575              move.b #$01 , (a0)+         * populate test data
000009B0  207C 00000103            576              move.l #$00000103 , a0      * point to memory to address 
000009B6  0B20                     577              btst.b d5 , -(a0)            
000009B8  6700 01BA                578              beq BTST_FAIL               * branch if Z set
000009BC  0D20                     579              btst.b d6 , -(a0)           * 
000009BE  6600 01B4                580              bne BTST_FAIL               * branch if Z clear  
000009C2  0F20                     581              btst.b d7 , -(a0)           * 
000009C4  6700 01AE                582              beq BTST_FAIL               * branch if Z set
000009C8                           583          
000009C8                           584          
000009C8                           585              * EA = n(An)  - BYTE only
000009C8  207C 00000100            586              move.l #$00000100 , a0      * point to memory to address
000009CE  10FC 0001                587              move.b #$01 , (a0)+         * populate test data
000009D2  10FC 00FC                588              move.b #$FC , (a0)+         * populate test data
000009D6  10FC 0080                589              move.b #$80 , (a0)+         * populate test data
000009DA  207C 00000100            590              move.l #$00000100 , a0      * point to memory to address
000009E0  0B28 0000                591              btst.b d5 , 0(a0)            
000009E4  6700 018E                592              beq BTST_FAIL               * branch if Z set
000009E8  0D28 0001                593              btst.b d6 , 1(a0)           * 
000009EC  6600 0186                594              bne BTST_FAIL               * branch if Z clear  
000009F0  0F28 0002                595              btst.b d7 , 2(a0)           * 
000009F4  6700 017E                596              beq BTST_FAIL               * branch if Z set
000009F8                           597          
000009F8                           598          
000009F8                           599              * EA = n(An,R.W)  - BYTE only
000009F8  207C 00000100            600              move.l #$00000100 , a0      * point to memory to address
000009FE  227C 00000000            601              move.l #$00000000 , a1      * point to memory to address
00000A04  247C 00000001            602              move.l #$00000001 , a2      * point to memory to address
00000A0A  7000                     603              move.l #$00000000 , d0      * point to memory to address
00000A0C  7201                     604              move.l #$00000001 , d1      * point to memory to address
00000A0E  0B30 0000                605              btst.b d5 , 0(a0,d0.w)            
00000A12  6700 0160                606              beq BTST_FAIL               * branch if Z set
00000A16  0D30 1000                607              btst.b d6 , 0(a0,d1.w)      * 
00000A1A  6600 0158                608              bne BTST_FAIL               * branch if Z clear  
00000A1E  0F30 1001                609              btst.b d7 , 1(a0,d1.w)      * 
00000A22  6700 0150                610              beq BTST_FAIL               * branch if Z set
00000A26                           611              * EA = n(An,R.L)  - BYTE only
00000A26  0B30 0800                612              btst.b d5 , 0(a0,d0.l)  
00000A2A  6700 0148                613              beq BTST_FAIL               * branch if Z set
00000A2E  0D30 1800                614              btst.b d6 , 0(a0,d1.l)      * 
00000A32  6600 0140                615              bne BTST_FAIL               * branch if Z clear  
00000A36  0F30 1801                616              btst.b d7 , 1(a0,d1.l)      * 
00000A3A  6700 0138                617              beq BTST_FAIL               * branch if Z set
00000A3E                           618              * EA = n(An,A.W)  - BYTE only
00000A3E  0B30 9000                619              btst.b d5 , 0(a0,a1.w)            
00000A42  6700 0130                620              beq BTST_FAIL               * branch if Z set
00000A46  0D30 A000                621              btst.b d6 , 0(a0,a2.w)      * 
00000A4A  6600 0128                622              bne BTST_FAIL               * branch if Z clear  
00000A4E  0F30 A001                623              btst.b d7 , 1(a0,a2.w)      * 
00000A52  6700 0120                624              beq BTST_FAIL               * branch if Z set
00000A56                           625              * EA = n(An,A.L)  - BYTE only
00000A56  0B30 9800                626              btst.b d5 , 0(a0,a1.l)  
00000A5A  6700 0118                627              beq BTST_FAIL               * branch if Z set
00000A5E  0D30 A800                628              btst.b d6 , 0(a0,a2.l)      * 
00000A62  6600 0110                629              bne BTST_FAIL               * branch if Z clear  
00000A66  0F30 A801                630              btst.b d7 , 1(a0,a2.l)      * 
00000A6A  6700 0108                631              beq BTST_FAIL               * branch if Z set
00000A6E                           632          
00000A6E                           633          
00000A6E                           634              * EA = x.W  - BYTE only
00000A6E  0B38 0100                635              btst.b d5 , $0100            
00000A72  6700 0100                636              beq BTST_FAIL               * branch if Z set
00000A76  0D38 0101                637              btst.b d6 , $0101           * 
00000A7A  6600 00F8                638              bne BTST_FAIL               * branch if Z clear  
00000A7E  0F38 0102                639              btst.b d7 , $0102           * 
00000A82  6700 00F0                640              beq BTST_FAIL               * branch if Z set
00000A86                           641          
00000A86                           642          
00000A86                           643              * EA = x.L  - BYTE only
00000A86  207C 000F0100            644              move.l #$000F0100 , a0      * point to memory to address 0x100 
00000A8C  10FC 0001                645              move.b #$01 , (a0)+         * populate test data
00000A90  10FC 00FC                646              move.b #$FC , (a0)+         * populate test data
00000A94  10FC 0080                647              move.b #$80 , (a0)+         * populate test data
00000A98  0B39 000F0100            648              btst.b d5 , $000F0100 
00000A9E  6700 00D4                649              beq BTST_FAIL               * branch if Z set
00000AA2  0D39 000F0101            650              btst.b d6 , $000F0101       * 
00000AA8  6600 00CA                651              bne BTST_FAIL               * branch if Z clear  
00000AAC  0F39 000F0102            652              btst.b d7 , $000F0102       * 
00000AB2  6700 00C0                653              beq BTST_FAIL               * branch if Z set
00000AB6                           654          
00000AB6                           655          
00000AB6                           656              * EA = x(PC)  - BYTE only
00000AB6  7C03                     657              move.l #3,  d6              * populate bit number to test
00000AB8  7E06                     658              move.l #6,  d7              * populate bit number to test
00000ABA  4BFA FC08                659              lea op_BTST(pc) , a5
00000ABE  0B3A FC04                660              btst.b d5 , op_BTST(pc) 
00000AC2  6600 00B0                661              bne BTST_FAIL               * branch if Z clear  
00000AC6  0D3A FDEE                662              btst.b d6 ,op_BTST0(pc)     * 
00000ACA  6700 00A8                663              beq BTST_FAIL               * branch if Z set
00000ACE  0F3A FE5E                664              btst.b d7 , op_BTST12(pc)    * 
00000AD2  6700 00A0                665              beq BTST_FAIL               * branch if Z set
00000AD6                           666    
00000AD6                           667    
00000AD6                           668              * EA = n(PC,R.W)  - BYTE only
00000AD6  207C 00000100            669              move.l #$00000100 , a0      * point to memory to address
00000ADC  227C 00000000            670              move.l #$00000000 , a1      * point to memory to address
00000AE2  247C 00000001            671              move.l #$00000001 , a2      * point to memory to address
00000AE8  7000                     672              move.l #$00000000 , d0      * point to memory to address
00000AEA  7201                     673              move.l #$00000001 , d1      * point to memory to address
00000AEC  7C01                     674              move.l #1,  d6              * populate bit number to test
00000AEE  7E07                     675              move.l #7,  d7              * populate bit number to test
00000AF0                           676      
00000AF0  0B3B 00FE                677  op_BTST20:  btst.b d5 , op_BTST20(pc,d0.w)            
00000AF4  6700 007E                678              beq BTST_FAIL               * branch if Z set            
00000AF8  4BFB 1002                679              lea op_BTST21(pc,d1.w) , a5
00000AFC  0D3B 10FE                680  op_BTST21:  btst.b d6 , op_BTST21(pc,d1.w)      * 
00000B00  6700 0072                681              beq BTST_FAIL               * branch if Z set
00000B04  0F3B 10FE                682  op_BTST22:  btst.b d7 , op_BTST22(pc,d1.w)      * 
00000B08  6600 006A                683              bne BTST_FAIL               * branch if Z clear  
00000B0C                           684              * EA = n(PC,R.L)  - BYTE only
00000B0C  0B3B 08FE                685  op_BTST23:  btst.b d5 , op_BTST23(pc,d0.l)  
00000B10  6700 0062                686              beq BTST_FAIL               * branch if Z set
00000B14  0D3B 18FE                687  op_BTST24: btst.b d6 , op_BTST24(pc,d1.l)      * 
00000B18  6700 005A                688              beq BTST_FAIL               * branch if Z set
00000B1C  0F3B 18FE                689  op_BTST25  btst.b d7 , op_BTST25(pc,d1.l)      * 
00000B20  6600 0052                690              bne BTST_FAIL               * branch if Z clear  
00000B24                           691              * EA = n(PC,A.W)  - BYTE only
00000B24  0B3B 90FE                692  op_BTST26   btst.b d5 , op_BTST26(pc,a1.w)            
00000B28  6700 004A                693              beq BTST_FAIL               * branch if Z set
00000B2C  0D3B A0FE                694  op_BTST27:  btst.b d6 , op_BTST27(pc,a2.w)      * 
00000B30  6700 0042                695              beq BTST_FAIL               * branch if Z set
00000B34  0F3B A0FE                696  op_BTST28:  btst.b d7 , op_BTST28(pc,a2.w)      * 
00000B38  6600 003A                697              bne BTST_FAIL               * branch if Z clear  
00000B3C                           698              * EA = n(PC,A.L)  - BYTE only
00000B3C  0B3B 98FE                699  op_BTST29:  btst.b d5 , op_BTST29(pc,a1.l)  
00000B40  6700 0032                700              beq BTST_FAIL               * branch if Z set
00000B44  0D3B A8FE                701  op_BTST30:  btst.b d6 , op_BTST30(pc,a2.l)      * 
00000B48  6700 002A                702              beq BTST_FAIL               * branch if Z set
00000B4C  0F3B A8FE                703  op_BTST31:  btst.b d7 , op_BTST31(pc,a2.l)      * 
00000B50  6600 0022                704  op_BTST32:  bne BTST_FAIL               * branch if Z clear  
00000B54                           705   
00000B54                           706              * EA = #x  - BYTE only
00000B54                           707  
00000B54  7A00                     708              move.l #0,  d5              * populate bit number to test
00000B56  7C03                     709              move.l #3,  d6              * populate bit number to test
00000B58  7E07                     710              move.l #7,  d7              * populate bit number to test
00000B5A                           711              
00000B5A  0B3C 0088                712              btst.b d5 , #$88
00000B5E  6600 0014                713              bne BTST_FAIL               * branch if Z clear  
00000B62  0D3C 0088                714              btst.b d6 , #$88
00000B66  6700 000C                715              beq BTST_FAIL               * branch if Z set
00000B6A  0F3C 0088                716              btst.b d7 , #$88
00000B6E  6700 0004                717              beq BTST_FAIL               * branch if Z set
00000B72                           718              
00000B72                           719  
00000B72  4E75                     720      rts
00000B74                           721      
00000B74  60FE                     722  BTST_FAIL: bra BTST_FAIL
00000B76                           723     
00000B76                           724   
00000B76                           725   
00000B76                           726    
00000B76                           727  *-----------------------------------------------------------
00000B76                           728  *-----------------------------------------------------------
00000B76                           729  * OPCODE : BCHG
00000B76                           730  *-----------------------------------------------------------
00000B76                           731  *-----------------------------------------------------------
00000B76                           732  op_BCHG: 
00000B76                           733  
00000B76                           734  
00000B76                           735  *  Bit Number Static 
00000B76                           736      
00000B76                           737              * EA = Dn  - LONG only
00000B76  203C 80000001            738              move.l #$80000001 , d0      * populate test data
00000B7C  0840 0000                739              bchg.l #0 , d0              
00000B80  6700 0484                740              beq BCHG_FAIL               * branch if Z set
00000B84  0840 0001                741              bchg.l #1 , d0              * 
00000B88  6600 047C                742              bne BCHG_FAIL               * branch if Z clear  
00000B8C  0840 001F                743              bchg.l #31 , d0             * 
00000B90  6700 0474                744              beq BCHG_FAIL               * branch if Z set
00000B94  0C80 00000002            745              cmpi.l #$00000002 , d0
00000B9A  6600 046A                746              bne BCHG_FAIL               * branch if Z clear  
00000B9E                           747  
00000B9E                           748              
00000B9E                           749              * EA = (An)  - BYTE only
00000B9E  207C 00000100            750              move.l #$00000100 , a0      * point to memory to address 0x100
00000BA4  10BC 0081                751              move.b #$81 , (a0)          * populate test data
00000BA8  1210                     752              move.b (a0) , d1            * Check to see if data in memory is 0x81
00000BAA  0850 0000                753              bchg.b #0 , (a0)            
00000BAE  6700 0456                754              beq BCHG_FAIL               * branch if Z set
00000BB2  0850 0001                755              bchg.b #1 , (a0)            * 
00000BB6  6600 044E                756              bne BCHG_FAIL               * branch if Z clear  
00000BBA  0850 0007                757              bchg.b #7 , (a0)            * 
00000BBE  6700 0446                758              beq BCHG_FAIL               * branch if Z set
00000BC2  0C10 0002                759              cmpi.b #$02 , (a0)
00000BC6  6600 043E                760              bne BCHG_FAIL               * branch if Z clear  
00000BCA                           761              
00000BCA                           762              * EA = (An)+  - BYTE only
00000BCA  207C 00000100            763              move.l #$00000100 , a0      * point to memory to address 0x100 
00000BD0  10FC 0001                764              move.b #$01 , (a0)+         * populate test data
00000BD4  10FC 00FC                765              move.b #$FC , (a0)+         * populate test data
00000BD8  10FC 0080                766              move.b #$80 , (a0)+         * populate test data
00000BDC  207C 00000100            767              move.l #$00000100 , a0      * point to memory to address 0x100 
00000BE2  0858 0000                768              bchg.b #0 , (a0)+            
00000BE6  6700 041E                769              beq BCHG_FAIL               * branch if Z set
00000BEA  0858 0001                770              bchg.b #1 , (a0)+           * 
00000BEE  6600 0416                771              bne BCHG_FAIL               * branch if Z clear  
00000BF2  0858 0007                772              bchg.b #7 , (a0)+           * 
00000BF6  6700 040E                773              beq BCHG_FAIL               * branch if Z set
00000BFA  207C 00000100            774              move.l #$00000100 , a0      * point to memory to address 0x100 
00000C00  0C18 0000                775              cmpi.b #$00 , (a0)+
00000C04  6600 0400                776              bne BCHG_FAIL               * branch if Z clear  
00000C08  0C18 00FE                777              cmpi.b #$FE , (a0)+
00000C0C  6600 03F8                778              bne BCHG_FAIL               * branch if Z clear  
00000C10  0C18 0000                779              cmpi.b #$00 , (a0)+
00000C14  6600 03F0                780              bne BCHG_FAIL               * branch if Z clear  
00000C18                           781          
00000C18                           782              * EA = -(An)  - BYTE only
00000C18  207C 00000100            783              move.l #$00000100 , a0      * point to memory to address
00000C1E  10FC 0080                784              move.b #$80 , (a0)+         * populate test data
00000C22  10FC 00FC                785              move.b #$FC , (a0)+         * populate test data
00000C26  10FC 0001                786              move.b #$01 , (a0)+         * populate test data
00000C2A  207C 00000103            787              move.l #$00000103 , a0      * point to memory to address 
00000C30  0860 0000                788              bchg.b #0 , -(a0)            
00000C34  6700 03D0                789              beq BCHG_FAIL               * branch if Z set
00000C38  0860 0001                790              bchg.b #1 , -(a0)           * 
00000C3C  6600 03C8                791              bne BCHG_FAIL               * branch if Z clear  
00000C40  0860 0007                792              bchg.b #7 , -(a0)           * 
00000C44  6700 03C0                793              beq BCHG_FAIL               * branch if Z set
00000C48  207C 00000103            794              move.l #$00000103 , a0      * point to memory to address 0x100 
00000C4E  0C20 0000                795              cmpi.b #$00 , -(a0)
00000C52  6600 03B2                796              bne BCHG_FAIL               * branch if Z clear  
00000C56  0C20 00FE                797              cmpi.b #$FE , -(a0)
00000C5A  6600 03AA                798              bne BCHG_FAIL               * branch if Z clear  
00000C5E  0C20 0000                799              cmpi.b #$00 , -(a0)
00000C62  6600 03A2                800              bne BCHG_FAIL               * branch if Z clear  
00000C66                           801          
00000C66                           802          
00000C66                           803              * EA = n(An)  - BYTE only
00000C66  207C 00000100            804              move.l #$00000100 , a0      * point to memory to address
00000C6C  10FC 0001                805              move.b #$01 , (a0)+         * populate test data
00000C70  10FC 00FC                806              move.b #$FC , (a0)+         * populate test data
00000C74  10FC 0080                807              move.b #$80 , (a0)+         * populate test data
00000C78  207C 00000100            808              move.l #$00000100 , a0      * point to memory to address
00000C7E  0868 0000 0000           809              bchg.b #0 , 0(a0)            
00000C84  6700 0380                810              beq BCHG_FAIL               * branch if Z set
00000C88  0868 0001 0001           811              bchg.b #1 , 1(a0)           * 
00000C8E  6600 0376                812              bne BCHG_FAIL               * branch if Z clear  
00000C92  0868 0007 0002           813              bchg.b #7 , 2(a0)           * 
00000C98  6700 036C                814              beq BCHG_FAIL               * branch if Z set
00000C9C  207C 00000100            815              move.l #$00000100 , a0      * point to memory to address 0x100 
00000CA2  0C18 0000                816              cmpi.b #$00 , (a0)+
00000CA6  6600 035E                817              bne BCHG_FAIL               * branch if Z clear  
00000CAA  0C18 00FE                818              cmpi.b #$FE , (a0)+
00000CAE  6600 0356                819              bne BCHG_FAIL               * branch if Z clear  
00000CB2  0C18 0000                820              cmpi.b #$00 , (a0)+
00000CB6  6600 034E                821              bne BCHG_FAIL               * branch if Z clear  
00000CBA                           822                  
00000CBA                           823                  
00000CBA                           824              * EA = n(An,D.W)  - BYTE only
00000CBA  207C 00000100            825              move.l #$00000100 , a0      * point to memory to address
00000CC0  227C 00000000            826              move.l #$00000000 , a1      * point to memory to address
00000CC6  247C 00000001            827              move.l #$00000001 , a2      * point to memory to address
00000CCC  7000                     828              move.l #$00000000 , d0      * point to memory to address
00000CCE  7201                     829              move.l #$00000001 , d1      * point to memory to address
00000CD0  0870 0000 0000           830              bchg.b #0 , 0(a0,d0.w)            
00000CD6  6600 032E                831              bne BCHG_FAIL               * branch if Z clear  
00000CDA  0870 0001 1000           832              bchg.b #1 , 0(a0,d1.w)      * 
00000CE0  6700 0324                833              beq BCHG_FAIL               * branch if Z set
00000CE4  0870 0007 1001           834              bchg.b #7 , 1(a0,d1.w)      * 
00000CEA  6600 031A                835              bne BCHG_FAIL               * branch if Z clear  
00000CEE                           836              * EA = n(An,D.L)  - BYTE only
00000CEE  0870 0000 0800           837              bchg.b #0 , 0(a0,d0.l)  
00000CF4  6700 0310                838              beq BCHG_FAIL               * branch if Z set
00000CF8  0870 0001 1800           839              bchg.b #1 , 0(a0,d1.l)      * 
00000CFE  6600 0306                840              bne BCHG_FAIL               * branch if Z clear  
00000D02  0870 0007 1801           841              bchg.b #7 , 1(a0,d1.l)      * 
00000D08  6700 02FC                842              beq BCHG_FAIL               * branch if Z set
00000D0C                           843              * EA = n(An,A.W)  - BYTE only
00000D0C  0870 0000 9000           844              bchg.b #0 , 0(a0,a1.w)            
00000D12  6600 02F2                845              bne BCHG_FAIL               * branch if Z clear  
00000D16  0870 0001 A000           846              bchg.b #1 , 0(a0,a2.w)      * 
00000D1C  6700 02E8                847              beq BCHG_FAIL               * branch if Z set
00000D20  0870 0007 A001           848              bchg.b #7 , 1(a0,a2.w)      * 
00000D26  6600 02DE                849              bne BCHG_FAIL               * branch if Z clear  
00000D2A                           850              * EA = n(An,A.L)  - BYTE only
00000D2A  0870 0000 9800           851              bchg.b #0 , 0(a0,a1.l)  
00000D30  6700 02D4                852              beq BCHG_FAIL               * branch if Z set
00000D34  0870 0001 A800           853              bchg.b #1 , 0(a0,a2.l)      * 
00000D3A  6600 02CA                854              bne BCHG_FAIL               * branch if Z clear  
00000D3E  0870 0007 A801           855              bchg.b #7 , 1(a0,a2.l)      * 
00000D44  6700 02C0                856              beq BCHG_FAIL               * branch if Z set
00000D48  207C 00000100            857              move.l #$00000100 , a0      * point to memory to address 0x100 
00000D4E  0C18 0000                858              cmpi.b #$00 , (a0)+
00000D52  6600 02B2                859              bne BCHG_FAIL               * branch if Z clear  
00000D56  0C18 00FE                860              cmpi.b #$FE , (a0)+
00000D5A  6600 02AA                861              bne BCHG_FAIL               * branch if Z clear  
00000D5E  0C18 0000                862              cmpi.b #$00 , (a0)+
00000D62  6600 02A2                863              bne BCHG_FAIL               * branch if Z clear  
00000D66                           864      
00000D66                           865          
00000D66                           866              * EA = x.W  - BYTE only
00000D66  0878 0000 0100           867              bchg.b #0 , $0100            
00000D6C  6600 0298                868              bne BCHG_FAIL               * branch if Z clear  
00000D70  0878 0001 0101           869              bchg.b #1 , $0101           * 
00000D76  6700 028E                870              beq BCHG_FAIL               * branch if Z set
00000D7A  0878 0007 0102           871              bchg.b #7 , $0102           * 
00000D80  6600 0284                872              bne BCHG_FAIL               * branch if Z clear  
00000D84  207C 00000100            873              move.l #$00000100 , a0      * point to memory to address 0x100 
00000D8A  0C18 0001                874              cmpi.b #$01 , (a0)+
00000D8E  6600 0276                875              bne BCHG_FAIL               * branch if Z clear  
00000D92  0C18 00FC                876              cmpi.b #$FC , (a0)+
00000D96  6600 026E                877              bne BCHG_FAIL               * branch if Z clear  
00000D9A  0C18 0080                878              cmpi.b #$80 , (a0)+
00000D9E  6600 0266                879              bne BCHG_FAIL               * branch if Z clear  
00000DA2                           880              
00000DA2                           881              * EA = x.L  - BYTE only
00000DA2  207C 000F0100            882              move.l #$000F0100 , a0      * point to memory to address 0x100 
00000DA8  10FC 0001                883              move.b #$01 , (a0)+         * populate test data
00000DAC  10FC 00FC                884              move.b #$FC , (a0)+         * populate test data
00000DB0  10FC 0080                885              move.b #$80 , (a0)+         * populate test data
00000DB4  0879 0000 000F0100       886              bchg.b #0 , $000F0100 
00000DBC  6700 0248                887              beq BCHG_FAIL               * branch if Z set
00000DC0  0879 0001 000F0101       888              bchg.b #1 , $000F0101       * 
00000DC8  6600 023C                889              bne BCHG_FAIL               * branch if Z clear  
00000DCC  0879 0007 000F0102       890              bchg.b #7 , $000F0102       * 
00000DD4  6700 0230                891              beq BCHG_FAIL               * branch if Z set
00000DD8  207C 00000100            892              move.l #$00000100 , a0      * point to memory to address 0x100 
00000DDE  0C18 0001                893              cmpi.b #$01 , (a0)+
00000DE2  6600 0222                894              bne BCHG_FAIL               * branch if Z clear  
00000DE6  0C18 00FC                895              cmpi.b #$FC , (a0)+
00000DEA  6600 021A                896              bne BCHG_FAIL               * branch if Z clear  
00000DEE  0C18 0080                897              cmpi.b #$80 , (a0)+
00000DF2  6600 0212                898              bne BCHG_FAIL               * branch if Z clear  
00000DF6                           899              
00000DF6                           900  
00000DF6                           901  * Bit Number Dynamic
00000DF6                           902      
00000DF6                           903              * EA = Dn  - LONG only
00000DF6  203C 80000001            904              move.l #$80000001 , d0      * populate test data
00000DFC  7A00                     905              move.l #0,  d5              * populate bit number to test
00000DFE  7C01                     906              move.l #1,  d6              * populate bit number to test
00000E00  7E1F                     907              move.l #31, d7              * populate bit number to test
00000E02                           908              
00000E02  0B40                     909              bchg.l d5 , d0              
00000E04  6700 0200                910              beq BCHG_FAIL               * branch if Z set
00000E08  0D40                     911              bchg.l d6 , d0              * 
00000E0A  6600 01FA                912              bne BCHG_FAIL               * branch if Z clear  
00000E0E  0F40                     913              bchg.l d7 , d0             * 
00000E10  6700 01F4                914              beq BCHG_FAIL               * branch if Z set
00000E14  0C80 00000002            915              cmpi.l #$00000002 , d0
00000E1A  6600 01EA                916              bne BCHG_FAIL               * branch if Z clear  
00000E1E                           917  
00000E1E                           918              
00000E1E                           919              * EA = (An)  - BYTE only
00000E1E  7A00                     920              move.l #0,  d5              * populate bit number to test
00000E20  7C01                     921              move.l #1,  d6              * populate bit number to test
00000E22  7E07                     922              move.l #7,  d7              * populate bit number to test           
00000E24  207C 00000100            923              move.l #$00000100 , a0      * point to memory to address 0x100
00000E2A  10BC 0081                924              move.b #$81 , (a0)          * populate test data
00000E2E  1210                     925              move.b (a0) , d1            * Check to see if data in memory is 0x81
00000E30  0B50                     926              bchg.b d5 , (a0)            
00000E32  6700 01D2                927              beq BCHG_FAIL               * branch if Z set
00000E36  0D50                     928              bchg.b d6 , (a0)            * 
00000E38  6600 01CC                929              bne BCHG_FAIL               * branch if Z clear  
00000E3C  0F50                     930              bchg.b d7 , (a0)            * 
00000E3E  6700 01C6                931              beq BCHG_FAIL               * branch if Z set
00000E42  0C10 0002                932              cmpi.b #$02 , (a0)
00000E46  6600 01BE                933              bne BCHG_FAIL               * branch if Z clear  
00000E4A                           934              
00000E4A                           935      
00000E4A                           936              * EA = (An)+  - BYTE only
00000E4A  207C 00000100            937              move.l #$00000100 , a0      * point to memory to address 0x100 
00000E50  10FC 0001                938              move.b #$01 , (a0)+         * populate test data
00000E54  10FC 00FC                939              move.b #$FC , (a0)+         * populate test data
00000E58  10FC 0080                940              move.b #$80 , (a0)+         * populate test data
00000E5C  207C 00000100            941              move.l #$00000100 , a0      * point to memory to address 0x100 
00000E62  0B58                     942              bchg.b d5 , (a0)+            
00000E64  6700 01A0                943              beq BCHG_FAIL               * branch if Z set
00000E68  0D58                     944              bchg.b d6 , (a0)+           * 
00000E6A  6600 019A                945              bne BCHG_FAIL               * branch if Z clear  
00000E6E  0F58                     946              bchg.b d7 , (a0)+           * 
00000E70  6700 0194                947              beq BCHG_FAIL               * branch if Z set
00000E74  207C 00000100            948              move.l #$00000100 , a0      * point to memory to address 0x100 
00000E7A  0C18 0000                949              cmpi.b #$00 , (a0)+
00000E7E  6600 0186                950              bne BCHG_FAIL               * branch if Z clear  
00000E82  0C18 00FE                951              cmpi.b #$FE , (a0)+
00000E86  6600 017E                952              bne BCHG_FAIL               * branch if Z clear  
00000E8A  0C18 0000                953              cmpi.b #$00 , (a0)+
00000E8E  6600 0176                954              bne BCHG_FAIL               * branch if Z clear  
00000E92                           955                  
00000E92                           956              * EA = -(An)  - BYTE only
00000E92  207C 00000100            957              move.l #$00000100 , a0      * point to memory to address
00000E98  10FC 0080                958              move.b #$80 , (a0)+         * populate test data
00000E9C  10FC 00FC                959              move.b #$FC , (a0)+         * populate test data
00000EA0  10FC 0001                960              move.b #$01 , (a0)+         * populate test data
00000EA4  207C 00000103            961              move.l #$00000103 , a0      * point to memory to address 
00000EAA  0B60                     962              bchg.b d5 , -(a0)            
00000EAC  6700 0158                963              beq BCHG_FAIL               * branch if Z set
00000EB0  0D60                     964              bchg.b d6 , -(a0)           * 
00000EB2  6600 0152                965              bne BCHG_FAIL               * branch if Z clear  
00000EB6  0F60                     966              bchg.b d7 , -(a0)           * 
00000EB8  6700 014C                967              beq BCHG_FAIL               * branch if Z set
00000EBC  207C 00000103            968              move.l #$00000103 , a0      * point to memory to address 0x100 
00000EC2  0C20 0000                969              cmpi.b #$00 , -(a0)
00000EC6  6600 013E                970              bne BCHG_FAIL               * branch if Z clear  
00000ECA  0C20 00FE                971              cmpi.b #$FE , -(a0)
00000ECE  6600 0136                972              bne BCHG_FAIL               * branch if Z clear  
00000ED2  0C20 0000                973              cmpi.b #$00 , -(a0)
00000ED6  6600 012E                974              bne BCHG_FAIL               * branch if Z clear  
00000EDA                           975                  
00000EDA                           976              * EA = n(An)  - BYTE only
00000EDA  207C 00000100            977              move.l #$00000100 , a0      * point to memory to address
00000EE0  10FC 0001                978              move.b #$01 , (a0)+         * populate test data
00000EE4  10FC 00FC                979              move.b #$FC , (a0)+         * populate test data
00000EE8  10FC 0080                980              move.b #$80 , (a0)+         * populate test data
00000EEC  207C 00000100            981              move.l #$00000100 , a0      * point to memory to address
00000EF2  0B68 0000                982              bchg.b d5 , 0(a0)            
00000EF6  6700 010E                983              beq BCHG_FAIL               * branch if Z set
00000EFA  0D68 0001                984              bchg.b d6 , 1(a0)           * 
00000EFE  6600 0106                985              bne BCHG_FAIL               * branch if Z clear  
00000F02  0F68 0002                986              bchg.b d7 , 2(a0)           * 
00000F06  6700 00FE                987              beq BCHG_FAIL               * branch if Z set
00000F0A  207C 00000100            988              move.l #$00000100 , a0      * point to memory to address 0x100 
00000F10  0C18 0000                989              cmpi.b #$00 , (a0)+
00000F14  6600 00F0                990              bne BCHG_FAIL               * branch if Z clear  
00000F18  0C18 00FE                991              cmpi.b #$FE , (a0)+
00000F1C  6600 00E8                992              bne BCHG_FAIL               * branch if Z clear  
00000F20  0C18 0000                993              cmpi.b #$00 , (a0)+
00000F24  6600 00E0                994              bne BCHG_FAIL               * branch if Z clear  
00000F28                           995                  
00000F28                           996              * EA = n(An,R.W)  - BYTE only
00000F28  207C 00000100            997              move.l #$00000100 , a0      * point to memory to address
00000F2E  227C 00000000            998              move.l #$00000000 , a1      * point to memory to address
00000F34  247C 00000001            999              move.l #$00000001 , a2      * point to memory to address
00000F3A  7000                    1000              move.l #$00000000 , d0      * point to memory to address
00000F3C  7201                    1001              move.l #$00000001 , d1      * point to memory to address
00000F3E  0B70 0000               1002              bchg.b d5 , 0(a0,d0.w)            
00000F42  6600 00C2               1003              bne BCHG_FAIL               * branch if Z clear  
00000F46  0D70 1000               1004              bchg.b d6 , 0(a0,d1.w)      * 
00000F4A  6700 00BA               1005              beq BCHG_FAIL               * branch if Z set
00000F4E  0F70 1001               1006              bchg.b d7 , 1(a0,d1.w)      * 
00000F52  6600 00B2               1007              bne BCHG_FAIL               * branch if Z clear  
00000F56                          1008              * EA = n(An,R.L)  - BYTE only
00000F56  0B70 0800               1009              bchg.b d5 , 0(a0,d0.l)  
00000F5A  6700 00AA               1010              beq BCHG_FAIL               * branch if Z set
00000F5E  0D70 1800               1011              bchg.b d6 , 0(a0,d1.l)      * 
00000F62  6600 00A2               1012              bne BCHG_FAIL               * branch if Z clear  
00000F66  0F70 1801               1013              bchg.b d7 , 1(a0,d1.l)      * 
00000F6A  6700 009A               1014              beq BCHG_FAIL               * branch if Z set
00000F6E                          1015              * EA = n(An,A.W)  - BYTE only
00000F6E  0B70 9000               1016              bchg.b d5 , 0(a0,a1.w)            
00000F72  6600 0092               1017              bne BCHG_FAIL               * branch if Z clear  
00000F76  0D70 A000               1018              bchg.b d6 , 0(a0,a2.w)      * 
00000F7A  6700 008A               1019              beq BCHG_FAIL               * branch if Z set
00000F7E  0F70 A001               1020              bchg.b d7 , 1(a0,a2.w)      * 
00000F82  6600 0082               1021              bne BCHG_FAIL               * branch if Z clear  
00000F86                          1022              * EA = n(An,A.L)  - BYTE only
00000F86  0B70 9800               1023              bchg.b d5 , 0(a0,a1.l)  
00000F8A  6700 007A               1024              beq BCHG_FAIL               * branch if Z set
00000F8E  0D70 A800               1025              bchg.b d6 , 0(a0,a2.l)      * 
00000F92  6600 0072               1026              bne BCHG_FAIL               * branch if Z clear  
00000F96  0F70 A801               1027              bchg.b d7 , 1(a0,a2.l)      * 
00000F9A  6700 006A               1028              beq BCHG_FAIL               * branch if Z set
00000F9E  0C18 0000               1029              cmpi.b #$00 , (a0)+
00000FA2  6600 0062               1030              bne BCHG_FAIL               * branch if Z clear  
00000FA6                          1031              
00000FA6                          1032              * EA = x.W  - BYTE only
00000FA6  0B78 0100               1033              bchg.b d5 , $0100            
00000FAA  6600 005A               1034              bne BCHG_FAIL               * branch if Z clear  
00000FAE  0D78 0101               1035              bchg.b d6 , $0101           * 
00000FB2  6700 0052               1036              beq BCHG_FAIL               * branch if Z set
00000FB6  0F78 0102               1037              bchg.b d7 , $0102           * 
00000FBA  6600 004A               1038              bne BCHG_FAIL               * branch if Z clear  
00000FBE  0C18 00FC               1039              cmpi.b #$FC , (a0)+
00000FC2  6600 0042               1040              bne BCHG_FAIL               * branch if Z clear  
00000FC6                          1041                      
00000FC6                          1042              * EA = x.L  - BYTE only
00000FC6  207C 000F0100           1043              move.l #$000F0100 , a0      * point to memory to address 0x100 
00000FCC  10FC 0001               1044              move.b #$01 , (a0)+         * populate test data
00000FD0  10FC 00FC               1045              move.b #$FC , (a0)+         * populate test data
00000FD4  10FC 0080               1046              move.b #$80 , (a0)+         * populate test data
00000FD8  0B79 000F0100           1047              bchg.b d5 , $000F0100 
00000FDE  6700 0026               1048              beq BCHG_FAIL               * branch if Z set
00000FE2  0D79 000F0101           1049              bchg.b d6 , $000F0101       * 
00000FE8  6600 001C               1050              bne BCHG_FAIL               * branch if Z clear  
00000FEC  0F79 000F0102           1051              bchg.b d7 , $000F0102       * 
00000FF2  6700 0012               1052              beq BCHG_FAIL               * branch if Z set
00000FF6  207C 000F0101           1053              move.l #$000F0101 , a0      * point to memory to address 0x100 
00000FFC  0C10 00FE               1054              cmpi.b #$FE , (a0)
00001000  6600 0004               1055              bne BCHG_FAIL               * branch if Z clear  
00001004                          1056                      
00001004                          1057  
00001004  4E75                    1058      rts
00001006                          1059      
00001006  60FE                    1060  BCHG_FAIL: bra BCHG_FAIL
00001008                          1061  
00001008                          1062  
00001008                          1063  
00001008                          1064    
00001008                          1065  *-----------------------------------------------------------
00001008                          1066  *-----------------------------------------------------------
00001008                          1067  * OPCODE : BCLR
00001008                          1068  *-----------------------------------------------------------
00001008                          1069  *-----------------------------------------------------------
00001008                          1070  op_BCLR: 
00001008                          1071  
00001008                          1072  
00001008                          1073  *  Bit Number Static 
00001008                          1074      
00001008                          1075              * EA = Dn  - LONG only
00001008  203C FF0000FF           1076              move.l #$FF0000FF , d0      * populate test data
0000100E  0880 0000               1077              bclr.l #0 , d0              
00001012  67FE                    1078              beq *               * branch if Z set
00001014  0880 0001               1079              bclr.l #1 , d0              * 
00001018  67FE                    1080              beq *               * branch if Z set
0000101A  0880 000F               1081              bclr.l #15 , d0             * 
0000101E  66FE                    1082              bne *               * branch if Z clear  
00001020  0880 001F               1083              bclr.l #31 , d0             * 
00001024  67FE                    1084              beq *               * branch if Z set
00001026  0C80 7F0000FC           1085              cmpi.l #$7F0000FC , d0
0000102C  66FE                    1086              bne *               * branch if Z clear  
0000102E                          1087  
0000102E                          1088              
0000102E                          1089              * EA = (An)  - BYTE only
0000102E  207C 00000100           1090              move.l #$00000100 , a0      * point to memory to address 0x100
00001034  10BC 000F               1091              move.b #$0F , (a0)          * populate test data
00001038  0890 0000               1092              bclr.b #0 , (a0)            
0000103C  67FE                    1093              beq *               * branch if Z set
0000103E  0890 0007               1094              bclr.b #7 , (a0)            * 
00001042  66FE                    1095              bne *               * branch if Z clear  
00001044  0C10 000E               1096              cmpi.b #$0E , (a0)
00001048  66FE                    1097              bne *               * branch if Z clear  
0000104A                          1098              
0000104A                          1099              * EA = (An)+  - BYTE only
0000104A  207C 00000100           1100              move.l #$00000100 , a0      * point to memory to address 0x100 
00001050  10FC 0001               1101              move.b #$01 , (a0)+         * populate test data
00001054  10FC 0000               1102              move.b #$00 , (a0)+         * populate test data
00001058  207C 00000100           1103              move.l #$00000100 , a0      * point to memory to address 0x100 
0000105E  0898 0000               1104              bclr.b #0 , (a0)+            
00001062  67FE                    1105              beq *               * branch if Z set
00001064  0898 0001               1106              bclr.b #1 , (a0)+           * 
00001068  66FE                    1107              bne *               * branch if Z clear  
0000106A  207C 00000100           1108              move.l #$00000100 , a0      * point to memory to address 0x100 
00001070  0C18 0000               1109              cmpi.b #$00 , (a0)+
00001074  66FE                    1110              bne *               * branch if Z clear  
00001076  0C18 0000               1111              cmpi.b #$00 , (a0)+
0000107A  66FE                    1112              bne *               * branch if Z clear  
0000107C                          1113   
0000107C                          1114          
0000107C                          1115              * EA = -(An)  - BYTE only
0000107C  207C 00000100           1116              move.l #$00000100 , a0      * point to memory to address
00001082  10FC 0001               1117              move.b #$01 , (a0)+         * populate test data
00001086  10FC 0080               1118              move.b #$80 , (a0)+         * populate test data
0000108A  08A0 0007               1119              bclr.b #7 , -(a0)            
0000108E  67FE                    1120              beq *               * branch if Z set
00001090  08A0 0000               1121              bclr.b #0 , -(a0)           * 
00001094  67FE                    1122              beq *               * branch if Z set
00001096  207C 00000102           1123              move.l #$00000102 , a0      * point to memory to address 0x100 
0000109C  0C20 0000               1124              cmpi.b #$00 , -(a0)
000010A0  66FE                    1125              bne *               * branch if Z clear  
000010A2  0C20 0000               1126              cmpi.b #$00 , -(a0)
000010A6  66FE                    1127              bne *               * branch if Z clear  
000010A8                          1128  
000010A8                          1129          
000010A8                          1130              * EA = n(An)  - BYTE only
000010A8  207C 00000100           1131              move.l #$00000100 , a0      * point to memory to address
000010AE  10FC 00FF               1132              move.b #$FF , (a0)+         * populate test data
000010B2  10FC 00FF               1133              move.b #$FF , (a0)+         * populate test data
000010B6  207C 00000100           1134              move.l #$00000100 , a0      * point to memory to address
000010BC  08A8 0000 0000          1135              bclr.b #0 , 0(a0)            
000010C2  67FE                    1136              beq *               * branch if Z set
000010C4  08A8 0004 0001          1137              bclr.b #4 , 1(a0)           * 
000010CA  67FE                    1138              beq *               * branch if Z set
000010CC  207C 00000100           1139              move.l #$00000100 , a0      * point to memory to address 0x100 
000010D2  0C18 00FE               1140              cmpi.b #$FE , (a0)+
000010D6  66FE                    1141              bne *               * branch if Z clear  
000010D8  0C18 00EF               1142              cmpi.b #$EF , (a0)+
000010DC  66FE                    1143              bne *               * branch if Z clear  
000010DE                          1144  
000010DE                          1145                  
000010DE                          1146              * EA = n(An,D.W)  - BYTE only
000010DE  207C 00000100           1147              move.l #$00000100 , a0      * point to memory to address
000010E4  227C 00000000           1148              move.l #$00000000 , a1      * point to memory to address
000010EA  247C 00000001           1149              move.l #$00000001 , a2      * point to memory to address
000010F0  7000                    1150              move.l #$00000000 , d0      * point to memory to address
000010F2  7201                    1151              move.l #$00000001 , d1      * point to memory to address
000010F4  10FC 00FF               1152              move.b #$FF , (a0)+         * populate test data
000010F8  10FC 00FF               1153              move.b #$FF , (a0)+         * populate test data
000010FC  207C 00000100           1154              move.l #$00000100 , a0      * point to memory to address
00001102  08B0 0000 0000          1155              bclr.b #0 , 0(a0,d0.w)            
00001108  67FE                    1156              beq *               * branch if Z set
0000110A  08B0 0001 1000          1157              bclr.b #1 , 0(a0,d1.w)      * 
00001110  67FE                    1158              beq *               * branch if Z set
00001112  08B0 0002 1001          1159              bclr.b #2 , 1(a0,d1.w)      * 
00001118  66FE                    1160              bne *               * branch if Z clear  
0000111A                          1161              * EA = n(An,D.L)  - BYTE only
0000111A  08B0 0003 0800          1162              bclr.b #3 , 0(a0,d0.l)  
00001120  67FE                    1163              beq *               * branch if Z set
00001122  08B0 0004 1800          1164              bclr.b #4 , 0(a0,d1.l)      * 
00001128  67FE                    1165              beq *               * branch if Z set
0000112A  08B0 0005 1801          1166              bclr.b #5 , 1(a0,d1.l)      * 
00001130  66FE                    1167              bne *               * branch if Z clear  
00001132                          1168              * EA = n(An,A.W)  - BYTE only
00001132  08B0 0006 9000          1169              bclr.b #6 , 0(a0,a1.w)            
00001138  67FE                    1170              beq *               * branch if Z set
0000113A  08B0 0001 A000          1171              bclr.b #1 , 0(a0,a2.w)      * 
00001140  66FE                    1172              bne *               * branch if Z clear  
00001142  08B0 0007 A001          1173              bclr.b #7 , 1(a0,a2.w)      * 
00001148  67FE                    1174              beq *               * branch if Z set
0000114A                          1175              * EA = n(An,A.L)  - BYTE only
0000114A  08B0 0000 9800          1176              bclr.b #0 , 0(a0,a1.l)  
00001150  66FE                    1177              bne *               * branch if Z clear  
00001152  08B0 0000 A800          1178              bclr.b #0 , 0(a0,a2.l)      * 
00001158  67FE                    1179              beq *               * branch if Z set
0000115A  08B0 0001 A801          1180              bclr.b #1 , 1(a0,a2.l)      * 
00001160  66FE                    1181              bne *               * branch if Z clear  
00001162  207C 00000100           1182              move.l #$00000100 , a0      * point to memory to address 0x100 
00001168  0C18 00B6               1183              cmpi.b #$B6 , (a0)+
0000116C  66FE                    1184              bne *               * branch if Z clear  
0000116E  0C18 00EC               1185              cmpi.b #$EC , (a0)+
00001172  66FE                    1186              bne *               * branch if Z clear  
00001174  0C18 0059               1187              cmpi.b #$59 , (a0)+
00001178  67FE                    1188              beq *               * branch if Z set
0000117A                          1189      
0000117A                          1190          
0000117A                          1191              * EA = x.W  - BYTE only
0000117A  207C 00000100           1192              move.l #$00000100 , a0      * point to memory to address
00001180  10FC 00FF               1193              move.b #$FF , (a0)+         * populate test data
00001184  08B8 0000 0100          1194              bclr.b #0 , $0100            
0000118A  67FE                    1195              beq *               * branch if Z set
0000118C  08B8 0001 0100          1196              bclr.b #1 , $0100           * 
00001192  67FE                    1197              beq *               * branch if Z set
00001194  207C 00000100           1198              move.l #$00000100 , a0      * point to memory to address 0x100 
0000119A  0C18 00FC               1199              cmpi.b #$FC , (a0)+
0000119E  66FE                    1200              bne *               * branch if Z clear  
000011A0                          1201  
000011A0                          1202              
000011A0                          1203              * EA = x.L  - BYTE only
000011A0  207C 000F0100           1204              move.l #$000F0100 , a0      * point to memory to address 0x100 
000011A6  10BC 00FF               1205              move.b #$FF , (a0)          * populate test data
000011AA  08B9 0000 000F0100      1206              bclr.b #0 , $000F0100 
000011B2  67FE                    1207              beq *               * branch if Z set
000011B4  08B9 0001 000F0100      1208              bclr.b #1 , $000F0100       * 
000011BC  67FE                    1209              beq *               * branch if Z set
000011BE  08B9 0002 000F0100      1210              bclr.b #2 , $000F0100       * 
000011C6  67FE                    1211              beq *               * branch if Z set
000011C8  207C 000F0100           1212              move.l #$000F0100 , a0      * point to memory to address 0x100 
000011CE  0C18 00F8               1213              cmpi.b #$F8 , (a0)+
000011D2  66FE                    1214              bne *               * branch if Z clear  
000011D4                          1215  
000011D4                          1216  
000011D4                          1217  * Bit Number Dynamic
000011D4                          1218      
000011D4                          1219              * EA = Dn  - LONG only
000011D4  203C FF00FF00           1220              move.l #$FF00FF00 , d0      * populate test data
000011DA  7A00                    1221              move.l #0,  d5              * populate bit number to test
000011DC  7C01                    1222              move.l #1,  d6              * populate bit number to test
000011DE  7E1F                    1223              move.l #31, d7              * populate bit number to test
000011E0                          1224              
000011E0  0B80                    1225              bclr.l d5 , d0              
000011E2  66FE                    1226              bne *               * branch if Z clear  
000011E4  0D80                    1227              bclr.l d6 , d0              * 
000011E6  66FE                    1228              bne *               * branch if Z clear  
000011E8  0F80                    1229              bclr.l d7 , d0             * 
000011EA  67FE                    1230              beq *               * branch if Z set
000011EC  0C80 7F00FF00           1231              cmpi.l #$7F00FF00 , d0
000011F2  66FE                    1232              bne *               * branch if Z clear  
000011F4                          1233  
000011F4                          1234              
000011F4                          1235              * EA = (An)  - BYTE only
000011F4  7A00                    1236              move.l #0,  d5              * populate bit number to test
000011F6  7C01                    1237              move.l #1,  d6              * populate bit number to test
000011F8  7E07                    1238              move.l #7,  d7              * populate bit number to test           
000011FA  207C 00000100           1239              move.l #$00000100 , a0      * point to memory to address 0x100
00001200  10BC 0081               1240              move.b #$81 , (a0)          * populate test data
00001204  0B90                    1241              bclr.b d5 , (a0)            
00001206  67FE                    1242              beq *               * branch if Z set
00001208  0D90                    1243              bclr.b d6 , (a0)            * 
0000120A  66FE                    1244              bne *               * branch if Z clear  
0000120C  0F90                    1245              bclr.b d7 , (a0)            * 
0000120E  67FE                    1246              beq *               * branch if Z set
00001210  0C10 0000               1247              cmpi.b #$00 , (a0)
00001214  66FE                    1248              bne *               * branch if Z clear  
00001216                          1249              
00001216                          1250      
00001216                          1251              * EA = (An)+  - BYTE only
00001216  207C 00000100           1252              move.l #$00000100 , a0      * point to memory to address 0x100 
0000121C  10FC 0001               1253              move.b #$01 , (a0)+         * populate test data
00001220  10FC 00FC               1254              move.b #$FC , (a0)+         * populate test data
00001224  10FC 0080               1255              move.b #$80 , (a0)+         * populate test data
00001228  207C 00000100           1256              move.l #$00000100 , a0      * point to memory to address 0x100 
0000122E  0B98                    1257              bclr.b d5 , (a0)+            
00001230  67FE                    1258              beq *               * branch if Z set
00001232  0D98                    1259              bclr.b d6 , (a0)+           * 
00001234  66FE                    1260              bne *               * branch if Z clear  
00001236  0F98                    1261              bclr.b d7 , (a0)+           * 
00001238  67FE                    1262              beq *               * branch if Z set
0000123A  207C 00000100           1263              move.l #$00000100 , a0      * point to memory to address 0x100 
00001240  0C18 0000               1264              cmpi.b #$00 , (a0)+
00001244  66FE                    1265              bne *               * branch if Z clear  
00001246  0C18 00FC               1266              cmpi.b #$FC , (a0)+
0000124A  66FE                    1267              bne *               * branch if Z clear  
0000124C  0C18 0000               1268              cmpi.b #$00 , (a0)+
00001250  66FE                    1269              bne *               * branch if Z clear  
00001252                          1270                  
00001252                          1271              * EA = -(An)  - BYTE only
00001252  207C 00000100           1272              move.l #$00000100 , a0      * point to memory to address
00001258  10FC 0080               1273              move.b #$80 , (a0)+         * populate test data
0000125C  10FC 00FC               1274              move.b #$FC , (a0)+         * populate test data
00001260  10FC 0001               1275              move.b #$01 , (a0)+         * populate test data
00001264  207C 00000103           1276              move.l #$00000103 , a0      * point to memory to address 
0000126A  0BA0                    1277              bclr.b d5 , -(a0)            
0000126C  67FE                    1278              beq *               * branch if Z set
0000126E  0DA0                    1279              bclr.b d6 , -(a0)           * 
00001270  66FE                    1280              bne *               * branch if Z clear  
00001272  0FA0                    1281              bclr.b d7 , -(a0)           * 
00001274  67FE                    1282              beq *               * branch if Z set
00001276  207C 00000103           1283              move.l #$00000103 , a0      * point to memory to address 0x100 
0000127C  0C20 0000               1284              cmpi.b #$00 , -(a0)
00001280  66FE                    1285              bne *               * branch if Z clear  
00001282  0C20 00FC               1286              cmpi.b #$FC , -(a0)
00001286  66FE                    1287              bne *               * branch if Z clear  
00001288  0C20 0000               1288              cmpi.b #$00 , -(a0)
0000128C  66FE                    1289              bne *               * branch if Z clear  
0000128E                          1290                  
0000128E                          1291              * EA = n(An)  - BYTE only
0000128E  207C 00000100           1292              move.l #$00000100 , a0      * point to memory to address
00001294  10FC 0001               1293              move.b #$01 , (a0)+         * populate test data
00001298  10FC 00FC               1294              move.b #$FC , (a0)+         * populate test data
0000129C  10FC 0080               1295              move.b #$80 , (a0)+         * populate test data
000012A0  207C 00000100           1296              move.l #$00000100 , a0      * point to memory to address
000012A6  0BA8 0000               1297              bclr.b d5 , 0(a0)            
000012AA  67FE                    1298              beq *               * branch if Z set
000012AC  0DA8 0001               1299              bclr.b d6 , 1(a0)           * 
000012B0  66FE                    1300              bne *               * branch if Z clear  
000012B2  0FA8 0002               1301              bclr.b d7 , 2(a0)           * 
000012B6  67FE                    1302              beq *               * branch if Z set
000012B8  207C 00000100           1303              move.l #$00000100 , a0      * point to memory to address 0x100 
000012BE  0C18 0000               1304              cmpi.b #$00 , (a0)+
000012C2  66FE                    1305              bne *               * branch if Z clear  
000012C4  0C18 00FC               1306              cmpi.b #$FC , (a0)+
000012C8  66FE                    1307              bne *               * branch if Z clear  
000012CA  0C18 0000               1308              cmpi.b #$00 , (a0)+
000012CE  66FE                    1309              bne *               * branch if Z clear  
000012D0                          1310                  
000012D0                          1311              * EA = n(An,R.W)  - BYTE only
000012D0  207C 00000100           1312              move.l #$00000100 , a0      * point to memory to address
000012D6  10FC 00FF               1313              move.b #$FF , (a0)+         * populate test data
000012DA  10FC 00FF               1314              move.b #$FF , (a0)+         * populate test data
000012DE  10FC 00FF               1315              move.b #$FF , (a0)+         * populate test data
000012E2  207C 00000103           1316              move.l #$00000103 , a0      * point to memory to address 
000012E8  207C 00000100           1317              move.l #$00000100 , a0      * point to memory to address
000012EE  227C 00000000           1318              move.l #$00000000 , a1      * point to memory to address
000012F4  247C 00000001           1319              move.l #$00000001 , a2      * point to memory to address
000012FA  7000                    1320              move.l #$00000000 , d0      * point to memory to address
000012FC  7201                    1321              move.l #$00000001 , d1      * point to memory to address
000012FE  0BB0 0000               1322              bclr.b d5 , 0(a0,d0.w)            
00001302  67FE                    1323              beq *               * branch if Z set
00001304  0DB0 1000               1324              bclr.b d6 , 0(a0,d1.w)      * 
00001308  67FE                    1325              beq *               * branch if Z set
0000130A  0FB0 1001               1326              bclr.b d7 , 1(a0,d1.w)      * 
0000130E  67FE                    1327              beq *               * branch if Z set
00001310                          1328              * EA = n(An,R.L)  - BYTE only
00001310  0BB0 0800               1329              bclr.b d5 , 0(a0,d0.l)  
00001314  66FE                    1330              bne *               * branch if Z clear  
00001316  0DB0 1800               1331              bclr.b d6 , 0(a0,d1.l)      * 
0000131A  66FE                    1332              bne *               * branch if Z clear  
0000131C  0FB0 1801               1333              bclr.b d7 , 1(a0,d1.l)      * 
00001320  66FE                    1334              bne *               * branch if Z clear  
00001322                          1335              * EA = n(An,A.W)  - BYTE only
00001322  0BB0 9000               1336              bclr.b d5 , 0(a0,a1.w)            
00001326  66FE                    1337              bne *               * branch if Z clear  
00001328  0DB0 A000               1338              bclr.b d6 , 0(a0,a2.w)      * 
0000132C  66FE                    1339              bne *               * branch if Z clear  
0000132E  0FB0 A001               1340              bclr.b d7 , 1(a0,a2.w)      * 
00001332  66FE                    1341              bne *               * branch if Z clear  
00001334                          1342              * EA = n(An,A.L)  - BYTE only
00001334  0BB0 9800               1343              bclr.b d5 , 0(a0,a1.l)  
00001338  66FE                    1344              bne *               * branch if Z clear  
0000133A  0DB0 A800               1345              bclr.b d6 , 0(a0,a2.l)      * 
0000133E  66FE                    1346              bne *               * branch if Z clear  
00001340  0FB0 A801               1347              bclr.b d7 , 1(a0,a2.l)      * 
00001344  66FE                    1348              bne *               * branch if Z clear  
00001346  207C 00000100           1349              move.l #$00000100 , a0      * point to memory to address 
0000134C  0C10 00FE               1350              cmpi.b #$FE , (a0)
00001350  66FE                    1351              bne *               * branch if Z clear  
00001352                          1352              
00001352                          1353              * EA = x.W  - BYTE only
00001352  207C 00000100           1354              move.l #$00000100 , a0      * point to memory to address
00001358  10FC 00FF               1355              move.b #$FF , (a0)+         * populate test data
0000135C  10FC 00FF               1356              move.b #$FF , (a0)+         * populate test data
00001360  10FC 00FF               1357              move.b #$FF , (a0)+         * populate test data
00001364  0BB8 0100               1358              bclr.b d5 , $0100            
00001368  67FE                    1359              beq *               * branch if Z set
0000136A  0DB8 0101               1360              bclr.b d6 , $0101           * 
0000136E  67FE                    1361              beq *               * branch if Z set
00001370  0FB8 0102               1362              bclr.b d7 , $0102           * 
00001374  67FE                    1363              beq *               * branch if Z set
00001376  207C 00000100           1364              move.l #$00000100 , a0      * point to memory to address
0000137C  0C18 00FE               1365              cmpi.b #$FE , (a0)+
00001380  66FE                    1366              bne *               * branch if Z clear  
00001382                          1367                      
00001382                          1368              * EA = x.L  - BYTE only
00001382  207C 000F0100           1369              move.l #$000F0100 , a0      * point to memory to address 0x100 
00001388  10FC 0001               1370              move.b #$01 , (a0)+         * populate test data
0000138C  10FC 00FC               1371              move.b #$FC , (a0)+         * populate test data
00001390  10FC 0080               1372              move.b #$80 , (a0)+         * populate test data
00001394  0BB9 000F0100           1373              bclr.b d5 , $000F0100 
0000139A  67FE                    1374              beq *               * branch if Z set
0000139C  0DB9 000F0101           1375              bclr.b d6 , $000F0101       * 
000013A2  66FE                    1376              bne *               * branch if Z clear  
000013A4  0FB9 000F0102           1377              bclr.b d7 , $000F0102       * 
000013AA  67FE                    1378              beq *               * branch if Z set
000013AC  207C 000F0101           1379              move.l #$000F0101 , a0      * point to memory to address 0x100 
000013B2  0C10 00FC               1380              cmpi.b #$FC , (a0)
000013B6  66FE                    1381              bne *               * branch if Z clear  
000013B8                          1382                      
000013B8                          1383  
000013B8                          1384  
000013B8  4E75                    1385      rts
000013BA                          1386      
000013BA                          1387  
000013BA                          1388  
000013BA                          1389  
000013BA                          1390  
000013BA                          1391    
000013BA                          1392  *-----------------------------------------------------------
000013BA                          1393  *-----------------------------------------------------------
000013BA                          1394  * OPCODE : BSET
000013BA                          1395  *-----------------------------------------------------------
000013BA                          1396  *-----------------------------------------------------------
000013BA                          1397  op_BSET: 
000013BA                          1398  
000013BA                          1399  
000013BA                          1400  *  Bit Number Static 
000013BA                          1401      
000013BA                          1402              * EA = Dn  - LONG only
000013BA  7000                    1403              move.l #$00000000 , d0      * populate test data
000013BC  08C0 0000               1404              bset.l #0 , d0              
000013C0  6600 0492               1405              bne BSET_FAIL               * branch if Z clear  
000013C4  08C0 0001               1406              bset.l #1 , d0              * 
000013C8  6600 048A               1407              bne BSET_FAIL               * branch if Z clear  
000013CC  08C0 000F               1408              bset.l #15 , d0             * 
000013D0  6600 0482               1409              bne BSET_FAIL               * branch if Z clear  
000013D4  08C0 001F               1410              bset.l #31 , d0             * 
000013D8  6600 047A               1411              bne BSET_FAIL               * branch if Z clear  
000013DC  0C80 80008003           1412              cmpi.l #$80008003 , d0
000013E2  6600 0470               1413              bne BSET_FAIL               * branch if Z clear  
000013E6                          1414  
000013E6                          1415              
000013E6                          1416              * EA = (An)  - BYTE only
000013E6  207C 00000100           1417              move.l #$00000100 , a0      * point to memory to address 0x100
000013EC  10BC 0000               1418              move.b #$00 , (a0)          * populate test data
000013F0  08D0 0000               1419              bset.b #0 , (a0)            
000013F4  6600 045E               1420              bne BSET_FAIL               * branch if Z clear  
000013F8  08D0 0007               1421              bset.b #7 , (a0)            * 
000013FC  6600 0456               1422              bne BSET_FAIL               * branch if Z clear  
00001400  0C10 0081               1423              cmpi.b #$81 , (a0)
00001404  6600 044E               1424              bne BSET_FAIL               * branch if Z clear  
00001408                          1425              
00001408                          1426              * EA = (An)+  - BYTE only
00001408  207C 00000100           1427              move.l #$00000100 , a0      * point to memory to address 0x100 
0000140E  10FC 0000               1428              move.b #$00 , (a0)+         * populate test data
00001412  10FC 0000               1429              move.b #$00 , (a0)+         * populate test data
00001416  207C 00000100           1430              move.l #$00000100 , a0      * point to memory to address 0x100 
0000141C  08D8 0000               1431              bset.b #0 , (a0)+            
00001420  6600 0432               1432              bne BSET_FAIL               * branch if Z clear  
00001424  08D8 0001               1433              bset.b #1 , (a0)+           * 
00001428  6600 042A               1434              bne BSET_FAIL               * branch if Z clear  
0000142C  207C 00000100           1435              move.l #$00000100 , a0      * point to memory to address 0x100 
00001432  0C18 0001               1436              cmpi.b #$01 , (a0)+
00001436  6600 041C               1437              bne BSET_FAIL               * branch if Z clear  
0000143A  0C18 0002               1438              cmpi.b #$02 , (a0)+
0000143E  6600 0414               1439              bne BSET_FAIL               * branch if Z clear  
00001442                          1440   
00001442                          1441          
00001442                          1442              * EA = -(An)  - BYTE only
00001442  207C 00000100           1443              move.l #$00000100 , a0      * point to memory to address
00001448  10FC 0000               1444              move.b #$00 , (a0)+         * populate test data
0000144C  10FC 0000               1445              move.b #$00 , (a0)+         * populate test data
00001450  08E0 0007               1446              bset.b #7 , -(a0)            
00001454  6600 03FE               1447              bne BSET_FAIL               * branch if Z clear  
00001458  08E0 0000               1448              bset.b #0 , -(a0)           * 
0000145C  6600 03F6               1449              bne BSET_FAIL               * branch if Z clear  
00001460  207C 00000102           1450              move.l #$00000102 , a0      * point to memory to address 0x100 
00001466  0C20 0080               1451              cmpi.b #$80 , -(a0)
0000146A  6600 03E8               1452              bne BSET_FAIL               * branch if Z clear  
0000146E  0C20 0001               1453              cmpi.b #$01 , -(a0)
00001472  6600 03E0               1454              bne BSET_FAIL               * branch if Z clear  
00001476                          1455  
00001476                          1456          
00001476                          1457              * EA = n(An)  - BYTE only
00001476  207C 00000100           1458              move.l #$00000100 , a0      * point to memory to address
0000147C  10FC 0000               1459              move.b #$00 , (a0)+         * populate test data
00001480  10FC 0000               1460              move.b #$00 , (a0)+         * populate test data
00001484  207C 00000100           1461              move.l #$00000100 , a0      * point to memory to address
0000148A  08E8 0000 0000          1462              bset.b #0 , 0(a0)            
00001490  6600 03C2               1463              bne BSET_FAIL               * branch if Z clear  
00001494  08E8 0004 0001          1464              bset.b #4 , 1(a0)           * 
0000149A  6600 03B8               1465              bne BSET_FAIL               * branch if Z clear  
0000149E  207C 00000100           1466              move.l #$00000100 , a0      * point to memory to address 0x100 
000014A4  0C18 0001               1467              cmpi.b #$01 , (a0)+
000014A8  6600 03AA               1468              bne BSET_FAIL               * branch if Z clear  
000014AC  0C18 0010               1469              cmpi.b #$10 , (a0)+
000014B0  6600 03A2               1470              bne BSET_FAIL               * branch if Z clear  
000014B4                          1471  
000014B4                          1472                  
000014B4                          1473              * EA = n(An,D.W)  - BYTE only
000014B4  207C 00000100           1474              move.l #$00000100 , a0      * point to memory to address
000014BA  227C 00000000           1475              move.l #$00000000 , a1      * point to memory to address
000014C0  247C 00000004           1476              move.l #$00000004 , a2      * point to memory to address
000014C6  7000                    1477              move.l #$00000000 , d0      * point to memory to address
000014C8  7201                    1478              move.l #$00000001 , d1      * point to memory to address
000014CA  10FC 0000               1479              move.b #$00 , (a0)+         * populate test data
000014CE  10FC 0000               1480              move.b #$00 , (a0)+         * populate test data
000014D2  10FC 0000               1481              move.b #$00 , (a0)+         * populate test data
000014D6  10FC 0000               1482              move.b #$00 , (a0)+         * populate test data
000014DA  10FC 0000               1483              move.b #$00 , (a0)+         * populate test data
000014DE  10FC 0000               1484              move.b #$00 , (a0)+         * populate test data
000014E2  10FC 0000               1485              move.b #$00 , (a0)+         * populate test data
000014E6  10FC 0000               1486              move.b #$00 , (a0)+         * populate test data
000014EA  10FC 0000               1487              move.b #$00 , (a0)+         * populate test data
000014EE  10FC 0000               1488              move.b #$00 , (a0)+         * populate test data
000014F2  207C 00000100           1489              move.l #$00000100 , a0      * point to memory to address
000014F8  08F0 0000 0000          1490              bset.b #0 , 0(a0,d0.w)            
000014FE  6600 0354               1491              bne BSET_FAIL               * branch if Z clear  
00001502  08F0 0001 1000          1492              bset.b #1 , 0(a0,d1.w)      * 
00001508  6600 034A               1493              bne BSET_FAIL               * branch if Z clear  
0000150C  08F0 0002 1001          1494              bset.b #2 , 1(a0,d1.w)      * 
00001512  6600 0340               1495              bne BSET_FAIL               * branch if Z clear  
00001516                          1496              * EA = n(An,D.L)  - BYTE only
00001516  08F0 0003 0802          1497              bset.b #3 , 2(a0,d0.l)  
0000151C  6600 0336               1498              bne BSET_FAIL               * branch if Z clear  
00001520  08F0 0004 1800          1499              bset.b #4 , 0(a0,d1.l)      * 
00001526  6600 032C               1500              bne BSET_FAIL               * branch if Z clear  
0000152A  08F0 0005 1801          1501              bset.b #5 , 1(a0,d1.l)      * 
00001530  6600 0322               1502              bne BSET_FAIL               * branch if Z clear  
00001534                          1503              * EA = n(An,A.W)  - BYTE only
00001534  08F0 0006 9000          1504              bset.b #6 , 0(a0,a1.w)            
0000153A  6600 0318               1505              bne BSET_FAIL               * branch if Z clear  
0000153E  08F0 0001 A000          1506              bset.b #1 , 0(a0,a2.w)      * 
00001544  6600 030E               1507              bne BSET_FAIL               * branch if Z clear  
00001548  08F0 0007 A001          1508              bset.b #7 , 1(a0,a2.w)      * 
0000154E  6600 0304               1509              bne BSET_FAIL               * branch if Z clear  
00001552                          1510              * EA = n(An,A.L)  - BYTE only
00001552  08F0 0000 A802          1511              bset.b #0 , 2(a0,a2.l)  
00001558  6600 02FA               1512              bne BSET_FAIL               * branch if Z clear  
0000155C  08F0 0000 A803          1513              bset.b #0 , 3(a0,a2.l)      * 
00001562  6600 02F0               1514              bne BSET_FAIL               * branch if Z clear  
00001566  08F0 0001 A804          1515              bset.b #1 , 4(a0,a2.l)      * 
0000156C  6600 02E6               1516              bne BSET_FAIL               * branch if Z clear  
00001570  207C 00000100           1517              move.l #$00000100 , a0      * point to memory to address 0x100 
00001576  0C98 41122C00           1518              cmpi.l #$41122C00 , (a0)+
0000157C  6600 02D6               1519              bne BSET_FAIL               * branch if Z clear  
00001580  0C98 02800101           1520              cmpi.l #$02800101 , (a0)+
00001586  66FE                    1521              bne *
00001588                          1522   
00001588                          1523  
00001588                          1524          
00001588                          1525              * EA = x.W  - BYTE only
00001588  207C 00000100           1526              move.l #$00000100 , a0      * point to memory to address
0000158E  10FC 0000               1527              move.b #$00 , (a0)+         * populate test data
00001592  08F8 0000 0100          1528              bset.b #0 , $0100            
00001598  6600 02BA               1529              bne BSET_FAIL               * branch if Z clear  
0000159C  08F8 0001 0100          1530              bset.b #1 , $0100           * 
000015A2  6600 02B0               1531              bne BSET_FAIL               * branch if Z clear  
000015A6  207C 00000100           1532              move.l #$00000100 , a0      * point to memory to address 0x100 
000015AC  0C18 0003               1533              cmpi.b #$03 , (a0)+
000015B0  66FE                    1534              bne *
000015B2                          1535  
000015B2                          1536              
000015B2                          1537              * EA = x.L  - BYTE only
000015B2  207C 000F0100           1538              move.l #$000F0100 , a0      * point to memory to address 0x100 
000015B8  10BC 0000               1539              move.b #$00 , (a0)          * populate test data
000015BC  08F9 0000 000F0100      1540              bset.b #0 , $000F0100 
000015C4  6600 028E               1541              bne BSET_FAIL               * branch if Z clear  
000015C8  08F9 0001 000F0100      1542              bset.b #1 , $000F0100       * 
000015D0  6600 0282               1543              bne BSET_FAIL               * branch if Z clear  
000015D4  08F9 0002 000F0100      1544              bset.b #2 , $000F0100       * 
000015DC  6600 0276               1545              bne BSET_FAIL               * branch if Z clear  
000015E0  207C 000F0100           1546              move.l #$000F0100 , a0      * point to memory to address 0x100 
000015E6  0C18 0007               1547              cmpi.b #$07 , (a0)+
000015EA  66FE                    1548              bne *
000015EC                          1549  
000015EC                          1550  
000015EC                          1551  * Bit Number Dynamic
000015EC                          1552      
000015EC                          1553              * EA = Dn  - LONG only
000015EC  7000                    1554              move.l #$00000000 , d0      * populate test data
000015EE  7A00                    1555              move.l #0,  d5              * populate bit number to test
000015F0  7C01                    1556              move.l #1,  d6              * populate bit number to test
000015F2  7E1F                    1557              move.l #31, d7              * populate bit number to test
000015F4                          1558              
000015F4  0BC0                    1559              bset.l d5 , d0              
000015F6  6600 025C               1560              bne BSET_FAIL               * branch if Z clear  
000015FA  0DC0                    1561              bset.l d6 , d0              * 
000015FC  6600 0256               1562              bne BSET_FAIL               * branch if Z clear  
00001600  0FC0                    1563              bset.l d7 , d0             * 
00001602  6600 0250               1564              bne BSET_FAIL               * branch if Z clear  
00001606  0C80 80000003           1565              cmpi.l #$80000003 , d0
0000160C  6600 0246               1566              bne BSET_FAIL               * branch if Z clear  
00001610                          1567  
00001610                          1568              
00001610                          1569              * EA = (An)  - BYTE only
00001610  7A00                    1570              move.l #0,  d5              * populate bit number to test
00001612  7C01                    1571              move.l #1,  d6              * populate bit number to test
00001614  7E07                    1572              move.l #7,  d7              * populate bit number to test           
00001616  207C 00000100           1573              move.l #$00000100 , a0      * point to memory to address 0x100
0000161C  10BC 0000               1574              move.b #$00 , (a0)          * populate test data
00001620  0BD0                    1575              bset.b d5 , (a0)            
00001622  6600 0230               1576              bne BSET_FAIL               * branch if Z clear  
00001626  0DD0                    1577              bset.b d6 , (a0)            * 
00001628  6600 022A               1578              bne BSET_FAIL               * branch if Z clear  
0000162C  0FD0                    1579              bset.b d7 , (a0)            * 
0000162E  6600 0224               1580              bne BSET_FAIL               * branch if Z clear  
00001632  0C10 0083               1581              cmpi.b #$83 , (a0)
00001636  6600 021C               1582              bne BSET_FAIL               * branch if Z clear  
0000163A                          1583              
0000163A                          1584      
0000163A                          1585              * EA = (An)+  - BYTE only
0000163A  207C 00000100           1586              move.l #$00000100 , a0      * point to memory to address 0x100 
00001640  10FC 0000               1587              move.b #$00 , (a0)+         * populate test data
00001644  10FC 0000               1588              move.b #$00 , (a0)+         * populate test data
00001648  10FC 0000               1589              move.b #$00 , (a0)+         * populate test data
0000164C  207C 00000100           1590              move.l #$00000100 , a0      * point to memory to address 0x100 
00001652  0BD8                    1591              bset.b d5 , (a0)+            
00001654  6600 01FE               1592              bne BSET_FAIL               * branch if Z clear  
00001658  0DD8                    1593              bset.b d6 , (a0)+           * 
0000165A  6600 01F8               1594              bne BSET_FAIL               * branch if Z clear  
0000165E  0FD8                    1595              bset.b d7 , (a0)+           * 
00001660  6600 01F2               1596              bne BSET_FAIL               * branch if Z clear  
00001664  207C 00000100           1597              move.l #$00000100 , a0      * point to memory to address 0x100 
0000166A  0C18 0001               1598              cmpi.b #$01 , (a0)+
0000166E  6600 01E4               1599              bne BSET_FAIL               * branch if Z clear  
00001672  0C18 0002               1600              cmpi.b #$02 , (a0)+
00001676  6600 01DC               1601              bne BSET_FAIL               * branch if Z clear  
0000167A  0C18 0080               1602              cmpi.b #$80 , (a0)+
0000167E  6600 01D4               1603              bne BSET_FAIL               * branch if Z clear  
00001682                          1604                  
00001682                          1605              * EA = -(An)  - BYTE only
00001682  207C 00000100           1606              move.l #$00000100 , a0      * point to memory to address
00001688  10FC 0000               1607              move.b #$00 , (a0)+         * populate test data
0000168C  10FC 0000               1608              move.b #$00 , (a0)+         * populate test data
00001690  10FC 0000               1609              move.b #$00 , (a0)+         * populate test data
00001694  207C 00000103           1610              move.l #$00000103 , a0      * point to memory to address 
0000169A  0BE0                    1611              bset.b d5 , -(a0)            
0000169C  6600 01B6               1612              bne BSET_FAIL               * branch if Z clear  
000016A0  0DE0                    1613              bset.b d6 , -(a0)           * 
000016A2  6600 01B0               1614              bne BSET_FAIL               * branch if Z clear  
000016A6  0FE0                    1615              bset.b d7 , -(a0)           * 
000016A8  6600 01AA               1616              bne BSET_FAIL               * branch if Z clear  
000016AC  207C 00000103           1617              move.l #$00000103 , a0      * point to memory to address 0x100 
000016B2  0C20 0001               1618              cmpi.b #$01 , -(a0)
000016B6  6600 019C               1619              bne BSET_FAIL               * branch if Z clear  
000016BA  0C20 0002               1620              cmpi.b #$02 , -(a0)
000016BE  6600 0194               1621              bne BSET_FAIL               * branch if Z clear  
000016C2  0C20 0080               1622              cmpi.b #$80 , -(a0)
000016C6  6600 018C               1623              bne BSET_FAIL               * branch if Z clear  
000016CA                          1624                  
000016CA                          1625              * EA = n(An)  - BYTE only
000016CA  207C 00000100           1626              move.l #$00000100 , a0      * point to memory to address
000016D0  10FC 0000               1627              move.b #$00 , (a0)+         * populate test data
000016D4  10FC 0000               1628              move.b #$00 , (a0)+         * populate test data
000016D8  10FC 0000               1629              move.b #$00 , (a0)+         * populate test data
000016DC  207C 00000100           1630              move.l #$00000100 , a0      * point to memory to address
000016E2  0BE8 0000               1631              bset.b d5 , 0(a0)            
000016E6  6600 016C               1632              bne BSET_FAIL               * branch if Z clear  
000016EA  0DE8 0001               1633              bset.b d6 , 1(a0)           * 
000016EE  6600 0164               1634              bne BSET_FAIL               * branch if Z clear  
000016F2  0FE8 0002               1635              bset.b d7 , 2(a0)           * 
000016F6  6600 015C               1636              bne BSET_FAIL               * branch if Z clear  
000016FA  207C 00000100           1637              move.l #$00000100 , a0      * point to memory to address 0x100 
00001700  0C18 0001               1638              cmpi.b #$01 , (a0)+
00001704  6600 014E               1639              bne BSET_FAIL               * branch if Z clear  
00001708  0C18 0002               1640              cmpi.b #$02 , (a0)+
0000170C  6600 0146               1641              bne BSET_FAIL               * branch if Z clear  
00001710  0C18 0080               1642              cmpi.b #$80 , (a0)+
00001714  6600 013E               1643              bne BSET_FAIL               * branch if Z clear  
00001718                          1644                  
00001718                          1645              * EA = n(An,R.W)  - BYTE only
00001718  207C 00000100           1646              move.l #$00000100 , a0      * point to memory to address
0000171E  10FC 0000               1647              move.b #$00 , (a0)+         * populate test data
00001722  10FC 0000               1648              move.b #$00 , (a0)+         * populate test data
00001726  10FC 0000               1649              move.b #$00 , (a0)+         * populate test data
0000172A  10FC 0000               1650              move.b #$00 , (a0)+         * populate test data
0000172E  10FC 0000               1651              move.b #$00 , (a0)+         * populate test data
00001732  10FC 0000               1652              move.b #$00 , (a0)+         * populate test data
00001736  10FC 0000               1653              move.b #$00 , (a0)+         * populate test data
0000173A  10FC 0000               1654              move.b #$00 , (a0)+         * populate test data
0000173E  10FC 0000               1655              move.b #$00 , (a0)+         * populate test data
00001742  10FC 0000               1656              move.b #$00 , (a0)+         * populate test data
00001746  10FC 0000               1657              move.b #$00 , (a0)+         * populate test data
0000174A  10FC 0000               1658              move.b #$00 , (a0)+         * populate test data
0000174E  207C 00000100           1659              move.l #$00000100 , a0      * point to memory to address
00001754  227C 00000000           1660              move.l #$00000000 , a1      * point to memory to address
0000175A  247C 00000001           1661              move.l #$00000001 , a2      * point to memory to address
00001760  7000                    1662              move.l #$00000000 , d0      * point to memory to address
00001762  7201                    1663              move.l #$00000001 , d1      * point to memory to address
00001764  0BF0 0000               1664              bset.b d5 , 0(a0,d0.w)            
00001768  6600 00EA               1665              bne BSET_FAIL               * branch if Z clear  
0000176C  0DF0 1000               1666              bset.b d6 , 0(a0,d1.w)      * 
00001770  6600 00E2               1667              bne BSET_FAIL               * branch if Z clear  
00001774  0FF0 1001               1668              bset.b d7 , 1(a0,d1.w)      * 
00001778  6600 00DA               1669              bne BSET_FAIL               * branch if Z clear  
0000177C                          1670              * EA = n(An,R.L)  - BYTE only
0000177C  0BF0 0802               1671              bset.b d5 , 2(a0,d0.l)  
00001780  6600 00D2               1672              bne BSET_FAIL               * branch if Z clear  
00001784  0DF0 1803               1673              bset.b d6 , 3(a0,d1.l)      * 
00001788  6600 00CA               1674              bne BSET_FAIL               * branch if Z clear  
0000178C  0FF0 1804               1675              bset.b d7 , 4(a0,d1.l)      * 
00001790  6600 00C2               1676              bne BSET_FAIL               * branch if Z clear  
00001794                          1677              * EA = n(An,A.W)  - BYTE only
00001794  0BF0 9005               1678              bset.b d5 , 5(a0,a1.w)            
00001798  6600 00BA               1679              bne BSET_FAIL               * branch if Z clear  
0000179C  0DF0 A006               1680              bset.b d6 , 6(a0,a2.w)      * 
000017A0  6600 00B2               1681              bne BSET_FAIL               * branch if Z clear  
000017A4  0FF0 A007               1682              bset.b d7 , 7(a0,a2.w)      * 
000017A8  6600 00AA               1683              bne BSET_FAIL               * branch if Z clear  
000017AC                          1684              * EA = n(An,A.L)  - BYTE only
000017AC  0BF0 9808               1685              bset.b d5 , 8(a0,a1.l)  
000017B0  6600 00A2               1686              bne BSET_FAIL               * branch if Z clear  
000017B4  0DF0 A809               1687              bset.b d6 , 9(a0,a2.l)      * 
000017B8  6600 009A               1688              bne BSET_FAIL               * branch if Z clear  
000017BC  0FF0 A80A               1689              bset.b d7 , 10(a0,a2.l)      * 
000017C0  6600 0092               1690              bne BSET_FAIL               * branch if Z clear  
000017C4  207C 00000100           1691              move.l #$00000100 , a0      * point to memory to address 0x100 
000017CA  0C98 01028100           1692              cmpi.l #$01028100 , (a0)+
000017D0  6600 0082               1693              bne BSET_FAIL               * branch if Z clear  
000017D4  0C98 02810002           1694              cmpi.l #$02810002 , (a0)+
000017DA  66FE                    1695              bne *
000017DC                          1696   
000017DC                          1697              
000017DC                          1698              * EA = x.W  - BYTE only
000017DC  207C 00000100           1699              move.l #$00000100 , a0      * point to memory to address
000017E2  10FC 0000               1700              move.b #$00 , (a0)+         * populate test data
000017E6  10FC 0000               1701              move.b #$00 , (a0)+         * populate test data
000017EA  10FC 0000               1702              move.b #$00 , (a0)+         * populate test data
000017EE  0BF8 0100               1703              bset.b d5 , $0100            
000017F2  6600 0060               1704              bne BSET_FAIL               * branch if Z clear  
000017F6  0DF8 0100               1705              bset.b d6 , $0100           * 
000017FA  6600 0058               1706              bne BSET_FAIL               * branch if Z clear  
000017FE  0FF8 0100               1707              bset.b d7 , $0100           * 
00001802  6600 0050               1708              bne BSET_FAIL               * branch if Z clear  
00001806  207C 00000100           1709              move.l #$00000100 , a0      * point to memory to address
0000180C  0C18 0083               1710              cmpi.b #$83 , (a0)+
00001810  6600 0042               1711              bne BSET_FAIL               * branch if Z clear  
00001814                          1712                      
00001814                          1713              * EA = x.L  - BYTE only
00001814  207C 000F0100           1714              move.l #$000F0100 , a0      * point to memory to address 0x100 
0000181A  10FC 0000               1715              move.b #$00 , (a0)+         * populate test data
0000181E  10FC 0000               1716              move.b #$00 , (a0)+         * populate test data
00001822  10FC 0000               1717              move.b #$00 , (a0)+         * populate test data
00001826  0BF9 000F0100           1718              bset.b d5 , $000F0100 
0000182C  6600 0026               1719              bne BSET_FAIL               * branch if Z clear  
00001830  0DF9 000F0100           1720              bset.b d6 , $000F0100       * 
00001836  6600 001C               1721              bne BSET_FAIL               * branch if Z clear  
0000183A  0FF9 000F0100           1722              bset.b d7 , $000F0100       * 
00001840  6600 0012               1723              bne BSET_FAIL               * branch if Z clear  
00001844  207C 000F0100           1724              move.l #$000F0100 , a0      * point to memory to address 0x100 
0000184A  0C10 0083               1725              cmpi.b #$83 , (a0)
0000184E  6600 0004               1726              bne BSET_FAIL               * branch if Z clear  
00001852                          1727                      
00001852                          1728  
00001852  4E75                    1729      rts
00001854                          1730      
00001854  60FE                    1731  BSET_FAIL: bra BSET_FAIL
00001856                          1732  
00001856                          1733  
00001856                          1734  *-----------------------------------------------------------
00001856                          1735  *-----------------------------------------------------------
00001856                          1736  * OPCODE : MOVEP
00001856                          1737  *-----------------------------------------------------------
00001856                          1738  *-----------------------------------------------------------
00001856                          1739  op_MOVEP: 
00001856                          1740  
00001856                          1741  * Dn --> x(An)
00001856  207C 00000100           1742              move.l #$00000100 , a0  
0000185C  203C 12345678           1743              move.l #$12345678 , d0  
00001862  223C AABBCCDD           1744              move.l #$AABBCCDD , d1  
00001868  20BC 00000000           1745              move.l #0 , (a0)
0000186E  217C 00000000 0004      1746              move.l #0 , 4(a0)
00001876                          1747              
00001876  0188 0000               1748              movep.w d0 , 0(a0)      * even offset   
0000187A  0388 0001               1749              movep.w d1 , 1(a0)      * odd offset
0000187E                          1750              
0000187E  01C8 0004               1751              movep.l d0 , 4(a0)      * even offset   
00001882  03C8 0005               1752              movep.l d1 , 5(a0)      * odd offset
00001886                          1753              
00001886  0C90 56CC78DD           1754              cmpi.l #$56CC78DD , (a0)
0000188C  66FE                    1755              bne *
0000188E  0CA8 12AA34BB 0004      1756              cmpi.l #$12AA34BB , 4(a0)
00001896  66FE                    1757              bne *
00001898  0CA8 56CC78DD 0008      1758              cmpi.l #$56CC78DD , 8(a0)
000018A0  66FE                    1759              bne *
000018A2                          1760              
000018A2                          1761              
000018A2                          1762  * x(An)--> Dn
000018A2  203C 5A5A5A5A           1763              move.l #$5a5a5a5a , d0  
000018A8  223C 5A5A5A5A           1764              move.l #$5a5a5a5a , d1  
000018AE  243C 5A5A5A5A           1765              move.l #$5a5a5a5a , d2  
000018B4  263C 5A5A5A5A           1766              move.l #$5a5a5a5a , d3  
000018BA                          1767              
000018BA  0108 0000               1768              movep.w 0(a0) , d0      * even offset   
000018BE  0308 0001               1769              movep.w 1(a0) , d1      * odd offset
000018C2                          1770              
000018C2  0548 0004               1771              movep.l 4(a0) , d2      * even offset   
000018C6  0748 0005               1772              movep.l 5(a0) , d3      * odd offset
000018CA                          1773              
000018CA  0C80 5A5A5678           1774              cmpi.l #$5a5a5678 , d0
000018D0  66FE                    1775              bne *
000018D2  0C81 5A5ACCDD           1776              cmpi.l #$5a5aCCDD , d1
000018D8  66FE                    1777              bne *
000018DA  0C82 12345678           1778              cmpi.l #$12345678 , d2
000018E0  66FE                    1779              bne *
000018E2  0C83 AABBCCDD           1780              cmpi.l #$AABBCCDD , d3
000018E8  66FE                    1781              bne *
000018EA                          1782      
000018EA  4E75                    1783              rts
000018EC                          1784       
000018EC                          1785      
000018EC                          1786  
000018EC                          1787  *-----------------------------------------------------------
000018EC                          1788  *-----------------------------------------------------------
000018EC                          1789  * OPCODE : BOOL_I
000018EC                          1790  *-----------------------------------------------------------
000018EC                          1791  *-----------------------------------------------------------
000018EC                          1792  op_BOOL_I: 
000018EC                          1793          
000018EC                          1794      * Dn -- BYTE
000018EC  203C 12345678           1795              move.l #$12345678 , d0  
000018F2  44FC 000F               1796              move.w #$000F, CCR          * pre-set Flags
000018F6  0000 00FF               1797              ori.b  #$FF , d0
000018FA  0A00 005A               1798              eori.b #$5A , d0
000018FE  C03C 00F0               1799              and.b  #$F0 , d0
00001902  69FE                    1800              bvs *                       * Check V,C are cleared
00001904  65FE                    1801              bcs *
00001906  6AFE                    1802              bpl *                       * Verify if N flag is set
00001908  C03C 0000               1803              and.b  #$00 , d0
0000190C  6BFE                    1804              bmi *                       * Verify if N flag is cleared
0000190E  66FE                    1805              bne *                       * Verify if Z flag is set
00001910                          1806  
00001910                          1807      * Dn -- WORD
00001910  223C 12345678           1808              move.l #$12345678 , d1  
00001916  44FC 000F               1809              move.w #$000F, CCR          * pre-set Flags
0000191A  0041 FFFF               1810              ori.w  #$FFFF , d1
0000191E  0A41 5A5A               1811              eori.w #$5A5A , d1
00001922  C27C F0F0               1812              and.w  #$F0F0 , d1
00001926  69FE                    1813              bvs *                       * Check V,C are cleared
00001928  65FE                    1814              bcs *
0000192A  6AFE                    1815              bpl *                       * Verify if N flag is set
0000192C  C27C 0000               1816              and.w  #$0000 , d1
00001930  6BFE                    1817              bmi *                       * Verify if N flag is cleared
00001932  66FE                    1818              bne *                       * Verify if Z flag is set
00001934                          1819  
00001934                          1820      * Dn -- LONG
00001934  243C 12345678           1821              move.l #$12345678 , d2  
0000193A  44FC 000F               1822              move.w #$000F, CCR          * pre-set Flags
0000193E  0082 FFFFFFFF           1823              ori.l  #$FFFFFFFF , d2
00001944  0A82 5A5A5A5A           1824              eori.l #$5A5A5A5A , d2
0000194A  C4BC F0F0F0F0           1825              and.l  #$F0F0F0F0 , d2
00001950  69FE                    1826              bvs *                       * Check V,C are cleared
00001952  65FE                    1827              bcs *
00001954  6AFE                    1828              bpl *                       * Verify if N flag is set
00001956  C4BC 00000000           1829              and.l  #$00000000 , d2
0000195C  6BFE                    1830              bmi *                       * Verify if N flag is cleared
0000195E  66FE                    1831              bne *                       * Verify if Z flag is set
00001960                          1832  
00001960                          1833      
00001960                          1834      * (An) -- BYTE
00001960  207C 00000100           1835              move.l #$00000100 , a0  
00001966  20BC 12345678           1836              move.l #$12345678 , (a0)  
0000196C  44FC 000F               1837              move.w #$000F, CCR          * pre-set Flags
00001970  0010 00FF               1838              ori.b  #$FF , (a0)
00001974  0A10 005A               1839              eori.b #$5A , (a0)
00001978  0210 00F0               1840              and.b  #$F0 , (a0)
0000197C  69FE                    1841              bvs *                       * Check V,C are cleared
0000197E  65FE                    1842              bcs *
00001980  6AFE                    1843              bpl *                       * Verify if N flag is set
00001982  0210 0000               1844              and.b  #$00 , (a0)
00001986  6BFE                    1845              bmi *                       * Verify if N flag is cleared
00001988  66FE                    1846              bne *                       * Verify if Z flag is set
0000198A  0C10 0000               1847              cmpi.b #$00 , (a0)
0000198E  66FE                    1848              bne *                       * Verify if Z flag is set
00001990                          1849              
00001990                          1850      * (An) -- WORD
00001990  20BC 12345678           1851              move.l #$12345678 , (a0)  
00001996  44FC 000F               1852              move.w #$000F, CCR          * pre-set Flags
0000199A  0050 FFFF               1853              ori.w  #$FFFF , (a0)
0000199E  0A50 5A5A               1854              eori.w #$5A5A , (a0)
000019A2  0250 F0F0               1855              and.w  #$F0F0 , (a0)
000019A6  69FE                    1856              bvs *                       * Check V,C are cleared
000019A8  65FE                    1857              bcs *
000019AA  6AFE                    1858              bpl *                       * Verify if N flag is set
000019AC  0250 0000               1859              and.w  #$0000 , (a0)
000019B0  6BFE                    1860              bmi *                       * Verify if N flag is cleared
000019B2  66FE                    1861              bne *                       * Verify if Z flag is set
000019B4  0C50 0000               1862              cmpi.w #$00 , (a0)
000019B8  66FE                    1863              bne *                       * Verify if Z flag is set
000019BA                          1864              
000019BA                          1865      * (An) -- LONG
000019BA  20BC 12345678           1866              move.l #$12345678 , (a0)  
000019C0  44FC 000F               1867              move.w #$000F, CCR          * pre-set Flags
000019C4  0090 FFFFFFFF           1868              ori.l  #$FFFFFFFF , (a0)
000019CA  0A90 5A5A5A5A           1869              eori.l #$5A5A5A5A , (a0)
000019D0  0290 F0F0F0F0           1870              and.l  #$F0F0F0F0 , (a0)
000019D6  69FE                    1871              bvs *                       * Check V,C are cleared
000019D8  65FE                    1872              bcs *
000019DA  6AFE                    1873              bpl *                       * Verify if N flag is set
000019DC  0290 00000000           1874              and.l  #$00000000 , (a0)
000019E2  6BFE                    1875              bmi *                       * Verify if N flag is cleared
000019E4  66FE                    1876              bne *                       * Verify if Z flag is set
000019E6  0C90 00000000           1877              cmpi.l #$00 , (a0)
000019EC  66FE                    1878              bne *                       * Verify if Z flag is set
000019EE                          1879              
000019EE                          1880  
000019EE                          1881  
000019EE                          1882      * (An)+ -- BYTE
000019EE  207C 00000100           1883              move.l #$00000100 , a0  
000019F4  20BC 00A5FF88           1884              move.l #$00A5FF88 , (a0)  
000019FA  44FC 000F               1885              move.w #$000F, CCR          * pre-set Flags
000019FE                          1886              
000019FE  0018 00F5               1887              ori.b  #$F5 , (a0)+
00001A02  6AFE                    1888              bpl *                       * Verify if N flag is set
00001A04  67FE                    1889              beq *                       * Verify if Z flag is cleared
00001A06                          1890              
00001A06  0A18 00FF               1891              eori.b #$FF , (a0)+
00001A0A  6BFE                    1892              bmi *                       * Verify if N flag is cleared
00001A0C  67FE                    1893              beq *                       * Verify if Z flag is cleared
00001A0E                          1894              
00001A0E  0218 00AA               1895              and.b  #$AA , (a0)+
00001A12  6AFE                    1896              bpl *                       * Verify if N flag is set
00001A14  67FE                    1897              beq *                       * Verify if Z flag is cleared
00001A16                          1898              
00001A16  207C 00000100           1899              move.l #$00000100 , a0  
00001A1C  0C90 F55AAA88           1900              cmpi.l #$F55AAA88 , (a0)
00001A22  66FE                    1901              bne *                       * Verify if Z flag is set
00001A24                          1902              
00001A24                          1903              
00001A24                          1904      * (An)+ -- WORD
00001A24  207C 00000100           1905              move.l #$00000100 , a0  
00001A2A  227C 00000104           1906              move.l #$00000104 , a1  
00001A30  20BC 00005A5A           1907              move.l #$00005a5a , (a0)  
00001A36  22BC 12345678           1908              move.l #$12345678 , (a1)  
00001A3C  44FC 000F               1909              move.w #$000F, CCR          * pre-set Flags
00001A40                          1910              
00001A40  0058 5678               1911              ori.w  #$5678 , (a0)+
00001A44  6BFE                    1912              bmi *                       * Verify if N flag is cleared
00001A46  67FE                    1913              beq *                       * Verify if Z flag is cleared
00001A48                          1914              
00001A48  0A58 FFFF               1915              eori.w #$FFFF , (a0)+
00001A4C  6AFE                    1916              bpl *                       * Verify if N flag is set
00001A4E  67FE                    1917              beq *                       * Verify if Z flag is cleared
00001A50                          1918              
00001A50  0258 A55A               1919              and.w  #$A55A , (a0)+
00001A54  6BFE                    1920              bmi *                       * Verify if N flag is cleared
00001A56  67FE                    1921              beq *                       * Verify if Z flag is cleared
00001A58                          1922              
00001A58  207C 00000100           1923              move.l #$00000100 , a0  
00001A5E  0C90 5678A5A5           1924              cmpi.l #$5678a5a5 , (a0)
00001A64  207C 00000104           1925              move.l #$00000104 , a0  
00001A6A  0C90 00105678           1926              cmpi.l #$00105678 , (a0)
00001A70  66FE                    1927              bne *                       * Verify if Z flag is set
00001A72                          1928              
00001A72                          1929      * (An)+ -- LONG
00001A72  207C 00000100           1930              move.l #$00000100 , a0  
00001A78  20FC 00000000           1931              move.l #$00000000 , (a0)+  
00001A7E  20FC 5A5A5A5A           1932              move.l #$5a5a5a5a , (a0)+  
00001A84  20FC FFFFFFFF           1933              move.l #$FFFFFFFF , (a0)+  
00001A8A  207C 00000100           1934              move.l #$00000100 , a0  
00001A90  44FC 000F               1935              move.w #$000F, CCR          * pre-set Flags
00001A94                          1936              
00001A94  0098 12345678           1937              ori.l  #$12345678 , (a0)+
00001A9A  6BFE                    1938              bmi *                       * Verify if N flag is cleared
00001A9C  67FE                    1939              beq *                       * Verify if Z flag is cleared
00001A9E                          1940              
00001A9E  0A98 FFFFFFFF           1941              eori.l #$FFFFFFFF , (a0)+
00001AA4  6AFE                    1942              bpl *                       * Verify if N flag is set
00001AA6  67FE                    1943              beq *                       * Verify if Z flag is cleared
00001AA8                          1944              
00001AA8  0298 A5A5A55A           1945              and.l  #$A5A5A55A , (a0)+
00001AAE  6AFE                    1946              bpl *                       * Verify if N flag is set
00001AB0  67FE                    1947              beq *                       * Verify if Z flag is cleared
00001AB2                          1948              
00001AB2  207C 00000100           1949              move.l #$00000100 , a0  
00001AB8  0C98 12345678           1950              cmpi.l #$12345678 , (a0)+
00001ABE  0C98 A5A5A5A5           1951              cmpi.l #$a5a5a5a5 , (a0)+
00001AC4  0C98 A5A5A55A           1952              cmpi.l #$a5a5a55a , (a0)+
00001ACA  66FE                    1953              bne *                       * Verify if Z flag is set
00001ACC                          1954              
00001ACC  4E75                    1955              rts
00001ACE                          1956  
00001ACE                          1957  
00001ACE                          1958  *-----------------------------------------------------------
00001ACE                          1959  *-----------------------------------------------------------
00001ACE                          1960  * OPCODE : BSR
00001ACE                          1961  *-----------------------------------------------------------
00001ACE                          1962  *-----------------------------------------------------------
00001ACE                          1963  
00001ACE                          1964       
00001ACE  223C 11111111           1965  BSR_CLOSE1:     move.l #$11111111 , d1
00001AD4  4E75                    1966                  rts
00001AD6                          1967   
00001AD6                          1968  
00001AD6                          1969  
00001AD6  61F6                    1970  op_BSR:         bsr.s BSR_CLOSE1        * Negative 8-bit displacement
00001AD8  612A                    1971                  bsr.s BSR_CLOSE2        * Positive 8-bit displacement
00001ADA  6100 EA98               1972                  bsr.w BSR_FAR1          * Negative 16-bit displacement
00001ADE  6100 152E               1973                  bsr.w BSR_FAR2          * Positive 16-bit displacement
00001AE2                          1974                  
00001AE2  0C81 11111111           1975                  cmpi.l #$11111111 , d1
00001AE8  66FE                    1976                  bne *
00001AEA  0C82 22222222           1977                  cmpi.l #$22222222 , d2
00001AF0  66FE                    1978                  bne *
00001AF2  0C83 33333333           1979                  cmpi.l #$33333333 , d3
00001AF8  66FE                    1980                  bne *
00001AFA  0C84 44444444           1981                  cmpi.l #$44444444 , d4
00001B00  66FE                    1982                  bne *
00001B02                          1983                     
00001B02  4E75                    1984                  rts   
00001B04                          1985                  
00001B04                          1986                  
00001B04  243C 22222222           1987  BSR_CLOSE2:     move.l #$22222222 , d2
00001B0A  4E75                    1988                  rts
00001B0C                          1989  
00001B0C                          1990  *-----------------------------------------------------------
00001B0C                          1991  *-----------------------------------------------------------
00001B0C                          1992  * OPCODE : op_CMP_I
00001B0C                          1993  *-----------------------------------------------------------
00001B0C                          1994  *-----------------------------------------------------------
00001B0C                          1995  op_CMP_I: 
00001B0C                          1996  
00001B0C  207C 00000100           1997              move.l #$00000100 , a0 
00001B12  20BC 00000100           1998              move.l #$00000100 , (a0) 
00001B18                          1999   
00001B18                          2000      * REGISTER - BYTE
00001B18  7080                    2001              move.l #$FFFFFF80 , d0  
00001B1A  0C00 0080               2002              cmpi.b #$80 , d0
00001B1E  66FE                    2003              bne *                       * Check Z Flag  beq/bne
00001B20  6BFE                    2004              bmi *                       * Check N Flag  bmi/bpl
00001B22  65FE                    2005              bcs *                       * Check C Flag  bcc/bcs
00001B24  69FE                    2006              bvs *                       * Check V Flag  bvc/bvs
00001B26                          2007              
00001B26  223C FFFFF000           2008              move.l #$FFFFF000 , d1  
00001B2C  0C01 0000               2009              cmpi.b #$00 , d1
00001B30  66FE                    2010              bne *                       * Check Z Flag  beq/bne
00001B32  6BFE                    2011              bmi *                       * Check N Flag  bmi/bpl
00001B34  65FE                    2012              bcs *                       * Check C Flag  bcc/bcs
00001B36  69FE                    2013              bvs *                       * Check V Flag  bvc/bvs
00001B38                          2014              
00001B38  243C FFFFFF02           2015              move.l #$FFFFFF02 , d2  
00001B3E  0C02 00FF               2016              cmpi.b #$FF , d2
00001B42  67FE                    2017              beq *                       * Check Z Flag  beq/bne
00001B44  6BFE                    2018              bmi *                       * Check N Flag  bmi/bpl
00001B46  64FE                    2019              bcc *                       * Check C Flag  bcc/bcs
00001B48  69FE                    2020              bvs *                       * Check V Flag  bvc/bvs
00001B4A                          2021                  
00001B4A  263C FFFFFF7F           2022              move.l #$FFFFFF7F , d3  
00001B50  0C03 00FF               2023              cmpi.b #$FF , d3
00001B54  67FE                    2024              beq *                       * Check Z Flag  beq/bne
00001B56  6AFE                    2025              bpl *                       * Check N Flag  bmi/bpl
00001B58  64FE                    2026              bcc *                       * Check C Flag  bcc/bcs
00001B5A  68FE                    2027              bvc *                       * Check V Flag  bvc/bvs
00001B5C                          2028           
00001B5C                          2029           
00001B5C                          2030      * REGISTER - WORD
00001B5C  203C FFFF8000           2031              move.l #$FFFF8000 , d0  
00001B62  0C40 8000               2032              cmpi.w #$8000 , d0
00001B66  66FE                    2033              bne *                       * Check Z Flag  beq/bne
00001B68  6BFE                    2034              bmi *                       * Check N Flag  bmi/bpl
00001B6A  65FE                    2035              bcs *                       * Check C Flag  bcc/bcs
00001B6C  69FE                    2036              bvs *                       * Check V Flag  bvc/bvs
00001B6E                          2037              
00001B6E  223C FFF00000           2038              move.l #$FFF00000 , d1  
00001B74  0C41 0000               2039              cmpi.w #$0000 , d1
00001B78  66FE                    2040              bne *                       * Check Z Flag  beq/bne
00001B7A  6BFE                    2041              bmi *                       * Check N Flag  bmi/bpl
00001B7C  65FE                    2042              bcs *                       * Check C Flag  bcc/bcs
00001B7E  69FE                    2043              bvs *                       * Check V Flag  bvc/bvs
00001B80                          2044              
00001B80  243C FFFF0002           2045              move.l #$FFFF0002 , d2  
00001B86  0C42 FFFF               2046              cmpi.w #$FFFF , d2
00001B8A  67FE                    2047              beq *                       * Check Z Flag  beq/bne
00001B8C  6BFE                    2048              bmi *                       * Check N Flag  bmi/bpl
00001B8E  64FE                    2049              bcc *                       * Check C Flag  bcc/bcs
00001B90  69FE                    2050              bvs *                       * Check V Flag  bvc/bvs
00001B92                          2051                  
00001B92  263C FFFF7FFF           2052              move.l #$FFFF7FFF , d3  
00001B98  0C43 FFFF               2053              cmpi.w #$FFFF , d3
00001B9C  67FE                    2054              beq *                       * Check Z Flag  beq/bne
00001B9E  6AFE                    2055              bpl *                       * Check N Flag  bmi/bpl
00001BA0  64FE                    2056              bcc *                       * Check C Flag  bcc/bcs
00001BA2  68FE                    2057              bvc *                       * Check V Flag  bvc/bvs
00001BA4                          2058              
00001BA4                          2059      * REGISTER - LONG
00001BA4  203C 80000000           2060              move.l #$80000000 , d0  
00001BAA  0C80 80000000           2061              cmpi.l #$80000000 , d0
00001BB0  66FE                    2062              bne *                       * Check Z Flag  beq/bne
00001BB2  6BFE                    2063              bmi *                       * Check N Flag  bmi/bpl
00001BB4  65FE                    2064              bcs *                       * Check C Flag  bcc/bcs
00001BB6  69FE                    2065              bvs *                       * Check V Flag  bvc/bvs
00001BB8                          2066              
00001BB8  7200                    2067              move.l #$00000000 , d1  
00001BBA  0C81 00000000           2068              cmpi.l #$00000000 , d1
00001BC0  66FE                    2069              bne *                       * Check Z Flag  beq/bne
00001BC2  6BFE                    2070              bmi *                       * Check N Flag  bmi/bpl
00001BC4  65FE                    2071              bcs *                       * Check C Flag  bcc/bcs
00001BC6  69FE                    2072              bvs *                       * Check V Flag  bvc/bvs
00001BC8                          2073              
00001BC8  7402                    2074              move.l #$00000002 , d2  
00001BCA  0C82 FFFFFFFF           2075              cmpi.l #$FFFFFFFF , d2
00001BD0  67FE                    2076              beq *                       * Check Z Flag  beq/bne
00001BD2  6BFE                    2077              bmi *                       * Check N Flag  bmi/bpl
00001BD4  64FE                    2078              bcc *                       * Check C Flag  bcc/bcs
00001BD6  69FE                    2079              bvs *                       * Check V Flag  bvc/bvs
00001BD8                          2080                  
00001BD8  263C 7FFFFFFF           2081              move.l #$7FFFFFFF , d3  
00001BDE  0C83 FFFFFFFF           2082              cmpi.l #$FFFFFFFF , d3
00001BE4  67FE                    2083              beq *                       * Check Z Flag  beq/bne
00001BE6  6AFE                    2084              bpl *                       * Check N Flag  bmi/bpl
00001BE8  64FE                    2085              bcc *                       * Check C Flag  bcc/bcs
00001BEA  68FE                    2086              bvc *                       * Check V Flag  bvc/bvs
00001BEC                          2087              
00001BEC                          2088              
00001BEC                          2089              
00001BEC                          2090  
00001BEC                          2091      * EA=x(An,Dn) - BYTE
00001BEC  207C 00000100           2092              move.l #$00000100 , a0  
00001BF2  7E04                    2093              move.l #$00000004 , d7  
00001BF4                          2094              
00001BF4  21BC FFFFFF80 700C      2095              move.l #$FFFFFF80 , 12(a0,d7)
00001BFC  21BC FFFFFF80 700C      2096              move.l #$FFFFFF80 , 12(a0,d7)
00001C04  0C30 0080 700F          2097              cmpi.b #$80 , 15(a0,d7)
00001C0A  66FE                    2098              bne *                       * Check Z Flag  beq/bne
00001C0C  6BFE                    2099              bmi *                       * Check N Flag  bmi/bpl
00001C0E  65FE                    2100              bcs *                       * Check C Flag  bcc/bcs
00001C10  69FE                    2101              bvs *                       * Check V Flag  bvc/bvs
00001C12                          2102              
00001C12  21BC FFFFF000 700C      2103              move.l #$FFFFF000 , 12(a0,d7)
00001C1A  0C30 0000 700F          2104              cmpi.b #$00 , 15(a0,d7)
00001C20  66FE                    2105              bne *                       * Check Z Flag  beq/bne
00001C22  6BFE                    2106              bmi *                       * Check N Flag  bmi/bpl
00001C24  65FE                    2107              bcs *                       * Check C Flag  bcc/bcs
00001C26  69FE                    2108              bvs *                       * Check V Flag  bvc/bvs
00001C28                          2109              
00001C28  21BC FFFFFF02 700C      2110              move.l #$FFFFFF02 , 12(a0,d7)
00001C30  0C30 00FF 700F          2111              cmpi.b #$FF , 15(a0,d7)
00001C36  67FE                    2112              beq *                       * Check Z Flag  beq/bne
00001C38  6BFE                    2113              bmi *                       * Check N Flag  bmi/bpl
00001C3A  64FE                    2114              bcc *                       * Check C Flag  bcc/bcs
00001C3C  69FE                    2115              bvs *                       * Check V Flag  bvc/bvs
00001C3E                          2116                  
00001C3E  21BC FFFFFF7F 700C      2117              move.l #$FFFFFF7F , 12(a0,d7)
00001C46  0C30 00FF 700F          2118              cmpi.b #$FF , 15(a0,d7)
00001C4C  67FE                    2119              beq *                       * Check Z Flag  beq/bne
00001C4E  6AFE                    2120              bpl *                       * Check N Flag  bmi/bpl
00001C50  64FE                    2121              bcc *                       * Check C Flag  bcc/bcs
00001C52  68FE                    2122              bvc *                       * Check V Flag  bvc/bvs
00001C54                          2123           
00001C54                          2124           
00001C54                          2125      * EA=x(An,Dn) - WORD
00001C54  21BC FFFF8000 700C      2126              move.l #$FFFF8000 , 12(a0,d7)
00001C5C  0C70 8000 700E          2127              cmpi.w #$8000 , 14(a0,d7)
00001C62  66FE                    2128              bne *                       * Check Z Flag  beq/bne
00001C64  6BFE                    2129              bmi *                       * Check N Flag  bmi/bpl
00001C66  65FE                    2130              bcs *                       * Check C Flag  bcc/bcs
00001C68  69FE                    2131              bvs *                       * Check V Flag  bvc/bvs
00001C6A                          2132              
00001C6A  21BC FFF00000 700C      2133              move.l #$FFF00000 , 12(a0,d7)
00001C72  0C70 0000 700E          2134              cmpi.w #$0000 , 14(a0,d7)
00001C78  66FE                    2135              bne *                       * Check Z Flag  beq/bne
00001C7A  6BFE                    2136              bmi *                       * Check N Flag  bmi/bpl
00001C7C  65FE                    2137              bcs *                       * Check C Flag  bcc/bcs
00001C7E  69FE                    2138              bvs *                       * Check V Flag  bvc/bvs
00001C80                          2139              
00001C80  21BC FFFF0002 700C      2140              move.l #$FFFF0002 , 12(a0,d7)
00001C88  0C70 FFFF 700E          2141              cmpi.w #$FFFF , 14(a0,d7)
00001C8E  67FE                    2142              beq *                       * Check Z Flag  beq/bne
00001C90  6BFE                    2143              bmi *                       * Check N Flag  bmi/bpl
00001C92  64FE                    2144              bcc *                       * Check C Flag  bcc/bcs
00001C94  69FE                    2145              bvs *                       * Check V Flag  bvc/bvs
00001C96                          2146                  
00001C96  21BC FFFF7FFF 700C      2147              move.l #$FFFF7FFF , 12(a0,d7)
00001C9E  0C70 FFFF 700E          2148              cmpi.w #$FFFF , 14(a0,d7)
00001CA4  67FE                    2149              beq *                       * Check Z Flag  beq/bne
00001CA6  6AFE                    2150              bpl *                       * Check N Flag  bmi/bpl
00001CA8  64FE                    2151              bcc *                       * Check C Flag  bcc/bcs
00001CAA  68FE                    2152              bvc *                       * Check V Flag  bvc/bvs
00001CAC                          2153              
00001CAC                          2154      * EA=x(An,Dn) - LONG
00001CAC  21BC 80000000 700C      2155              move.l #$80000000 , 12(a0,d7)
00001CB4  0CB0 80000000 700C      2156              cmpi.l #$80000000 , 12(a0,d7)
00001CBC  66FE                    2157              bne *                       * Check Z Flag  beq/bne
00001CBE  6BFE                    2158              bmi *                       * Check N Flag  bmi/bpl
00001CC0  65FE                    2159              bcs *                       * Check C Flag  bcc/bcs
00001CC2  69FE                    2160              bvs *                       * Check V Flag  bvc/bvs
00001CC4                          2161              
00001CC4  21BC 00000000 700C      2162              move.l #$00000000 , 12(a0,d7)
00001CCC  0CB0 00000000 700C      2163              cmpi.l #$00000000 , 12(a0,d7)
00001CD4  66FE                    2164              bne *                       * Check Z Flag  beq/bne
00001CD6  6BFE                    2165              bmi *                       * Check N Flag  bmi/bpl
00001CD8  65FE                    2166              bcs *                       * Check C Flag  bcc/bcs
00001CDA  69FE                    2167              bvs *                       * Check V Flag  bvc/bvs
00001CDC                          2168              
00001CDC  21BC 00000002 700C      2169              move.l #$00000002 , 12(a0,d7)
00001CE4  0CB0 FFFFFFFF 700C      2170              cmpi.l #$FFFFFFFF , 12(a0,d7)
00001CEC  67FE                    2171              beq *                       * Check Z Flag  beq/bne
00001CEE  6BFE                    2172              bmi *                       * Check N Flag  bmi/bpl
00001CF0  64FE                    2173              bcc *                       * Check C Flag  bcc/bcs
00001CF2  69FE                    2174              bvs *                       * Check V Flag  bvc/bvs
00001CF4                          2175                  
00001CF4  21BC 7FFFFFFF 700C      2176              move.l #$7FFFFFFF , 12(a0,d7)
00001CFC  0CB0 FFFFFFFF 700C      2177              cmpi.l #$FFFFFFFF , 12(a0,d7)
00001D04  67FE                    2178              beq *                       * Check Z Flag  beq/bne
00001D06  6AFE                    2179              bpl *                       * Check N Flag  bmi/bpl
00001D08  64FE                    2180              bcc *                       * Check C Flag  bcc/bcs
00001D0A  68FE                    2181              bvc *                       * Check V Flag  bvc/bvs
00001D0C                          2182              
00001D0C                          2183              
00001D0C                          2184              
00001D0C                          2185              
00001D0C  4E75                    2186              rts
00001D0E                          2187              
00001D0E                          2188              
00001D0E                          2189    
00001D0E                          2190  *-----------------------------------------------------------
00001D0E                          2191  *-----------------------------------------------------------
00001D0E                          2192  * OPCODE : ADD_I
00001D0E                          2193  *-----------------------------------------------------------
00001D0E                          2194  *-----------------------------------------------------------
00001D0E                          2195  op_ADD_I: 
00001D0E                          2196      
00001D0E                          2197      * EA = Dn  - Byte
00001D0E  203C 12345678           2198              move.l #$12345678 , d0      * populate test data
00001D14  0600 0000               2199              addi.b #0 , d0                          
00001D18  67FE                    2200              beq *                       * Check Z Flag  beq/bne
00001D1A  6BFE                    2201              bmi *                       * Check N Flag  bmi/bpl
00001D1C  65FE                    2202              bcs *                       * Check C Flag  bcc/bcs
00001D1E  69FE                    2203              bvs *                       * Check V Flag  bvc/bvs
00001D20  0600 0010               2204              addi.b #$10 , d0                            
00001D24  67FE                    2205              beq *                       * Check Z Flag  beq/bne
00001D26  6AFE                    2206              bpl *                       * Check N Flag  bmi/bpl
00001D28  65FE                    2207              bcs *                       * Check C Flag  bcc/bcs
00001D2A  68FE                    2208              bvc *                       * Check V Flag  bvc/bvs
00001D2C  0600 00A5               2209              addi.b #$A5 , d0                            
00001D30  67FE                    2210              beq *                       * Check Z Flag  beq/bne
00001D32  6BFE                    2211              bmi *                       * Check N Flag  bmi/bpl
00001D34  64FE                    2212              bcc *                       * Check C Flag  bcc/bcs
00001D36  68FE                    2213              bvc *                       * Check V Flag  bvc/bvs
00001D38  0C00 002D               2214              cmpi.b #$2D , d0                            
00001D3C  66FE                    2215              bne *                       * Check Z Flag  beq/bne
00001D3E                          2216              
00001D3E                          2217      * EA = Dn  - WORD
00001D3E  203C 12345678           2218              move.l #$12345678 , d0      * populate test data
00001D44  0640 0000               2219              addi.w #0 , d0                          
00001D48  67FE                    2220              beq *                       * Check Z Flag  beq/bne
00001D4A  6BFE                    2221              bmi *                       * Check N Flag  bmi/bpl
00001D4C  65FE                    2222              bcs *                       * Check C Flag  bcc/bcs
00001D4E  69FE                    2223              bvs *                       * Check V Flag  bvc/bvs
00001D50  0640 7000               2224              addi.w #$7000 , d0                          
00001D54  67FE                    2225              beq *                       * Check Z Flag  beq/bne
00001D56  6AFE                    2226              bpl *                       * Check N Flag  bmi/bpl
00001D58  65FE                    2227              bcs *                       * Check C Flag  bcc/bcs
00001D5A  68FE                    2228              bvc *                       * Check V Flag  bvc/bvs
00001D5C  0640 A55A               2229              addi.w #$A55A , d0                          
00001D60  67FE                    2230              beq *                       * Check Z Flag  beq/bne
00001D62  6BFE                    2231              bmi *                       * Check N Flag  bmi/bpl
00001D64  64FE                    2232              bcc *                       * Check C Flag  bcc/bcs
00001D66  68FE                    2233              bvc *                       * Check V Flag  bvc/bvs
00001D68  0C40 6BD2               2234              cmpi.w #$6BD2 , d0                          
00001D6C  66FE                    2235              bne *                       * Check Z Flag  beq/bne
00001D6E                          2236      
00001D6E                          2237      * EA = Dn  - LONG
00001D6E  203C 12345678           2238              move.l #$12345678  , d0      * populate test data
00001D74  0680 00000000           2239              addi.l #0 , d0                          
00001D7A  67FE                    2240              beq *                       * Check Z Flag  beq/bne
00001D7C  6BFE                    2241              bmi *                       * Check N Flag  bmi/bpl
00001D7E  65FE                    2242              bcs *                       * Check C Flag  bcc/bcs
00001D80  69FE                    2243              bvs *                       * Check V Flag  bvc/bvs
00001D82  0680 F0000000           2244              addi.l #$F0000000 , d0                          
00001D88  67FE                    2245              beq *                       * Check Z Flag  beq/bne
00001D8A  6BFE                    2246              bmi *                       * Check N Flag  bmi/bpl
00001D8C  64FE                    2247              bcc *                       * Check C Flag  bcc/bcs
00001D8E  69FE                    2248              bvs *                       * Check V Flag  bvc/bvs
00001D90  0680 855AA55A           2249              addi.l #$855AA55A , d0                          
00001D96  67FE                    2250              beq *                       * Check Z Flag  beq/bne
00001D98  6AFE                    2251              bpl *                       * Check N Flag  bmi/bpl
00001D9A  65FE                    2252              bcs *                       * Check C Flag  bcc/bcs
00001D9C  69FE                    2253              bvs *                       * Check V Flag  bvc/bvs
00001D9E  0680 A0000000           2254              addi.l #$A0000000 , d0                          
00001DA4  68FE                    2255              bvc *                       * Check V Flag  bvc/bvs
00001DA6  0C80 278EFBD2           2256              cmpi.l #$278EFBD2 , d0                          
00001DAC  66FE                    2257              bne *                       * Check Z Flag  beq/bne
00001DAE                          2258      
00001DAE                          2259      
00001DAE                          2260  
00001DAE                          2261      * EA = x.L  - Byte
00001DAE  207C 000F0100           2262              move.l #$000F0100 , a0      * populate test data
00001DB4  20BC 12345678           2263              move.l #$12345678 ,(a0)     * populate test data
00001DBA  0639 0000 000F0103      2264              addi.b #0 , $000F0103                           
00001DC2  67FE                    2265              beq *                       * Check Z Flag  beq/bne
00001DC4  6BFE                    2266              bmi *                       * Check N Flag  bmi/bpl
00001DC6  65FE                    2267              bcs *                       * Check C Flag  bcc/bcs
00001DC8  69FE                    2268              bvs *                       * Check V Flag  bvc/bvs
00001DCA  0639 0010 000F0103      2269              addi.b #$10 , $000F0103                         
00001DD2  67FE                    2270              beq *                       * Check Z Flag  beq/bne
00001DD4  6AFE                    2271              bpl *                       * Check N Flag  bmi/bpl
00001DD6  65FE                    2272              bcs *                       * Check C Flag  bcc/bcs
00001DD8  68FE                    2273              bvc *                       * Check V Flag  bvc/bvs
00001DDA  0639 00A5 000F0103      2274              addi.b #$A5 , $000F0103                         
00001DE2  67FE                    2275              beq *                       * Check Z Flag  beq/bne
00001DE4  6BFE                    2276              bmi *                       * Check N Flag  bmi/bpl
00001DE6  64FE                    2277              bcc *                       * Check C Flag  bcc/bcs
00001DE8  68FE                    2278              bvc *                       * Check V Flag  bvc/bvs
00001DEA  0C39 002D 000F0103      2279              cmpi.b #$2D , $000F0103                         
00001DF2  66FE                    2280              bne *                       * Check Z Flag  beq/bne
00001DF4                          2281              
00001DF4                          2282      * EA = x.L- WORD
00001DF4  207C 000F0100           2283              move.l #$000F0100 , a0      * populate test data
00001DFA  20BC 12345678           2284              move.l #$12345678 ,(a0)     * populate test data
00001E00  0679 0000 000F0100      2285              addi.w #0 , $000F0100                           
00001E08  67FE                    2286              beq *                       * Check Z Flag  beq/bne
00001E0A  6BFE                    2287              bmi *                       * Check N Flag  bmi/bpl
00001E0C  65FE                    2288              bcs *                       * Check C Flag  bcc/bcs
00001E0E  69FE                    2289              bvs *                       * Check V Flag  bvc/bvs
00001E10  0679 7000 000F0100      2290              addi.w #$7000 , $000F0100                           
00001E18  67FE                    2291              beq *                       * Check Z Flag  beq/bne
00001E1A  6AFE                    2292              bpl *                       * Check N Flag  bmi/bpl
00001E1C  65FE                    2293              bcs *                       * Check C Flag  bcc/bcs
00001E1E  68FE                    2294              bvc *                       * Check V Flag  bvc/bvs
00001E20  0679 A55A 000F0100      2295              addi.w #$A55A , $000F0100                           
00001E28  67FE                    2296              beq *                       * Check Z Flag  beq/bne
00001E2A  6BFE                    2297              bmi *                       * Check N Flag  bmi/bpl
00001E2C  64FE                    2298              bcc *                       * Check C Flag  bcc/bcs
00001E2E  68FE                    2299              bvc *                       * Check V Flag  bvc/bvs
00001E30  0C79 278E 000F0100      2300              cmpi.w #$278E , $000F0100                           
00001E38  66FE                    2301              bne *                       * Check Z Flag  beq/bne
00001E3A                          2302      
00001E3A                          2303      * EA = x.L- LONG
00001E3A  23FC 12345678 000F0100  2304              move.l #$12345678  , $000F0100  * populate test data
00001E44  06B9 00000000 000F0100  2305              addi.l #0 , $000F0100                           
00001E4E  67FE                    2306              beq *                       * Check Z Flag  beq/bne
00001E50  6BFE                    2307              bmi *                       * Check N Flag  bmi/bpl
00001E52  65FE                    2308              bcs *                       * Check C Flag  bcc/bcs
00001E54  69FE                    2309              bvs *                       * Check V Flag  bvc/bvs
00001E56  06B9 F0000000 000F0100  2310              addi.l #$F0000000 , $000F0100                           
00001E60  67FE                    2311              beq *                       * Check Z Flag  beq/bne
00001E62  6BFE                    2312              bmi *                       * Check N Flag  bmi/bpl
00001E64  64FE                    2313              bcc *                       * Check C Flag  bcc/bcs
00001E66  69FE                    2314              bvs *                       * Check V Flag  bvc/bvs
00001E68  06B9 855AA55A 000F0100  2315              addi.l #$855AA55A , $000F0100                           
00001E72  67FE                    2316              beq *                       * Check Z Flag  beq/bne
00001E74  6AFE                    2317              bpl *                       * Check N Flag  bmi/bpl
00001E76  65FE                    2318              bcs *                       * Check C Flag  bcc/bcs
00001E78  69FE                    2319              bvs *                       * Check V Flag  bvc/bvs
00001E7A  06B9 A0000000 000F0100  2320              addi.l #$A0000000 , $000F0100                           
00001E84  68FE                    2321              bvc *                       * Check V Flag  bvc/bvs
00001E86  0CB9 278EFBD2 000F0100  2322              cmpi.l #$278EFBD2 , $000F0100                           
00001E90  66FE                    2323              bne *                       * Check Z Flag  beq/bne
00001E92                          2324      
00001E92  4E75                    2325              rts
00001E94                          2326  
00001E94                          2327  
00001E94                          2328  *-----------------------------------------------------------
00001E94                          2329  *-----------------------------------------------------------
00001E94                          2330  * OPCODE : SUB_I
00001E94                          2331  *-----------------------------------------------------------
00001E94                          2332  *-----------------------------------------------------------
00001E94                          2333  op_SUB_I: 
00001E94                          2334      
00001E94                          2335      * EA = Dn  - Byte
00001E94  203C 12345678           2336              move.l #$12345678 , d0      * populate test data
00001E9A  0400 0000               2337              subi.b #0 , d0                          
00001E9E  67FE                    2338              beq *                       * Check Z Flag  beq/bne
00001EA0  6BFE                    2339              bmi *                       * Check N Flag  bmi/bpl
00001EA2  65FE                    2340              bcs *                       * Check C Flag  bcc/bcs
00001EA4  69FE                    2341              bvs *                       * Check V Flag  bvc/bvs
00001EA6  0400 0010               2342              subi.b #$10 , d0                            
00001EAA  67FE                    2343              beq *                       * Check Z Flag  beq/bne
00001EAC  6BFE                    2344              bmi *                       * Check N Flag  bmi/bpl
00001EAE  65FE                    2345              bcs *                       * Check C Flag  bcc/bcs
00001EB0  69FE                    2346              bvs *                       * Check V Flag  bvc/bvs
00001EB2  0400 00A5               2347              subi.b #$A5 , d0                            
00001EB6  67FE                    2348              beq *                       * Check Z Flag  beq/bne
00001EB8  6AFE                    2349              bpl *                       * Check N Flag  bmi/bpl
00001EBA  64FE                    2350              bcc *                       * Check C Flag  bcc/bcs
00001EBC  68FE                    2351              bvc *                       * Check V Flag  bvc/bvs
00001EBE  0C00 00C3               2352              cmpi.b #$C3 , d0                            
00001EC2  66FE                    2353              bne *                       * Check Z Flag  beq/bne
00001EC4                          2354              
00001EC4                          2355      * EA = Dn  - WORD
00001EC4  203C 12345678           2356              move.l #$12345678 , d0      * populate test data
00001ECA  0440 0000               2357              subi.w #0 , d0                          
00001ECE  67FE                    2358              beq *                       * Check Z Flag  beq/bne
00001ED0  6BFE                    2359              bmi *                       * Check N Flag  bmi/bpl
00001ED2  65FE                    2360              bcs *                       * Check C Flag  bcc/bcs
00001ED4  69FE                    2361              bvs *                       * Check V Flag  bvc/bvs
00001ED6  0440 7000               2362              subi.w #$7000 , d0                          
00001EDA  67FE                    2363              beq *                       * Check Z Flag  beq/bne
00001EDC  6AFE                    2364              bpl *                       * Check N Flag  bmi/bpl
00001EDE  64FE                    2365              bcc *                       * Check C Flag  bcc/bcs
00001EE0  69FE                    2366              bvs *                       * Check V Flag  bvc/bvs
00001EE2  0440 A55A               2367              subi.w #$A55A , d0                          
00001EE6  67FE                    2368              beq *                       * Check Z Flag  beq/bne
00001EE8  6BFE                    2369              bmi *                       * Check N Flag  bmi/bpl
00001EEA  65FE                    2370              bcs *                       * Check C Flag  bcc/bcs
00001EEC  69FE                    2371              bvs *                       * Check V Flag  bvc/bvs
00001EEE  0C40 411E               2372              cmpi.w #$411E , d0                          
00001EF2  66FE                    2373              bne *                       * Check Z Flag  beq/bne
00001EF4                          2374      
00001EF4                          2375      * EA = Dn  - LONG
00001EF4  203C 12345678           2376              move.l #$12345678  , d0      * populate test data
00001EFA  0480 00000000           2377              subi.l #0 , d0                          
00001F00  67FE                    2378              beq *                       * Check Z Flag  beq/bne
00001F02  6BFE                    2379              bmi *                       * Check N Flag  bmi/bpl
00001F04  65FE                    2380              bcs *                       * Check C Flag  bcc/bcs
00001F06  69FE                    2381              bvs *                       * Check V Flag  bvc/bvs
00001F08  0480 F0000000           2382              subi.l #$F0000000 , d0                          
00001F0E  67FE                    2383              beq *                       * Check Z Flag  beq/bne
00001F10  6BFE                    2384              bmi *                       * Check N Flag  bmi/bpl
00001F12  64FE                    2385              bcc *                       * Check C Flag  bcc/bcs
00001F14  69FE                    2386              bvs *                       * Check V Flag  bvc/bvs
00001F16  0480 855AA55A           2387              subi.l #$855AA55A , d0                          
00001F1C  67FE                    2388              beq *                       * Check Z Flag  beq/bne
00001F1E  6AFE                    2389              bpl *                       * Check N Flag  bmi/bpl
00001F20  64FE                    2390              bcc *                       * Check C Flag  bcc/bcs
00001F22  68FE                    2391              bvc *                       * Check V Flag  bvc/bvs
00001F24  0480 A0000000           2392              subi.l #$A0000000 , d0                          
00001F2A  69FE                    2393              bvs *                       * Check V Flag  bvc/bvs
00001F2C  0C80 FCD9B11E           2394              cmpi.l #$FCD9B11E , d0                          
00001F32  66FE                    2395              bne *                       * Check Z Flag  beq/bne
00001F34                          2396      
00001F34                          2397      
00001F34                          2398  
00001F34                          2399      * EA = x.L  - Byte
00001F34  207C 000F0100           2400              move.l #$000F0100 , a0      * populate test data
00001F3A  20BC 12345678           2401              move.l #$12345678 ,(a0)     * populate test data
00001F40  0439 0000 000F0103      2402              subi.b #0 , $000F0103                           
00001F48  67FE                    2403              beq *                       * Check Z Flag  beq/bne
00001F4A  6BFE                    2404              bmi *                       * Check N Flag  bmi/bpl
00001F4C  65FE                    2405              bcs *                       * Check C Flag  bcc/bcs
00001F4E  69FE                    2406              bvs *                       * Check V Flag  bvc/bvs
00001F50  0439 0010 000F0103      2407              subi.b #$10 , $000F0103                         
00001F58  67FE                    2408              beq *                       * Check Z Flag  beq/bne
00001F5A  6BFE                    2409              bmi *                       * Check N Flag  bmi/bpl
00001F5C  65FE                    2410              bcs *                       * Check C Flag  bcc/bcs
00001F5E  69FE                    2411              bvs *                       * Check V Flag  bvc/bvs
00001F60  0439 00A5 000F0103      2412              subi.b #$A5 , $000F0103                         
00001F68  67FE                    2413              beq *                       * Check Z Flag  beq/bne
00001F6A  6AFE                    2414              bpl *                       * Check N Flag  bmi/bpl
00001F6C  64FE                    2415              bcc *                       * Check C Flag  bcc/bcs
00001F6E  68FE                    2416              bvc *                       * Check V Flag  bvc/bvs
00001F70  0C39 00C3 000F0103      2417              cmpi.b #$C3 , $000F0103                         
00001F78  66FE                    2418              bne *                       * Check Z Flag  beq/bne
00001F7A                          2419              
00001F7A                          2420      * EA = x.L- WORD
00001F7A  207C 000F0100           2421              move.l #$000F0100 , a0      * populate test data
00001F80  20BC 12345678           2422              move.l #$12345678 ,(a0)     * populate test data
00001F86  0479 0000 000F0100      2423              subi.w #0 , $000F0100                           
00001F8E  67FE                    2424              beq *                       * Check Z Flag  beq/bne
00001F90  6BFE                    2425              bmi *                       * Check N Flag  bmi/bpl
00001F92  65FE                    2426              bcs *                       * Check C Flag  bcc/bcs
00001F94  69FE                    2427              bvs *                       * Check V Flag  bvc/bvs
00001F96  0479 7000 000F0100      2428              subi.w #$7000 , $000F0100                           
00001F9E  67FE                    2429              beq *                       * Check Z Flag  beq/bne
00001FA0  6AFE                    2430              bpl *                       * Check N Flag  bmi/bpl
00001FA2  64FE                    2431              bcc *                       * Check C Flag  bcc/bcs
00001FA4  69FE                    2432              bvs *                       * Check V Flag  bvc/bvs
00001FA6  0479 A55A 000F0100      2433              subi.w #$A55A , $000F0100                           
00001FAE  67FE                    2434              beq *                       * Check Z Flag  beq/bne
00001FB0  6AFE                    2435              bpl *                       * Check N Flag  bmi/bpl
00001FB2  64FE                    2436              bcc *                       * Check C Flag  bcc/bcs
00001FB4  69FE                    2437              bvs *                       * Check V Flag  bvc/bvs
00001FB6  0C79 FCDA 000F0100      2438              cmpi.w #$FCDA , $000F0100                           
00001FBE  66FE                    2439              bne *                       * Check Z Flag  beq/bne
00001FC0                          2440      
00001FC0                          2441      * EA = x.L- LONG
00001FC0  23FC 12345678 000F0100  2442              move.l #$12345678  , $000F0100  * populate test data
00001FCA  04B9 00000000 000F0100  2443              subi.l #0 , $000F0100                           
00001FD4  67FE                    2444              beq *                       * Check Z Flag  beq/bne
00001FD6  6BFE                    2445              bmi *                       * Check N Flag  bmi/bpl
00001FD8  65FE                    2446              bcs *                       * Check C Flag  bcc/bcs
00001FDA  69FE                    2447              bvs *                       * Check V Flag  bvc/bvs
00001FDC  04B9 F0000000 000F0100  2448              subi.l #$F0000000 , $000F0100                           
00001FE6  67FE                    2449              beq *                       * Check Z Flag  beq/bne
00001FE8  6BFE                    2450              bmi *                       * Check N Flag  bmi/bpl
00001FEA  64FE                    2451              bcc *                       * Check C Flag  bcc/bcs
00001FEC  69FE                    2452              bvs *                       * Check V Flag  bvc/bvs
00001FEE  04B9 855AA55A 000F0100  2453              subi.l #$855AA55A , $000F0100                           
00001FF8  67FE                    2454              beq *                       * Check Z Flag  beq/bne
00001FFA  6AFE                    2455              bpl *                       * Check N Flag  bmi/bpl
00001FFC  64FE                    2456              bcc *                       * Check C Flag  bcc/bcs
00001FFE  68FE                    2457              bvc *                       * Check V Flag  bvc/bvs
00002000  04B9 A0000000 000F0100  2458              subi.l #$A0000000 , $000F0100                           
0000200A  69FE                    2459              bvs *                       * Check V Flag  bvc/bvs
0000200C  0CB9 FCD9B11E 000F0100  2460              cmpi.l #$FCD9B11E , $000F0100                           
00002016  66FE                    2461              bne *                       * Check Z Flag  beq/bne
00002018                          2462              
00002018  4E75                    2463              rts
0000201A                          2464      
0000201A                          2465      
0000201A                          2466  
0000201A                          2467  *-----------------------------------------------------------
0000201A                          2468  *-----------------------------------------------------------
0000201A                          2469  * OPCODE : MOVE
0000201A                          2470  *-----------------------------------------------------------
0000201A                          2471  *-----------------------------------------------------------
0000201A                          2472  op_MOVE: 
0000201A  203C 11223344           2473              move.l #$11223344  , d0
00002020  223C 55667788           2474              move.l #$55667788  , d1
00002026  243C 8899AABB           2475              move.l #$8899aabb  , d2
0000202C  263C CCDDEEFF           2476              move.l #$ccddeeff  , d3
00002032  7800                    2477              move.l #$00000000  , d4
00002034  7A00                    2478              move.l #$00000000  , d5
00002036  7C00                    2479              move.l #$00000000  , d6
00002038  7E00                    2480              move.l #$00000000  , d7         
0000203A  207C 44332211           2481              move.l #$44332211  , a0
00002040  227C 88776655           2482              move.l #$88776655  , a1
00002046  247C BBAA9988           2483              move.l #$bbaa9988  , a2
0000204C  267C FFEEDDCC           2484              move.l #$ffeeddcc  , a3
00002052                          2485              
00002052  1800                    2486              move.b d0 , d4              * BYTE - DATA REGISTER
00002054  67FE                    2487              beq *                       * Check Z Flag  beq/bne
00002056  6BFE                    2488              bmi *                       * Check N Flag  bmi/bpl
00002058  0C84 00000044           2489              cmpi.l #$00000044 , d4                          
0000205E  66FE                    2490              bne *                       * Check Z Flag  beq/bne
00002060                          2491          
00002060  3A01                    2492              move.w d1 , d5              * WORD - DATA REGISTER
00002062  67FE                    2493              beq *                       * Check Z Flag  beq/bne
00002064  6BFE                    2494              bmi *                       * Check N Flag  bmi/bpl
00002066  0C85 00007788           2495              cmpi.l #$00007788 , d5                          
0000206C  66FE                    2496              bne *                       * Check Z Flag  beq/bne
0000206E                          2497          
0000206E  2C02                    2498              move.l d2 , d6              * LONG - DATA REGISTER
00002070  67FE                    2499              beq *                       * Check Z Flag  beq/bne
00002072  6AFE                    2500              bpl *                       * Check N Flag  bmi/bpl
00002074  0C86 8899AABB           2501              cmpi.l #$8899aabb , d6                          
0000207A  66FE                    2502              bne *                       * Check Z Flag  beq/bne
0000207C                          2503  
0000207C  3A09                    2504              move.w a1 , d5              * WORD - ADDRESS REGISTER
0000207E  67FE                    2505              beq *                       * Check Z Flag  beq/bne
00002080  6BFE                    2506              bmi *                       * Check N Flag  bmi/bpl
00002082  0C85 00006655           2507              cmpi.l #$00006655 , d5                          
00002088  66FE                    2508              bne *                       * Check Z Flag  beq/bne
0000208A                          2509          
0000208A  2C0A                    2510              move.l a2 , d6              * LONG - ADDRESS REGISTER
0000208C  67FE                    2511              beq *                       * Check Z Flag  beq/bne
0000208E  6AFE                    2512              bpl *                       * Check N Flag  bmi/bpl
00002090  0C86 BBAA9988           2513              cmpi.l #$bbaa9988  , d6                         
00002096  66FE                    2514              bne *                       * Check Z Flag  beq/bne
00002098                          2515              
00002098                          2516      
00002098  3842                    2517              movea.w d2 , a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
0000209A  B9C2                    2518              cmpa.l d2 , a4                          
0000209C  67FE                    2519              beq *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
0000209E                          2520          
0000209E  2A41                    2521              movea.l d1 , a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
000020A0  BBC1                    2522              cmpa.l d1  , a5                         
000020A2  66FE                    2523              bne *                       * Check Z Flag  beq/bne
000020A4                          2524          
000020A4                          2525  
000020A4                          2526  
000020A4                          2527    * Too mamy EA combinations to test, so we focus on a few of the more complicted EA's 
000020A4                          2528    
000020A4  203C 11223344           2529              move.l #$11223344  , d0
000020AA  223C 00010100           2530              move.l #$00010100  , d1
000020B0  243C 8899AABB           2531              move.l #$8899aabb  , d2
000020B6  7601                    2532              move.l #$00000001  , d3
000020B8  7800                    2533              move.l #$00000000  , d4
000020BA  7A00                    2534              move.l #$00000000  , d5
000020BC  7C00                    2535              move.l #$00000000  , d6
000020BE  7E00                    2536              move.l #$00000000  , d7         
000020C0  207C 00000000           2537              move.l #$00000000  , a0
000020C6  227C 00010100           2538              move.l #$00010100  , a1
000020CC                          2539  
000020CC                          2540      * x(An,AL) --> x.L
000020CC  11BC 005A 9804          2541              move.b #$5A , 4(a0,a1.l)    * BYTE 
000020D2  47F0 9804               2542              lea 4(a0,a1.l) , a3    
000020D6  13F0 9804 00010105      2543              move.b 4(a0,a1.l) , $00010105    
000020DE  67FE                    2544              beq *                       * Check Z Flag  beq/bne
000020E0  6BFE                    2545              bmi *                       * Check N Flag  bmi/bpl
000020E2  0C30 005A 9805          2546              cmpi.b #$5A , 5(a0,a1.l)                            
000020E8  66FE                    2547              bne *                       * Check Z Flag  beq/bne
000020EA                          2548                  
000020EA                          2549      * x.L --> n(An,Dw)
000020EA  11B9 00010105 1007      2550  MOVE2:      move.b  $00010105 , 7(a0,d1.w)    * BYTE  
000020F2  67FE                    2551              beq *                       * Check Z Flag  beq/bne
000020F4  6BFE                    2552              bmi *                       * Check N Flag  bmi/bpl
000020F6  0C30 005A 1007          2553              cmpi.b #$5A , 7(a0,d1.w)                            
000020FC  66FE                    2554              bne *                       * Check Z Flag  beq/bne
000020FE                          2555                  
000020FE                          2556      * x(PC,Ds) --> x.w
000020FE  11FB 3068 0100          2557              move.b  MOVE1(pc,d3), $0100 * BYTE  
00002104  67FE                    2558              beq *                       * Check Z Flag  beq/bne
00002106  6AFE                    2559              bpl *                       * Check N Flag  bmi/bpl
00002108  0C38 00B9 20EB          2560              cmpi.b #$B9 ,1+MOVE2                            
0000210E  66FE                    2561              bne *                       * Check Z Flag  beq/bne
00002110                          2562                      
00002110                          2563      * #x -->    n(An,AL)
00002110  11BC 0078 1007          2564              move.b  #$78, 7(a0,d1.w)    * BYTE  
00002116  67FE                    2565              beq *                       * Check Z Flag  beq/bne
00002118  6BFE                    2566              bmi *                       * Check N Flag  bmi/bpl
0000211A  0C30 0078 1007          2567              cmpi.b #$78 ,7(a0,d1.w)                         
00002120  66FE                    2568              bne *                       * Check Z Flag  beq/bne
00002122                          2569          
00002122  203C 11223344           2570              move.l #$11223344  , d0
00002128  223C 00010100           2571              move.l #$00010100  , d1
0000212E  243C 8899AABB           2572              move.l #$8899aabb  , d2
00002134  7602                    2573              move.l #$00000002  , d3
00002136  7800                    2574              move.l #$00000000  , d4
00002138  7A00                    2575              move.l #$00000000  , d5
0000213A  7C00                    2576              move.l #$00000000  , d6
0000213C  7E00                    2577              move.l #$00000000  , d7         
0000213E  207C 00000000           2578              move.l #$00000000  , a0
00002144  227C 00010100           2579              move.l #$00010100  , a1
0000214A                          2580              
0000214A                          2581      * x(An,AL) --> x.L
0000214A  31BC 5A5A 9804          2582              move.w #$5A5A , 4(a0,a1.l)    * WORD  
00002150  49F0 9804               2583              lea 4(a0,a1.l) , a4    
00002154  33F0 9804 00010104      2584              move.w 4(a0,a1.l) , $00010104    
0000215C  67FE                    2585              beq *                       * Check Z Flag  beq/bne
0000215E  6BFE                    2586              bmi *                       * Check N Flag  bmi/bpl
00002160  0C70 5A5A 9804          2587              cmpi.w #$5A5A , 4(a0,a1.l)                          
00002166  66FE                    2588              bne *                       * Check Z Flag  beq/bne
00002168                          2589                  
00002168                          2590      * x.L --> n(An,Dw)
00002168  31B9 00010104 1006      2591  MOVE1:      move.w  $00010104 , 6(a0,d1.w)    * WORD  
00002170  67FE                    2592              beq *                       * Check Z Flag  beq/bne
00002172  6BFE                    2593              bmi *                       * Check N Flag  bmi/bpl
00002174  0C70 5A5A 1006          2594              cmpi.w #$5A5A , 6(a0,d1.w)                          
0000217A  66FE                    2595              bne *                       * Check Z Flag  beq/bne
0000217C                          2596                  
0000217C                          2597      * x(PC,Ds) --> x.w
0000217C  31FB 30EA 0100          2598              move.w  MOVE1(pc,d3), $0100 * WORD  
00002182  67FE                    2599              beq *                       * Check Z Flag  beq/bne
00002184  6BFE                    2600              bmi *                       * Check N Flag  bmi/bpl
00002186  0C78 67FE 2170          2601              cmpi.w #$67FE ,8+MOVE1                          
0000218C  66FE                    2602              bne *                       * Check Z Flag  beq/bne
0000218E                          2603                      
0000218E                          2604      * #x -->    n(An,AL)
0000218E  31BC 7878 1006          2605              move.w  #$7878, 6(a0,d1.w)    * WORD  
00002194  67FE                    2606              beq *                       * Check Z Flag  beq/bne
00002196  6BFE                    2607              bmi *                       * Check N Flag  bmi/bpl
00002198  0C70 7878 1006          2608              cmpi.w #$7878 ,6(a0,d1.w)                           
0000219E  66FE                    2609              bne *                       * Check Z Flag  beq/bne
000021A0                          2610          
000021A0                          2611  * ---
000021A0                          2612          
000021A0  203C 11223344           2613              move.l #$11223344  , d0
000021A6  223C 00010100           2614              move.l #$00010100  , d1
000021AC  243C 8899AABB           2615              move.l #$8899aabb  , d2
000021B2  7602                    2616              move.l #$00000002  , d3
000021B4  7800                    2617              move.l #$00000000  , d4
000021B6  7A00                    2618              move.l #$00000000  , d5
000021B8  7C00                    2619              move.l #$00000000  , d6
000021BA  7E00                    2620              move.l #$00000000  , d7         
000021BC  207C 00000000           2621              move.l #$00000000  , a0
000021C2  227C 00010100           2622              move.l #$00010100  , a1
000021C8                          2623              
000021C8                          2624      * x(An,AL) --> x.L
000021C8  21BC 5A5A1234 9804      2625              move.l #$5A5A1234 , 4(a0,a1.l)    * LONG  
000021D0  49F0 9804               2626              lea 4(a0,a1.l) , a4    
000021D4  23F0 9804 00010104      2627              move.l 4(a0,a1.l) , $00010104    
000021DC  67FE                    2628              beq *                       * Check Z Flag  beq/bne
000021DE  6BFE                    2629              bmi *                       * Check N Flag  bmi/bpl
000021E0  0CB0 5A5A1234 9804      2630              cmpi.l #$5A5A1234 , 4(a0,a1.l)                          
000021E8  66FE                    2631              bne *                       * Check Z Flag  beq/bne
000021EA                          2632                  
000021EA                          2633      * x.L --> n(An,Dw)
000021EA  21B9 00010104 1006      2634  MOVE3:      move.l  $00010104 , 6(a0,d1.w)    * LONG  
000021F2  67FE                    2635              beq *                       * Check Z Flag  beq/bne
000021F4  6BFE                    2636              bmi *                       * Check N Flag  bmi/bpl
000021F6  0CB0 5A5A1234 1006      2637              cmpi.l #$5A5A1234 , 6(a0,d1.w)                          
000021FE  66FE                    2638              bne *                       * Check Z Flag  beq/bne
00002200                          2639                  
00002200                          2640      * x(PC,Ds) --> x.w
00002200  21FB 30E8 0100          2641              move.l  MOVE3(pc,d3), $0100 * LONG  
00002206  67FE                    2642              beq *                       * Check Z Flag  beq/bne
00002208  6BFE                    2643              bmi *                       * Check N Flag  bmi/bpl
0000220A  0CB8 67FE6BFE 21F2      2644              cmpi.l #$67FE6BFE ,8+MOVE3                          
00002212  66FE                    2645              bne *                       * Check Z Flag  beq/bne
00002214                          2646                      
00002214                          2647      * #x -->    n(An,AL)
00002214  21BC 78782323 1006      2648              move.l  #$78782323, 6(a0,d1.w)    * LONG  
0000221C  67FE                    2649              beq *                       * Check Z Flag  beq/bne
0000221E  6BFE                    2650              bmi *                       * Check N Flag  bmi/bpl
00002220  0CB0 78782323 1006      2651              cmpi.l #$78782323 ,6(a0,d1.w)                           
00002228  66FE                    2652              bne *                       * Check Z Flag  beq/bne
0000222A                          2653          
0000222A                          2654          
0000222A  4E75                    2655           rts
0000222C                          2656  
0000222C                          2657      
0000222C                          2658  *-----------------------------------------------------------
0000222C                          2659  *-----------------------------------------------------------
0000222C                          2660  * OPCODE : MOVE_xxx_FLAGS
0000222C                          2661  *-----------------------------------------------------------
0000222C                          2662  *-----------------------------------------------------------
0000222C                          2663  op_MOVE_xxx_FLAGS: 
0000222C                          2664  
0000222C                          2665      * Move_To_SR
0000222C                          2666      
0000222C                          2667      * Dn
0000222C                          2668      
0000222C  303C 2FFF               2669              move.w #$2FFF, d0
00002230  46C0                    2670              move d0 , SR 
00002232  6AFE                    2671              bpl *           * branch if Z clear  
00002234  66FE                    2672              bne *           * branch if N clear
00002236  68FE                    2673              bvc *           * branch if V clear 
00002238  64FE                    2674              bcc *           * branch if C clear 
0000223A  303C 2F00               2675              move.w #$2F00, d0
0000223E  44C0                    2676              move d0 , CCR 
00002240  67FE                    2677              beq *           * branch if Z set  
00002242  6BFE                    2678              bmi *           * branch if N set  
00002244  69FE                    2679              bvs *           * branch if V set  
00002246  65FE                    2680              bcs *           * branch if C set  
00002248                          2681      
00002248  303C 2000               2682              move.w #$2000, d0
0000224C  46C0                    2683              move d0 , SR 
0000224E  67FE                    2684              beq *           * branch if Z set  
00002250  6BFE                    2685              bmi *           * branch if N set  
00002252  69FE                    2686              bvs *           * branch if V set  
00002254  65FE                    2687              bcs *           * branch if C set  
00002256                          2688         
00002256                          2689      * (An)
00002256  207C 00000100           2690              move.l #$00000100, a0
0000225C  30BC 2FFF               2691              move.w #$2FFF, (a0)
00002260  46D0                    2692              move (a0) , SR 
00002262  6AFE                    2693              bpl *           * branch if Z clear  
00002264  66FE                    2694              bne *           * branch if N clear
00002266  68FE                    2695              bvc *           * branch if V clear 
00002268  64FE                    2696              bcc *           * branch if C clear 
0000226A                          2697      
0000226A  30BC 2000               2698              move.w #$2000,(a0)
0000226E  46D0                    2699              move (a0) , SR 
00002270  67FE                    2700              beq *           * branch if Z set  
00002272  6BFE                    2701              bmi *           * branch if N set  
00002274  69FE                    2702              bvs *           * branch if V set  
00002276  65FE                    2703              bcs *           * branch if C set  
00002278                          2704              
00002278                          2705      * (An)+
00002278  207C 00000100           2706              move.l #$00000100, a0
0000227E  30BC 2FFF               2707              move.w #$2FFF, (a0)
00002282  46D8                    2708              move (a0)+ , SR 
00002284  6AFE                    2709              bpl *           * branch if Z clear  
00002286  66FE                    2710              bne *           * branch if N clear
00002288  68FE                    2711              bvc *           * branch if V clear 
0000228A  64FE                    2712              bcc *           * branch if C clear 
0000228C                          2713      
0000228C  30BC 2000               2714              move.w #$2000,(a0)
00002290  46D8                    2715              move (a0)+ , SR 
00002292  67FE                    2716              beq *           * branch if Z set  
00002294  6BFE                    2717              bmi *           * branch if N set  
00002296  69FE                    2718              bvs *           * branch if V set  
00002298  65FE                    2719              bcs *           * branch if C set  
0000229A                          2720                   
0000229A                          2721      * -(An)
0000229A  207C 00000102           2722              move.l #$00000102, a0
000022A0  30BC 2FFF               2723              move.w #$2FFF, (a0)
000022A4  46D8                    2724              move (a0)+ , SR 
000022A6  6AFE                    2725              bpl *           * branch if Z clear  
000022A8  66FE                    2726              bne *           * branch if N clear
000022AA  68FE                    2727              bvc *           * branch if V clear 
000022AC  64FE                    2728              bcc *           * branch if C clear 
000022AE                          2729      
000022AE  30BC 2000               2730              move.w #$2000,(a0)
000022B2  46D8                    2731              move (a0)+ , SR 
000022B4  67FE                    2732              beq *           * branch if Z set  
000022B6  6BFE                    2733              bmi *           * branch if N set  
000022B8  69FE                    2734              bvs *           * branch if V set  
000022BA  65FE                    2735              bcs *           * branch if C set  
000022BC                          2736                              
000022BC                          2737      * n(An)
000022BC  207C 00000102           2738              move.l #$00000102, a0
000022C2  317C 2FFF 0002          2739              move.w #$2FFF, 2(a0)
000022C8  46E8 0002               2740              move 2(a0) , SR 
000022CC  6AFE                    2741              bpl *           * branch if Z clear  
000022CE  66FE                    2742              bne *           * branch if N clear
000022D0  68FE                    2743              bvc *           * branch if V clear 
000022D2  64FE                    2744              bcc *           * branch if C clear 
000022D4                          2745      
000022D4  317C 2000 0002          2746              move.w #$2000,2(a0)
000022DA  46E8 0002               2747              move 2(a0) , SR 
000022DE  67FE                    2748              beq *           * branch if Z set  
000022E0  6BFE                    2749              bmi *           * branch if N set  
000022E2  69FE                    2750              bvs *           * branch if V set  
000022E4  65FE                    2751              bcs *           * branch if C set  
000022E6                          2752                                      
000022E6                          2753      * n(An,Rn.l)
000022E6  207C 00000100           2754              move.l #$00000100, a0
000022EC  7002                    2755              move.l #$00000002, d0
000022EE  31BC 2FFF 0802          2756              move.w #$2FFF, 2(a0,d0.l)
000022F4  46F0 0802               2757              move 2(a0,d0.l) , SR 
000022F8  6AFE                    2758              bpl *           * branch if Z clear  
000022FA  66FE                    2759              bne *           * branch if N clear
000022FC  68FE                    2760              bvc *           * branch if V clear 
000022FE  64FE                    2761              bcc *           * branch if C clear 
00002300                          2762      
00002300  31BC 2000 0802          2763              move.w #$2000, 2(a0,d0.l)
00002306  46F0 0802               2764              move 2(a0,d0.l) , SR 
0000230A  67FE                    2765              beq *           * branch if Z set  
0000230C  6BFE                    2766              bmi *           * branch if N set  
0000230E  69FE                    2767              bvs *           * branch if V set  
00002310  65FE                    2768              bcs *           * branch if C set  
00002312                          2769                                                 
00002312                          2770      * x.W
00002312  31FC 2FFF 0100          2771              move.w #$2FFF, $0100
00002318  46F8 0100               2772              move $0100 , SR 
0000231C  6AFE                    2773              bpl *           * branch if Z clear  
0000231E  66FE                    2774              bne *           * branch if N clear
00002320  68FE                    2775              bvc *           * branch if V clear 
00002322  64FE                    2776              bcc *           * branch if C clear 
00002324                          2777      
00002324  31FC 2000 0100          2778              move.w #$2000, $0100
0000232A  46F8 0100               2779              move $0100 , SR 
0000232E  67FE                    2780              beq *           * branch if Z set  
00002330  6BFE                    2781              bmi *           * branch if N set  
00002332  69FE                    2782              bvs *           * branch if V set  
00002334  65FE                    2783              bcs *           * branch if C set  
00002336                          2784                                                           
00002336                          2785      * x.L
00002336  33FC 2FFF 00010100      2786              move.w #$2FFF, $00010100
0000233E  46F9 00010100           2787              move $00010100 , SR 
00002344  6AFE                    2788              bpl *           * branch if Z clear  
00002346  66FE                    2789              bne *           * branch if N clear
00002348  68FE                    2790              bvc *           * branch if V clear 
0000234A  64FE                    2791              bcc *           * branch if C clear 
0000234C                          2792      
0000234C  33FC 2000 00010100      2793  MOVE4:      move.w #$2000, $00010100
00002354  46F9 00010100           2794              move $00010100 , SR 
0000235A  67FE                    2795              beq *           * branch if Z set  
0000235C  6BFE                    2796              bmi *           * branch if N set  
0000235E  69FE                    2797              bvs *           * branch if V set  
00002360  65FE                    2798              bcs *           * branch if C set  
00002362                          2799                                                                     
00002362                          2800      * x(PC)
00002362  46FA FFEA               2801              move MOVE4+2(pc) , SR 
00002366  67FE                    2802              beq *           * branch if Z set  
00002368  6BFE                    2803              bmi *           * branch if N set  
0000236A  69FE                    2804              bvs *           * branch if V set  
0000236C  65FE                    2805              bcs *           * branch if C set 
0000236E                          2806                                                                     
0000236E                          2807      * x(PC,d0.l)
0000236E  7000                    2808              move.l #$00000000, d0
00002370  46FB 08DC               2809              move MOVE4+2(pc,d0.l) , SR 
00002374  67FE                    2810              beq *           * branch if Z set  
00002376  6BFE                    2811              bmi *           * branch if N set  
00002378  69FE                    2812              bvs *           * branch if V set  
0000237A  65FE                    2813              bcs *           * branch if C set 
0000237C  44FB 08D0               2814              move MOVE4+2(pc,d0.l) , CCR 
00002380  67FE                    2815              beq *           * branch if Z set  
00002382  6BFE                    2816              bmi *           * branch if N set  
00002384  69FE                    2817              bvs *           * branch if V set  
00002386  65FE                    2818              bcs *           * branch if C set 
00002388                          2819                                                                     
00002388                          2820      * #x
00002388  46FC 2FFF               2821              move #$2FFF, SR 
0000238C  66FE                    2822              bne *           * branch if Z clear  
0000238E  6AFE                    2823              bpl *           * branch if N clear
00002390  68FE                    2824              bvc *           * branch if V clear 
00002392  64FE                    2825              bcc *           * branch if C clear 
00002394                          2826              
00002394                          2827              
00002394                          2828              
00002394                          2829   * MOVE_From_SR
00002394                          2830  
00002394                          2831              
00002394                          2832              
00002394                          2833      * Dn
00002394  46FC 275A               2834              move #$275A, SR        * Initial value
00002398  40C0                    2835              move SR , d0
0000239A  0C40 275A               2836              cmpi.w #$275A , d0
0000239E  66FE                    2837              bne *                   * branch if Z set  
000023A0                          2838                   
000023A0                          2839      * (An)
000023A0  207C 00000100           2840              move.l #$00000100, a0
000023A6  46FC 275A               2841              move #$275A, SR        * Initial value
000023AA  40D0                    2842              move SR , (a0)
000023AC  0C50 275A               2843              cmpi.w #$275A , (a0)
000023B0  66FE                    2844              bne *                   * branch if Z set  
000023B2                          2845                         
000023B2                          2846      * (An)+
000023B2  207C 00000100           2847              move.l #$00000100, a0
000023B8  46FC 257A               2848              move #$257A, SR        * Initial value
000023BC  40D8                    2849              move SR , (a0)+
000023BE  207C 00000100           2850              move.l #$00000100, a0
000023C4  0C58 257A               2851              cmpi.w #$257A , (a0)+
000023C8  66FE                    2852              bne *                   * branch if Z set  
000023CA                          2853                                     
000023CA                          2854      * -(An)
000023CA  207C 00000102           2855              move.l #$00000102, a0
000023D0  46FC 2766               2856              move #$2766, SR        * Initial value
000023D4  40E0                    2857              move SR , -(a0)
000023D6  207C 00000100           2858              move.l #$00000100, a0
000023DC  0C50 2766               2859              cmpi.w #$2766 , (a0)
000023E0  66FE                    2860              bne *                   * branch if Z set  
000023E2                          2861                                           
000023E2                          2862      * x(An)
000023E2  207C 00000102           2863              move.l #$00000102, a0
000023E8  46FC 2733               2864              move #$2733, SR        * Initial value
000023EC  40E8 0004               2865              move SR , 4(a0)
000023F0  0C68 2733 0004          2866              cmpi.w #$2733 , 4(a0)
000023F6  66FE                    2867              bne *                   * branch if Z set  
000023F8                          2868                                               
000023F8                          2869      * x(An,rn)
000023F8  207C 00000102           2870              move.l #$00000102, a0
000023FE  7004                    2871              move.l #$00000004, d0
00002400  46FC 275A               2872              move #$275a, SR        * Initial value
00002404  40F0 0804               2873              move SR , 4(a0,d0.l)
00002408  0C70 275A 0804          2874              cmpi.w #$275a , 4(a0,d0.l)
0000240E  66FE                    2875              bne *                   * branch if Z set  
00002410                          2876                                                          
00002410                          2877      * x.W
00002410  46FC 2777               2878              move #$2777, SR        * Initial value
00002414  40F8 0102               2879              move SR , $0102
00002418  0C78 2777 0102          2880              cmpi.w #$2777 , $0102
0000241E  66FE                    2881              bne *                   * branch if Z set  
00002420                          2882                                                               
00002420                          2883      * x.L
00002420  46FC 2777               2884              move #$2777, SR        * Initial value
00002424  40F9 00010102           2885              move SR , $10102
0000242A  0C79 2777 00010102      2886              cmpi.w #$2777 , $10102
00002432  66FE                    2887              bne *                   * branch if Z set  
00002434                          2888              
00002434                          2889              
00002434                          2890              
00002434  46FC 2700               2891              move #$2700, SR        * Put flags back to initial value
00002438                          2892  
00002438  4E75                    2893              rts
0000243A                          2894  
0000243A                          2895               
0000243A                          2896  *-----------------------------------------------------------
0000243A                          2897  *-----------------------------------------------------------
0000243A                          2898  * OPCODE : EXT
0000243A                          2899  *-----------------------------------------------------------
0000243A                          2900  *-----------------------------------------------------------
0000243A                          2901  op_EXT: 
0000243A                          2902  
0000243A  707F                    2903              move.l #$0000007F, d0
0000243C  223C 00008FFF           2904              move.l #$00008FFF, d1
00002442  7400                    2905              move.l #$00000000, d2
00002444                          2906              
00002444  4880                    2907              ext.w d0
00002446  6BFE                    2908              bmi *                   * Check N Flag  bmi/bpl
00002448  67FE                    2909              beq *                   * Check Z Flag  beq/bne
0000244A  0C80 0000007F           2910              cmpi.l #$0000007F , d0
00002450  66FE                    2911              bne *                   * branch if Z set  
00002452                          2912              
00002452  48C1                    2913              ext.l d1
00002454  6AFE                    2914              bpl *                   * Check N Flag  bmi/bpl
00002456  67FE                    2915              beq *                   * Check Z Flag  beq/bne
00002458  0C81 FFFF8FFF           2916              cmpi.l #$FFFF8FFF , d1
0000245E  66FE                    2917              bne *                   * branch if Z set  
00002460                          2918              
00002460  48C2                    2919              ext.l d2
00002462  66FE                    2920              bne *                   * Check Z Flag  beq/bne
00002464                          2921  
00002464                          2922  
00002464                          2923               
00002464                          2924  *-----------------------------------------------------------
00002464                          2925  *-----------------------------------------------------------
00002464                          2926  * OPCODE : SWAP
00002464                          2927  *-----------------------------------------------------------
00002464                          2928  *-----------------------------------------------------------
00002464                          2929  op_SWAP: 
00002464                          2930  
00002464  203C 12345678           2931              move.l #$12345678, d0
0000246A                          2932              
0000246A  4840                    2933              swap d0
0000246C  6BFE                    2934              bmi *                   * Check N Flag  bmi/bpl
0000246E  67FE                    2935              beq *                   * Check Z Flag  beq/bne
00002470  0C80 56781234           2936              cmpi.l #$56781234 , d0
00002476  66FE                    2937              bne *                   * branch if Z set  
00002478                          2938  
00002478                          2939  
00002478                          2940  
00002478  4E75                    2941              rts
0000247A                          2942              
0000247A                          2943               
0000247A                          2944  *-----------------------------------------------------------
0000247A                          2945  *-----------------------------------------------------------
0000247A                          2946  * OPCODE : LEA_PEA
0000247A                          2947  *-----------------------------------------------------------
0000247A                          2948  *-----------------------------------------------------------
0000247A                          2949  op_LEAPEA: 
0000247A                          2950  
0000247A  207C 00345678           2951              move.l #$00345678, a0
00002480  7800                    2952              move.l #$00000000, d4
00002482                          2953              
00002482                          2954      * (An)      
00002482  4DD0                    2955              lea (a0) , a6
00002484  200E                    2956              move.l a6 , d0
00002486  0C80 00345678           2957              cmpi.l #$00345678, d0
0000248C  66FE                    2958              bne *                   * branch if Z set  
0000248E  4850                    2959              pea (a0)
00002490  0C97 00345678           2960              cmpi.l #$00345678, (a7)
00002496  66FE                    2961              bne *                   * branch if Z set  
00002498  584F                    2962              addq #4 , a7            * Restore Stack Pointer
0000249A                          2963              
0000249A                          2964      * x(An)     
0000249A  4DE8 0004               2965              lea 4(a0) , a6
0000249E  200E                    2966              move.l a6 , d0
000024A0  0C80 0034567C           2967              cmpi.l #$0034567C, d0
000024A6  66FE                    2968              bne *                   * branch if Z set  
000024A8  4868 0004               2969              pea 4(a0)
000024AC  0C97 0034567C           2970              cmpi.l #$0034567C, (a7)
000024B2  66FE                    2971              bne *                   * branch if Z set  
000024B4  584F                    2972              addq #4 , a7            * Restore Stack Pointer         
000024B6                          2973  
000024B6                          2974      * x(An,Dn.l)        
000024B6  4DF0 4004               2975              lea 4(a0,d4) , a6
000024BA  200E                    2976              move.l a6 , d0
000024BC  0C80 0034567C           2977              cmpi.l #$0034567C, d0
000024C2  66FE                    2978              bne *                   * branch if Z set  
000024C4  4870 4804               2979              pea 4(a0,d4.l)
000024C8  0C97 0034567C           2980              cmpi.l #$0034567C, (a7)
000024CE  66FE                    2981              bne *                   * branch if Z set  
000024D0  584F                    2982              addq #4 , a7            * Restore Stack Pointer
000024D2                          2983              
000024D2                          2984      * x.W       
000024D2  4DF8 1234               2985              lea $1234 , a6
000024D6  200E                    2986              move.l a6 , d0
000024D8  0C40 1234               2987              cmpi.w #$1234, d0
000024DC  66FE                    2988              bne *                   * branch if Z set  
000024DE  4878 1234               2989              pea $1234
000024E2  0C97 00001234           2990              cmpi.l #$00001234, (a7)
000024E8  66FE                    2991              bne *                   * branch if Z set  
000024EA  584F                    2992              addq #4 , a7            * Restore Stack Pointer
000024EC                          2993             
000024EC                          2994      * x.L       
000024EC  4DF9 00345678           2995              lea $00345678 , a6
000024F2  200E                    2996              move.l a6 , d0
000024F4  B08E                    2997              cmp.l a6, d0
000024F6  66FE                    2998              bne *                   * branch if Z set  
000024F8  4879 00345678           2999              pea $00345678
000024FE  0C97 00345678           3000              cmpi.l #$00345678, (a7)
00002504  66FE                    3001              bne *                   * branch if Z set  
00002506  584F                    3002              addq #4 , a7            * Restore Stack Pointer
00002508                          3003             
00002508                          3004      * x(PC)     
00002508  4DFA 0008               3005              lea LEA1(pc), a6
0000250C  200E                    3006              move.l a6 , d0
0000250E  B08E                    3007              cmp.l a6, d0
00002510  66FE                    3008              bne *                   * branch if Z set  
00002512  487A FFFE               3009  LEA1:       pea LEA1(pc)
00002516  0C97 0000241E           3010              cmpi.l #$0000241E, (a7)
0000251C  67FE                    3011              beq *                   * branch if Z clear  
0000251E  584F                    3012              addq #4 , a7            * Restore Stack Pointer
00002520                          3013  
00002520                          3014  
00002520                          3015  
00002520                          3016            
00002520  46FC 2700               3017              move #$2700, SR        * Put flags back to initial value
00002524                          3018  
00002524  4E75                    3019              rts
00002526                          3020      
00002526                          3021  
00002526                          3022               
00002526                          3023  *-----------------------------------------------------------
00002526                          3024  *-----------------------------------------------------------
00002526                          3025  * OPCODE : LEA_TAS
00002526                          3026  *-----------------------------------------------------------
00002526                          3027  *-----------------------------------------------------------
00002526                          3028  op_TAS: 
00002526                          3029  
00002526                          3030      * Test just one addressing mode
00002526                          3031  
00002526  207C 00000100           3032              move.l #$00000100, a0
0000252C                          3033              
0000252C                          3034      * (An)      
0000252C  10BC 0000               3035              move.b #$00 , (a0)
00002530  6BFE                    3036              bmi *                   * Check N Flag  bmi/bpl
00002532  66FE                    3037              bne *                   * Check Z Flag  beq/bne
00002534  4AD0                    3038              tas (a0)
00002536  0C10 0080               3039              cmpi.b #$80, (a0)
0000253A  66FE                    3040              bne *                   * branch if Z set  
0000253C  10BC 00F5               3041              move.b #$F5 , (a0)
00002540  4AD0                    3042              tas (a0)
00002542  6AFE                    3043              bpl *                   * Check N Flag  bmi/bpl
00002544  67FE                    3044              beq *                   * Check Z Flag  beq/bne
00002546  4AD0                    3045              tas (a0)
00002548  0C10 00F5               3046              cmpi.b #$F5, (a0)
0000254C  66FE                    3047              bne *                   * branch if Z set  
0000254E                          3048  
0000254E  4E75                    3049              rts
00002550                          3050              
00002550                          3051       
00002550                          3052  *-----------------------------------------------------------
00002550                          3053  *-----------------------------------------------------------
00002550                          3054  * OPCODE : LEA_TST
00002550                          3055  *-----------------------------------------------------------
00002550                          3056  *-----------------------------------------------------------
00002550                          3057  op_TST: 
00002550                          3058  
00002550                          3059      * Test just one addressing mode
00002550                          3060  
00002550  207C 00000100           3061              move.l #$00000100, a0
00002556                          3062              
00002556                          3063      * (An) - BYTE       
00002556  10BC 0000               3064              move.b #$00 , (a0)
0000255A  4A10                    3065              tst.b (a0)
0000255C  6BFE                    3066              bmi *                   * Check N Flag  bmi/bpl
0000255E  66FE                    3067              bne *                   * Check Z Flag  beq/bne
00002560  10BC 00F5               3068              move.b #$F5 , (a0)
00002564  4A10                    3069              tst.b (a0)
00002566  6AFE                    3070              bpl *                   * Check N Flag  bmi/bpl
00002568  67FE                    3071              beq *                   * Check Z Flag  beq/bne
0000256A                          3072              
0000256A                          3073      * (An) - WORD       
0000256A  30BC 0000               3074              move.w #$0000 , (a0)
0000256E  4A50                    3075              tst.w (a0)
00002570  6BFE                    3076              bmi *                   * Check N Flag  bmi/bpl
00002572  66FE                    3077              bne *                   * Check Z Flag  beq/bne
00002574  30BC F567               3078              move.w #$F567 , (a0)
00002578  4A50                    3079              tst.w (a0)
0000257A  6AFE                    3080              bpl *                   * Check N Flag  bmi/bpl
0000257C  67FE                    3081              beq *                   * Check Z Flag  beq/bne
0000257E                          3082              
0000257E                          3083      * (An) - LONG       
0000257E  20BC 00000000           3084              move.l #$00000000 , (a0)
00002584  4A90                    3085              tst.l (a0)
00002586  6BFE                    3086              bmi *                   * Check N Flag  bmi/bpl
00002588  66FE                    3087              bne *                   * Check Z Flag  beq/bne
0000258A  20BC F56789AB           3088              move.l #$F56789ab , (a0)
00002590  4A90                    3089              tst.l (a0)
00002592  6AFE                    3090              bpl *                   * Check N Flag  bmi/bpl
00002594  67FE                    3091              beq *                   * Check Z Flag  beq/bne
00002596                          3092  
00002596                          3093  
00002596  4E75                    3094              rts
00002598                          3095      
00002598                          3096       
00002598                          3097  *-----------------------------------------------------------
00002598                          3098  *-----------------------------------------------------------
00002598                          3099  * OPCODE : LINKS
00002598                          3100  *-----------------------------------------------------------
00002598                          3101  *-----------------------------------------------------------
00002598                          3102  op_LINKS: 
00002598                          3103  
00002598  207C 11223344           3104              move.l #$11223344, a0
0000259E  203C 11223344           3105              move.l #$11223344, d0
000025A4  4E50 0000               3106              link a0, #$0
000025A8  0C97 11223344           3107              cmpi.l #$11223344, (a7)
000025AE                          3108              
000025AE  4E58                    3109              unlk a0
000025B0  B1C0                    3110              cmp.l d0 , a0
000025B2  66FE                    3111              bne *                   * branch if Z set  
000025B4                          3112  
000025B4  4E75                    3113              rts
000025B6                          3114                   
000025B6                          3115  *-----------------------------------------------------------
000025B6                          3116  *-----------------------------------------------------------
000025B6                          3117  * OPCODE : MOVE_USP
000025B6                          3118  *-----------------------------------------------------------
000025B6                          3119  *-----------------------------------------------------------
000025B6                          3120  op_MOVE_USP: 
000025B6                          3121  
000025B6  207C 11223344           3122              move.l #$11223344, a0
000025BC  4E60                    3123              move a0 , USP
000025BE  4E69                    3124              move USP , a1
000025C0  B3C8                    3125              cmp.l a0 , a1
000025C2  66FE                    3126              bne *                   * branch if Z set  
000025C4                          3127  
000025C4                          3128                            
000025C4                          3129  *-----------------------------------------------------------
000025C4                          3130  *-----------------------------------------------------------
000025C4                          3131  * OPCODE : CHK
000025C4                          3132  *-----------------------------------------------------------
000025C4                          3133  *-----------------------------------------------------------
000025C4                          3134  op_CHK: 
000025C4  303C 1122               3135              move.w #$1122, d0
000025C8  323C 1122               3136              move.w #$1122, d1
000025CC  4380                    3137              chk d0 , d1 
000025CE                          3138              
000025CE  4E71                    3139              nop
000025D0  4E71                    3140              nop
000025D2                          3141              
000025D2  323C 1122               3142              move.w #$1122, d1
000025D6  43BC 1122               3143              chk #$1122 , d1 
000025DA                          3144                      
000025DA                          3145      * Comment out when using Easy68K
000025DA                          3146              *move.w #$1122, d1
000025DA                          3147              *chk #00122 , d1 
000025DA                          3148              *cmp.l #$EEEE0006 , d6
000025DA                          3149              *bne *                   * branch if Z set  
000025DA                          3150  
000025DA                          3151              *move.w #$1122, d0      
000025DA                          3152              *move.w #$8000, d1
000025DA                          3153              *chk d0 , d1 
000025DA                          3154              *cmp.l #$EEEE0006 , d6
000025DA                          3155              *bne *                   * branch if Z set  
000025DA                          3156  
000025DA  4E75                    3157              rts
000025DC                          3158        
000025DC                          3159                            
000025DC                          3160  *-----------------------------------------------------------
000025DC                          3161  *-----------------------------------------------------------
000025DC                          3162  * OPCODE : NEGS
000025DC                          3163  *-----------------------------------------------------------
000025DC                          3164  *-----------------------------------------------------------
000025DC                          3165  op_NEGS: 
000025DC                          3166  
000025DC                          3167      * NOT - BYTE
000025DC  207C 00000100           3168              move.l #$00000100, a0
000025E2  7000                    3169              move.l #$00000000, d0
000025E4  4600                    3170              not.b d0
000025E6  6AFE                    3171              bpl *                   * Check N Flag  bmi/bpl
000025E8  67FE                    3172              beq *                   * Check Z Flag  beq/bne
000025EA  4600                    3173              not.b d0
000025EC  6BFE                    3174              bmi *                   * Check N Flag  bmi/bpl
000025EE  66FE                    3175              bne *                   * Check Z Flag  beq/bne
000025F0  0C00 0000               3176              cmpi.b #$00 , d0
000025F4  66FE                    3177              bne *                   * Check Z Flag  beq/bne
000025F6  10BC 0080               3178              move.b #$80 , (a0)
000025FA  4610                    3179              not.b (a0)
000025FC  6BFE                    3180              bmi *                   * Check N Flag  bmi/bpl
000025FE  67FE                    3181              beq *                   * Check Z Flag  beq/bne
00002600  4610                    3182              not.b (a0)
00002602  6AFE                    3183              bpl *                   * Check N Flag  bmi/bpl
00002604  67FE                    3184              beq *                   * Check Z Flag  beq/bne
00002606  0C10 0080               3185              cmpi.b #$80 , (a0)
0000260A  66FE                    3186              bne *                   * Check Z Flag  beq/bne
0000260C                          3187  
0000260C                          3188      * NOT - WORD
0000260C  207C 00000100           3189              move.l #$00000100, a0
00002612  7000                    3190              move.l #$00000000, d0
00002614  4640                    3191              not.w d0
00002616  6AFE                    3192              bpl *                   * Check N Flag  bmi/bpl
00002618  67FE                    3193              beq *                   * Check Z Flag  beq/bne
0000261A  4640                    3194              not.w d0
0000261C  6BFE                    3195              bmi *                   * Check N Flag  bmi/bpl
0000261E  66FE                    3196              bne *                   * Check Z Flag  beq/bne
00002620  0C40 0000               3197              cmpi.w #$0000 , d0
00002624  66FE                    3198              bne *                   * Check Z Flag  beq/bne
00002626  30BC 5A5A               3199              move.w #$5a5a , (a0)
0000262A  4650                    3200              not.w (a0)
0000262C  6AFE                    3201              bpl *                   * Check N Flag  bmi/bpl
0000262E  67FE                    3202              beq *                   * Check Z Flag  beq/bne
00002630  4650                    3203              not.w (a0)
00002632  6BFE                    3204              bmi *                   * Check N Flag  bmi/bpl
00002634  67FE                    3205              beq *                   * Check Z Flag  beq/bne
00002636  0C50 5A5A               3206              cmpi.w #$5a5a , (a0)
0000263A  66FE                    3207              bne *                   * Check Z Flag  beq/bne
0000263C                          3208  
0000263C                          3209      * NOT - LONG
0000263C  207C 00000100           3210              move.l #$00000100, a0
00002642  7000                    3211              move.l #$00000000, d0
00002644  4680                    3212              not.l d0
00002646  6AFE                    3213              bpl *                   * Check N Flag  bmi/bpl
00002648  67FE                    3214              beq *                   * Check Z Flag  beq/bne
0000264A  4680                    3215              not.l d0
0000264C  6BFE                    3216              bmi *                   * Check N Flag  bmi/bpl
0000264E  66FE                    3217              bne *                   * Check Z Flag  beq/bne
00002650  0C80 00000000           3218              cmpi.l #$00000000 , d0
00002656  66FE                    3219              bne *                   * Check Z Flag  beq/bne
00002658  20BC 5A5A1234           3220              move.l #$5a5a1234 , (a0)
0000265E  4690                    3221              not.l (a0)
00002660  6AFE                    3222              bpl *                   * Check N Flag  bmi/bpl
00002662  67FE                    3223              beq *                   * Check Z Flag  beq/bne
00002664  4690                    3224              not.l (a0)
00002666  6BFE                    3225              bmi *                   * Check N Flag  bmi/bpl
00002668  67FE                    3226              beq *                   * Check Z Flag  beq/bne
0000266A  0C90 5A5A1234           3227              cmpi.l #$5a5a1234 , (a0)
00002670  66FE                    3228              bne *                   * Check Z Flag  beq/bne
00002672                          3229  
00002672                          3230  * ----- 
00002672                          3231  
00002672                          3232      * NEG - BYTE
00002672  207C 00000100           3233              move.l #$00000100, a0
00002678  7000                    3234              move.l #$00000000, d0
0000267A  223C 00000080           3235              move.l #$00000080, d1
00002680  4400                    3236              neg.b d0
00002682  6BFE                    3237              bmi *                   * Check N Flag  bmi/bpl 0
00002684  66FE                    3238              bne *                   * Check Z Flag  beq/bne 1
00002686  65FE                    3239              bcs *                   * Check C Flag  bcc/bcs 1
00002688  69FE                    3240              bvs *                   * Check V Flag  bvc/bvs 1
0000268A  4401                    3241              neg.b d1
0000268C  6AFE                    3242              bpl *                   * Check N Flag  bmi/bpl 1
0000268E  67FE                    3243              beq *                   * Check Z Flag  beq/bne 0
00002690  64FE                    3244              bcc *                   * Check C Flag  bcc/bcs 0
00002692  68FE                    3245              bvc *                   * Check V Flag  bvc/bvs 0       
00002694  0C01 0080               3246              cmpi.b #$80 , d1
00002698  66FE                    3247              bne *                   * Check Z Flag  beq/bne
0000269A  10BC 007F               3248              move.b #$7F , (a0)
0000269E  4410                    3249              neg.b (a0)
000026A0  6AFE                    3250              bpl *                   * Check N Flag  bmi/bpl 1
000026A2  67FE                    3251              beq *                   * Check Z Flag  beq/bne 0
000026A4  64FE                    3252              bcc *                   * Check C Flag  bcc/bcs 0
000026A6  69FE                    3253              bvs *                   * Check V Flag  bvc/bvs 1          
000026A8  10BC 00F5               3254              move.b #$F5 , (a0)
000026AC  4410                    3255              neg.b (a0)
000026AE  6BFE                    3256              bmi *                   * Check N Flag  bmi/bpl 0
000026B0  67FE                    3257              beq *                   * Check Z Flag  beq/bne 0
000026B2  64FE                    3258              bcc *                   * Check C Flag  bcc/bcs 0
000026B4  69FE                    3259              bvs *                   * Check V Flag  bvc/bvs 1       
000026B6  0C10 000B               3260              cmpi.b #$0B , (a0)
000026BA  66FE                    3261              bne *                   * Check Z Flag  beq/bne
000026BC                          3262  
000026BC                          3263  * -----         
000026BC                          3264  
000026BC                          3265      * NEG - WORD
000026BC  207C 00000100           3266              move.l #$00000100, a0
000026C2  7000                    3267              move.l #$00000000, d0
000026C4  223C 00008000           3268              move.l #$00008000, d1
000026CA  4440                    3269              neg.w d0
000026CC  6BFE                    3270              bmi *                   * Check N Flag  bmi/bpl 0
000026CE  66FE                    3271              bne *                   * Check Z Flag  beq/bne 1
000026D0  65FE                    3272              bcs *                   * Check C Flag  bcc/bcs 1
000026D2  69FE                    3273              bvs *                   * Check V Flag  bvc/bvs 1
000026D4  4441                    3274              neg.w d1
000026D6  6AFE                    3275              bpl *                   * Check N Flag  bmi/bpl 1
000026D8  67FE                    3276              beq *                   * Check Z Flag  beq/bne 0
000026DA  64FE                    3277              bcc *                   * Check C Flag  bcc/bcs 0
000026DC  68FE                    3278              bvc *                   * Check V Flag  bvc/bvs 0       
000026DE  0C41 8000               3279              cmpi.w #$8000 , d1
000026E2  66FE                    3280              bne *                   * Check Z Flag  beq/bne
000026E4  30BC 7FFF               3281              move.w #$7FFF , (a0)
000026E8  4450                    3282              neg.w (a0)
000026EA  6AFE                    3283              bpl *                   * Check N Flag  bmi/bpl 1
000026EC  67FE                    3284              beq *                   * Check Z Flag  beq/bne 0
000026EE  64FE                    3285              bcc *                   * Check C Flag  bcc/bcs 0
000026F0  69FE                    3286              bvs *                   * Check V Flag  bvc/bvs 1          
000026F2  30BC F578               3287              move.w #$F578 , (a0)
000026F6  4450                    3288              neg.w (a0)
000026F8  6BFE                    3289              bmi *                   * Check N Flag  bmi/bpl 0
000026FA  67FE                    3290              beq *                   * Check Z Flag  beq/bne 0
000026FC  64FE                    3291              bcc *                   * Check C Flag  bcc/bcs 0
000026FE  69FE                    3292              bvs *                   * Check V Flag  bvc/bvs 1       
00002700  0C50 0A88               3293              cmpi.w #$0A88 , (a0)
00002704  66FE                    3294              bne *                   * Check Z Flag  beq/bne
00002706                          3295  
00002706                          3296  * -----         
00002706                          3297  
00002706                          3298      * NEG - LONG
00002706  207C 00000100           3299              move.l #$00000100, a0
0000270C  7000                    3300              move.l #$00000000, d0
0000270E  223C 80000000           3301              move.l #$80000000, d1
00002714  4480                    3302              neg.l d0
00002716  6BFE                    3303              bmi *                   * Check N Flag  bmi/bpl 0
00002718  66FE                    3304              bne *                   * Check Z Flag  beq/bne 1
0000271A  65FE                    3305              bcs *                   * Check C Flag  bcc/bcs 1
0000271C  69FE                    3306              bvs *                   * Check V Flag  bvc/bvs 1
0000271E  4481                    3307              neg.l d1
00002720  6AFE                    3308              bpl *                   * Check N Flag  bmi/bpl 1
00002722  67FE                    3309              beq *                   * Check Z Flag  beq/bne 0
00002724  64FE                    3310              bcc *                   * Check C Flag  bcc/bcs 0
00002726  68FE                    3311              bvc *                   * Check V Flag  bvc/bvs 0       
00002728  0C81 80000000           3312              cmpi.l #$80000000 , d1
0000272E  66FE                    3313              bne *                   * Check Z Flag  beq/bne
00002730  20BC 7FFFFFFF           3314              move.l #$7FFFFFFF , (a0)
00002736  4490                    3315              neg.l (a0)
00002738  6AFE                    3316              bpl *                   * Check N Flag  bmi/bpl 1
0000273A  67FE                    3317              beq *                   * Check Z Flag  beq/bne 0
0000273C  64FE                    3318              bcc *                   * Check C Flag  bcc/bcs 0
0000273E  69FE                    3319              bvs *                   * Check V Flag  bvc/bvs 1          
00002740  20BC F5781234           3320              move.l #$F5781234 , (a0)
00002746  4490                    3321              neg.l (a0)
00002748  6BFE                    3322              bmi *                   * Check N Flag  bmi/bpl 0
0000274A  67FE                    3323              beq *                   * Check Z Flag  beq/bne 0
0000274C  64FE                    3324              bcc *                   * Check C Flag  bcc/bcs 0
0000274E  69FE                    3325              bvs *                   * Check V Flag  bvc/bvs 1       
00002750  0C90 0A87EDCC           3326              cmpi.l #$0A87EDCC , (a0)
00002756  66FE                    3327              bne *                   * Check Z Flag  beq/bne
00002758                          3328  
00002758                          3329  
00002758                          3330  * -----         
00002758                          3331  
00002758                          3332      * NEGX - BYTE
00002758  207C 00000100           3333              move.l #$00000100, a0
0000275E  7000                    3334              move.l #$00000000, d0
00002760  223C 00000080           3335              move.l #$00000080, d1
00002766  003C 0010               3336              ori.b #$10 , CCR        * Set X Flag
0000276A  4000                    3337              negx.b d0
0000276C  6AFE                    3338              bpl *                   * Check N Flag  bmi/bpl 0
0000276E  67FE                    3339              beq *                   * Check Z Flag  beq/bne 1
00002770  64FE                    3340              bcc *                   * Check C Flag  bcc/bcs 1
00002772  69FE                    3341              bvs *                   * Check V Flag  bvc/bvs 1           
00002774  023C 00EF               3342              andi.b #$EF , CCR       * Clear X Flag
00002778  4000                    3343              negx.b d0
0000277A  6BFE                    3344              bmi *                   * Check N Flag  bmi/bpl 0
0000277C  67FE                    3345              beq *                   * Check Z Flag  beq/bne 1
0000277E  64FE                    3346              bcc *                   * Check C Flag  bcc/bcs 1
00002780  69FE                    3347              bvs *                   * Check V Flag  bvc/bvs 1
00002782  003C 0010               3348              ori.b #$10 , CCR        * Set X Flag
00002786  4001                    3349              negx.b d1
00002788  6BFE                    3350              bmi *                   * Check N Flag  bmi/bpl 1
0000278A  67FE                    3351              beq *                   * Check Z Flag  beq/bne 0
0000278C  64FE                    3352              bcc *                   * Check C Flag  bcc/bcs 0
0000278E  69FE                    3353              bvs *                   * Check V Flag  bvc/bvs 0       
00002790  0C01 007F               3354              cmpi.b #$7F , d1
00002794  66FE                    3355              bne *                   * Check Z Flag  beq/bne         
00002796  023C 00EF               3356              andi.b #$EF , CCR       * Clear X Flag
0000279A  4001                    3357              negx.b d1
0000279C  6AFE                    3358              bpl *                   * Check N Flag  bmi/bpl 1
0000279E  67FE                    3359              beq *                   * Check Z Flag  beq/bne 0
000027A0  64FE                    3360              bcc *                   * Check C Flag  bcc/bcs 0
000027A2  69FE                    3361              bvs *                   * Check V Flag  bvc/bvs 0       
000027A4  0C01 0081               3362              cmpi.b #$81 , d1
000027A8  66FE                    3363              bne *                   * Check Z Flag  beq/bne
000027AA  10BC 007F               3364              move.b #$7F , (a0)
000027AE  003C 0010               3365              ori.b #$10 , CCR        * Set X Flag
000027B2  4010                    3366              negx.b (a0)
000027B4  6AFE                    3367              bpl *                   * Check N Flag  bmi/bpl 1
000027B6  67FE                    3368              beq *                   * Check Z Flag  beq/bne 0
000027B8  64FE                    3369              bcc *                   * Check C Flag  bcc/bcs 0
000027BA  69FE                    3370              bvs *                   * Check V Flag  bvc/bvs 1          
000027BC  10BC 007F               3371              move.b #$7F , (a0)
000027C0  023C 00EF               3372              andi.b #$EF , CCR       * Clear X Flag
000027C4  4010                    3373              negx.b (a0)
000027C6  6AFE                    3374              bpl *                   * Check N Flag  bmi/bpl 1
000027C8  67FE                    3375              beq *                   * Check Z Flag  beq/bne 0
000027CA  64FE                    3376              bcc *                   * Check C Flag  bcc/bcs 0
000027CC  69FE                    3377              bvs *                   * Check V Flag  bvc/bvs 1          
000027CE  10BC 00F5               3378              move.b #$F5 , (a0)
000027D2  003C 0010               3379              ori.b #$10 , CCR        * Set X Flag
000027D6  4010                    3380              negx.b (a0)
000027D8  6BFE                    3381              bmi *                   * Check N Flag  bmi/bpl 0
000027DA  67FE                    3382              beq *                   * Check Z Flag  beq/bne 0
000027DC  64FE                    3383              bcc *                   * Check C Flag  bcc/bcs 0
000027DE  69FE                    3384              bvs *                   * Check V Flag  bvc/bvs 1       
000027E0  0C10 000A               3385              cmpi.b #$0A , (a0)
000027E4  66FE                    3386              bne *                   * Check Z Flag  beq/bne
000027E6  023C 00EF               3387              andi.b #$EF , CCR       * Clear X Flag
000027EA  4010                    3388              negx.b (a0)
000027EC  6AFE                    3389              bpl *                   * Check N Flag  bmi/bpl 0
000027EE  67FE                    3390              beq *                   * Check Z Flag  beq/bne 0
000027F0  64FE                    3391              bcc *                   * Check C Flag  bcc/bcs 0
000027F2  69FE                    3392              bvs *                   * Check V Flag  bvc/bvs 1       
000027F4  0C10 00F6               3393              cmpi.b #$F6 , (a0)
000027F8  66FE                    3394              bne *                   * Check Z Flag  beq/bne
000027FA                          3395  
000027FA                          3396      
000027FA                          3397  
000027FA                          3398  * -----         
000027FA                          3399  
000027FA                          3400      * NEGX - WORD
000027FA  207C 00000100           3401              move.l #$00000100, a0
00002800  7000                    3402              move.l #$00000000, d0
00002802  223C 00008000           3403              move.l #$00008000, d1
00002808  003C 0010               3404              ori.b #$10 , CCR        * Set X Flag
0000280C  4040                    3405              negx.w d0
0000280E  6AFE                    3406              bpl *                   * Check N Flag  bmi/bpl 0
00002810  67FE                    3407              beq *                   * Check Z Flag  beq/bne 1
00002812  64FE                    3408              bcc *                   * Check C Flag  bcc/bcs 1
00002814  69FE                    3409              bvs *                   * Check V Flag  bvc/bvs 1           
00002816  023C 00EF               3410              andi.b #$EF , CCR       * Clear X Flag
0000281A  4040                    3411              negx.w d0
0000281C  6BFE                    3412              bmi *                   * Check N Flag  bmi/bpl 0
0000281E  67FE                    3413              beq *                   * Check Z Flag  beq/bne 1
00002820  64FE                    3414              bcc *                   * Check C Flag  bcc/bcs 1
00002822  69FE                    3415              bvs *                   * Check V Flag  bvc/bvs 1
00002824  003C 0010               3416              ori.b #$10 , CCR        * Set X Flag
00002828  4041                    3417              negx.w d1
0000282A  6BFE                    3418              bmi *                   * Check N Flag  bmi/bpl 1
0000282C  67FE                    3419              beq *                   * Check Z Flag  beq/bne 0
0000282E  64FE                    3420              bcc *                   * Check C Flag  bcc/bcs 0
00002830  69FE                    3421              bvs *                   * Check V Flag  bvc/bvs 0       
00002832  0C41 7FFF               3422              cmpi.w #$7FFF , d1
00002836  66FE                    3423              bne *                   * Check Z Flag  beq/bne         
00002838  023C 00EF               3424              andi.b #$EF , CCR       * Clear X Flag
0000283C  4041                    3425              negx.w d1
0000283E  6AFE                    3426              bpl *                   * Check N Flag  bmi/bpl 1
00002840  67FE                    3427              beq *                   * Check Z Flag  beq/bne 0
00002842  64FE                    3428              bcc *                   * Check C Flag  bcc/bcs 0
00002844  69FE                    3429              bvs *                   * Check V Flag  bvc/bvs 0       
00002846  0C41 8001               3430              cmpi.w #$8001 , d1
0000284A  66FE                    3431              bne *                   * Check Z Flag  beq/bne
0000284C  30BC 7FFF               3432              move.w #$7FFF , (a0)
00002850  003C 0010               3433              ori.b #$10 , CCR        * Set X Flag
00002854  4050                    3434              negx.w (a0)
00002856  6AFE                    3435              bpl *                   * Check N Flag  bmi/bpl 1
00002858  67FE                    3436              beq *                   * Check Z Flag  beq/bne 0
0000285A  64FE                    3437              bcc *                   * Check C Flag  bcc/bcs 0
0000285C  69FE                    3438              bvs *                   * Check V Flag  bvc/bvs 1          
0000285E  30BC F567               3439              move.w #$F567 , (a0)            
00002862  023C 00EF               3440              andi.b #$EF , CCR       * Clear X Flag
00002866  4050                    3441              negx.w (a0)
00002868  6BFE                    3442              bmi *                   * Check N Flag  bmi/bpl 1
0000286A  67FE                    3443              beq *                   * Check Z Flag  beq/bne 0
0000286C  64FE                    3444              bcc *                   * Check C Flag  bcc/bcs 0
0000286E  69FE                    3445              bvs *                   * Check V Flag  bvc/bvs 1          
00002870  30BC F567               3446              move.w #$F567 , (a0)
00002874  003C 0010               3447              ori.b #$10 , CCR        * Set X Flag
00002878  4050                    3448              negx.w (a0)
0000287A  6BFE                    3449              bmi *                   * Check N Flag  bmi/bpl 0
0000287C  67FE                    3450              beq *                   * Check Z Flag  beq/bne 0
0000287E  64FE                    3451              bcc *                   * Check C Flag  bcc/bcs 0
00002880  69FE                    3452              bvs *                   * Check V Flag  bvc/bvs 1       
00002882  0C50 0A98               3453              cmpi.w #$0A98 , (a0)
00002886  66FE                    3454              bne *                   * Check Z Flag  beq/bne
00002888  023C 00EF               3455              andi.b #$EF , CCR       * Clear X Flag
0000288C  4050                    3456              negx.w (a0)
0000288E  6AFE                    3457              bpl *                   * Check N Flag  bmi/bpl 0
00002890  67FE                    3458              beq *                   * Check Z Flag  beq/bne 0
00002892  64FE                    3459              bcc *                   * Check C Flag  bcc/bcs 0
00002894  69FE                    3460              bvs *                   * Check V Flag  bvc/bvs 1       
00002896  0C50 F568               3461              cmpi.w #$F568 , (a0)
0000289A  66FE                    3462              bne *                   * Check Z Flag  beq/bne
0000289C                          3463  
0000289C                          3464              
0000289C                          3465  * -----         
0000289C                          3466  
0000289C                          3467      * NEGX - LONG
0000289C  207C 00000100           3468              move.l #$00000100, a0
000028A2  7000                    3469              move.l #$00000000, d0
000028A4  223C 80000000           3470              move.l #$80000000, d1
000028AA  003C 0010               3471              ori.b #$10 , CCR        * Set X Flag
000028AE  4080                    3472              negx.l d0
000028B0  6AFE                    3473              bpl *                   * Check N Flag  bmi/bpl 0
000028B2  67FE                    3474              beq *                   * Check Z Flag  beq/bne 1
000028B4  64FE                    3475              bcc *                   * Check C Flag  bcc/bcs 1
000028B6  69FE                    3476              bvs *                   * Check V Flag  bvc/bvs 1           
000028B8  023C 00EF               3477              andi.b #$EF , CCR       * Clear X Flag
000028BC  4080                    3478              negx.l d0
000028BE  6BFE                    3479              bmi *                   * Check N Flag  bmi/bpl 0
000028C0  67FE                    3480              beq *                   * Check Z Flag  beq/bne 1
000028C2  64FE                    3481              bcc *                   * Check C Flag  bcc/bcs 1
000028C4  69FE                    3482              bvs *                   * Check V Flag  bvc/bvs 1
000028C6  003C 0010               3483              ori.b #$10 , CCR        * Set X Flag
000028CA  4081                    3484              negx.l d1
000028CC  6BFE                    3485              bmi *                   * Check N Flag  bmi/bpl 1
000028CE  67FE                    3486              beq *                   * Check Z Flag  beq/bne 0
000028D0  64FE                    3487              bcc *                   * Check C Flag  bcc/bcs 0
000028D2  69FE                    3488              bvs *                   * Check V Flag  bvc/bvs 0       
000028D4  0C81 7FFFFFFF           3489              cmpi.l #$7FFFFFFF , d1
000028DA  66FE                    3490              bne *                   * Check Z Flag  beq/bne         
000028DC  023C 00EF               3491              andi.b #$EF , CCR       * Clear X Flag
000028E0  4081                    3492              negx.l d1
000028E2  6AFE                    3493              bpl *                   * Check N Flag  bmi/bpl 1
000028E4  67FE                    3494              beq *                   * Check Z Flag  beq/bne 0
000028E6  64FE                    3495              bcc *                   * Check C Flag  bcc/bcs 0
000028E8  69FE                    3496              bvs *                   * Check V Flag  bvc/bvs 0       
000028EA  0C81 80000001           3497              cmpi.l #$80000001 , d1
000028F0  66FE                    3498              bne *                   * Check Z Flag  beq/bne
000028F2  20BC 00007FFF           3499              move.l #$7FFF , (a0)
000028F8  003C 0010               3500              ori.b #$10 , CCR        * Set X Flag
000028FC  4090                    3501              negx.l (a0)
000028FE  6AFE                    3502              bpl *                   * Check N Flag  bmi/bpl 1
00002900  67FE                    3503              beq *                   * Check Z Flag  beq/bne 0
00002902  64FE                    3504              bcc *                   * Check C Flag  bcc/bcs 0
00002904  69FE                    3505              bvs *                   * Check V Flag  bvc/bvs 1          
00002906  20BC F5671234           3506              move.l #$F5671234 , (a0)            
0000290C  023C 00EF               3507              andi.b #$EF , CCR       * Clear X Flag
00002910  4090                    3508              negx.l (a0)
00002912  6BFE                    3509              bmi *                   * Check N Flag  bmi/bpl 1
00002914  67FE                    3510              beq *                   * Check Z Flag  beq/bne 0
00002916  64FE                    3511              bcc *                   * Check C Flag  bcc/bcs 0
00002918  69FE                    3512              bvs *                   * Check V Flag  bvc/bvs 1          
0000291A  20BC F5675678           3513              move.l #$F5675678 , (a0)
00002920  003C 0010               3514              ori.b #$10 , CCR        * Set X Flag
00002924  4090                    3515              negx.l (a0)
00002926  6BFE                    3516              bmi *                   * Check N Flag  bmi/bpl 0
00002928  67FE                    3517              beq *                   * Check Z Flag  beq/bne 0
0000292A  64FE                    3518              bcc *                   * Check C Flag  bcc/bcs 0
0000292C  69FE                    3519              bvs *                   * Check V Flag  bvc/bvs 1       
0000292E  0C90 0A98A987           3520              cmpi.l #$0A98A987 , (a0)
00002934  66FE                    3521              bne *                   * Check Z Flag  beq/bne
00002936  023C 00EF               3522              andi.b #$EF , CCR       * Clear X Flag
0000293A  4090                    3523              negx.l (a0)
0000293C  6AFE                    3524              bpl *                   * Check N Flag  bmi/bpl 0
0000293E  67FE                    3525              beq *                   * Check Z Flag  beq/bne 0
00002940  64FE                    3526              bcc *                   * Check C Flag  bcc/bcs 0
00002942  69FE                    3527              bvs *                   * Check V Flag  bvc/bvs 1       
00002944  0C90 F5675679           3528              cmpi.l #$F5675679 , (a0)
0000294A  66FE                    3529              bne *                   * Check Z Flag  beq/bne
0000294C                          3530  
0000294C                          3531              
0000294C                          3532  * -----         
0000294C                          3533  
0000294C                          3534      * CLR - BYTE
0000294C  207C 00000100           3535              move.l #$00000100, a0
00002952  203C 12345678           3536              move.l #$12345678, d0
00002958  223C 12345678           3537              move.l #$12345678, d1                   
0000295E  243C 12345678           3538              move.l #$12345678, d2                   
00002964  283C 12345600           3539              move.l #$12345600, d4                   
0000296A  2A3C 12340000           3540              move.l #$12340000, d5                   
00002970  7C00                    3541              move.l #$00000000, d6                   
00002972                          3542              
00002972  4200                    3543              clr.b d0
00002974  66FE                    3544              bne *                   * Check Z Flag  beq/bne 0
00002976  6BFE                    3545              bmi *                   * Check N Flag  bmi/bpl 0
00002978  B880                    3546              cmp.l d0 , d4
0000297A  66FE                    3547              bne *                   * Check Z Flag  beq/bne 0
0000297C                          3548              
0000297C  4241                    3549              clr.w d1
0000297E  66FE                    3550              bne *                   * Check Z Flag  beq/bne 0
00002980  6BFE                    3551              bmi *                   * Check N Flag  bmi/bpl 0
00002982  BA81                    3552              cmp.l d1 , d5
00002984  66FE                    3553              bne *                   * Check Z Flag  beq/bne 0
00002986                          3554              
00002986  4282                    3555              clr.l d2
00002988  66FE                    3556              bne *                   * Check Z Flag  beq/bne 0
0000298A  6BFE                    3557              bmi *                   * Check N Flag  bmi/bpl 0
0000298C  BC82                    3558              cmp.l d2 , d6
0000298E  66FE                    3559              bne *                   * Check Z Flag  beq/bne 0
00002990                          3560  
00002990  4E75                    3561              rts      
00002992                          3562              
00002992                          3563        
00002992                          3564                            
00002992                          3565  *-----------------------------------------------------------
00002992                          3566  *-----------------------------------------------------------
00002992                          3567  * OPCODE : MOVEM
00002992                          3568  *-----------------------------------------------------------
00002992                          3569  *-----------------------------------------------------------
00002992                          3570  op_MOVEM: 
00002992                          3571  
00002992                          3572      * WORD  Registers --> Memory
00002992  203C 0000D0D0           3573              move.l #$0000d0d0, d0
00002998  223C 0000D1D1           3574              move.l #$0000d1d1, d1
0000299E  243C 0000D2D2           3575              move.l #$0000d2d2, d2
000029A4  263C 0000D3D3           3576              move.l #$0000d3d3, d3
000029AA  283C 0000D4D4           3577              move.l #$0000d4d4, d4
000029B0  2A3C 0000D5D5           3578              move.l #$0000d5d5, d5
000029B6  2C3C 0000D6D6           3579              move.l #$0000d6d6, d6
000029BC  2E3C 0000D7D7           3580              move.l #$0000d7d7, d7
000029C2  207C 00000A0A           3581              move.l #$00000a0a, a0
000029C8  227C 00001A1A           3582              move.l #$00001a1a, a1
000029CE  247C 00002A2A           3583              move.l #$00002a2a, a2
000029D4  267C 00003A3A           3584              move.l #$00003a3a, a3
000029DA  287C 00004A4A           3585              move.l #$00004a4a, a4
000029E0  2A7C 00005A5A           3586              move.l #$00005a5a, a5
000029E6  2C7C 00006A6A           3587              move.l #$00006a6a, a6
000029EC                          3588             *move.l #$00007a7a, a7  * Dont change the Stack Pointer
000029EC                          3589              
000029EC  48B8 FFFF 0100          3590              movem.w D0-D7/A0-A7 , $00000100  
000029F2                          3591              
000029F2  207C 00000100           3592              move.l #$00000100, a0
000029F8                          3593              
000029F8  B058                    3594              cmp.w (a0)+ , d0            
000029FA  66FE                    3595              bne *                   * Check Z Flag  beq/bne 0
000029FC  B258                    3596              cmp.w (a0)+ , d1            
000029FE  66FE                    3597              bne *                   * Check Z Flag  beq/bne 0
00002A00  B458                    3598              cmp.w (a0)+ , d2            
00002A02  66FE                    3599              bne *                   * Check Z Flag  beq/bne 0
00002A04  B658                    3600              cmp.w (a0)+ , d3            
00002A06  66FE                    3601              bne *                   * Check Z Flag  beq/bne 0
00002A08  B858                    3602              cmp.w (a0)+ , d4            
00002A0A  66FE                    3603              bne *                   * Check Z Flag  beq/bne 0
00002A0C  BA58                    3604              cmp.w (a0)+ , d5            
00002A0E  66FE                    3605              bne *                   * Check Z Flag  beq/bne 0
00002A10  BC58                    3606              cmp.w (a0)+ , d6            
00002A12  66FE                    3607              bne *                   * Check Z Flag  beq/bne 0
00002A14  BE58                    3608              cmp.w (a0)+ , d7            
00002A16  66FE                    3609              bne *                   * Check Z Flag  beq/bne 0
00002A18                          3610  
00002A18  0C58 0A0A               3611              cmp.w #$0A0A , (a0)+    * Because we are using a0 as a pointer
00002A1C  66FE                    3612              bne *                   * Check Z Flag  beq/bne 0
00002A1E                          3613   
00002A1E  B2D8                    3614              cmp.w (a0)+ , a1
00002A20  66FE                    3615              bne *                   * Check Z Flag  beq/bne 0
00002A22  B4D8                    3616              cmp.w (a0)+ , a2
00002A24  66FE                    3617              bne *                   * Check Z Flag  beq/bne 0
00002A26  B6D8                    3618              cmp.w (a0)+ , a3
00002A28  66FE                    3619              bne *                   * Check Z Flag  beq/bne 0
00002A2A  B8D8                    3620              cmp.w (a0)+ , a4
00002A2C  66FE                    3621              bne *                   * Check Z Flag  beq/bne 0
00002A2E  BAD8                    3622              cmp.w (a0)+ , a5
00002A30  66FE                    3623              bne *                   * Check Z Flag  beq/bne 0
00002A32  BCD8                    3624              cmp.w (a0)+ , a6
00002A34  66FE                    3625              bne *                   * Check Z Flag  beq/bne 0
00002A36                          3626            
00002A36                          3627  
00002A36                          3628  
00002A36                          3629  
00002A36                          3630      * LONG  Registers --> Memory
00002A36  203C D0D0D0D0           3631              move.l #$d0d0d0d0, d0
00002A3C  223C D1D1D1D1           3632              move.l #$d1d1d1d1, d1
00002A42  243C D2D2D2D2           3633              move.l #$d2d2d2d2, d2
00002A48  263C D3D3D3D3           3634              move.l #$d3d3d3d3, d3
00002A4E  283C D4D4D4D4           3635              move.l #$d4d4d4d4, d4
00002A54  2A3C D5D5D5D5           3636              move.l #$d5d5d5d5, d5
00002A5A  2C3C D6D6D6D6           3637              move.l #$d6d6d6d6, d6
00002A60  2E3C D7D7D7D7           3638              move.l #$d7d7d7d7, d7
00002A66  207C 0A0A0A0A           3639              move.l #$0a0a0a0a, a0
00002A6C  227C 1A1A1A1A           3640              move.l #$1a1a1a1a, a1
00002A72  247C 2A2A2A2A           3641              move.l #$2a2a2a2a, a2
00002A78  267C 3A3A3A3A           3642              move.l #$3a3a3a3a, a3
00002A7E  287C 4A4A4A4A           3643              move.l #$4a4a4a4a, a4
00002A84  2A7C 5A5A5A5A           3644              move.l #$5a5a5a5a, a5
00002A8A  2C7C 6A6A6A6A           3645              move.l #$6a6a6a6a, a6
00002A90                          3646             *move.l #$7a7a7a7a, a7  * Dont change the Stack Pointer
00002A90                          3647              
00002A90                          3648              
00002A90  48F8 FFFF 0120          3649              movem.l D0-D7/A0-A7 , $00000120  
00002A96                          3650              
00002A96  207C 00000120           3651              move.l #$00000120, a0
00002A9C                          3652              
00002A9C  B098                    3653              cmp.l (a0)+ , d0            
00002A9E  66FE                    3654              bne *                   * Check Z Flag  beq/bne 0
00002AA0  B298                    3655              cmp.l (a0)+ , d1            
00002AA2  66FE                    3656              bne *                   * Check Z Flag  beq/bne 0
00002AA4  B498                    3657              cmp.l (a0)+ , d2            
00002AA6  66FE                    3658              bne *                   * Check Z Flag  beq/bne 0
00002AA8  B698                    3659              cmp.l (a0)+ , d3            
00002AAA  66FE                    3660              bne *                   * Check Z Flag  beq/bne 0
00002AAC  B898                    3661              cmp.l (a0)+ , d4            
00002AAE  66FE                    3662              bne *                   * Check Z Flag  beq/bne 0
00002AB0  BA98                    3663              cmp.l (a0)+ , d5            
00002AB2  66FE                    3664              bne *                   * Check Z Flag  beq/bne 0
00002AB4  BC98                    3665              cmp.l (a0)+ , d6            
00002AB6  66FE                    3666              bne *                   * Check Z Flag  beq/bne 0
00002AB8  BE98                    3667              cmp.l (a0)+ , d7            
00002ABA  66FE                    3668              bne *                   * Check Z Flag  beq/bne 0
00002ABC                          3669  
00002ABC  0C98 0A0A0A0A           3670              cmp.l #$0A0A0A0A , (a0)+    * Because we are using a0 as a pointer
00002AC2  66FE                    3671              bne *                   * Check Z Flag  beq/bne 0
00002AC4                          3672   
00002AC4  B3D8                    3673              cmp.l (a0)+ , a1
00002AC6  66FE                    3674              bne *                   * Check Z Flag  beq/bne 0
00002AC8  B5D8                    3675              cmp.l (a0)+ , a2
00002ACA  66FE                    3676              bne *                   * Check Z Flag  beq/bne 0
00002ACC  B7D8                    3677              cmp.l (a0)+ , a3
00002ACE  66FE                    3678              bne *                   * Check Z Flag  beq/bne 0
00002AD0  B9D8                    3679              cmp.l (a0)+ , a4
00002AD2  66FE                    3680              bne *                   * Check Z Flag  beq/bne 0
00002AD4  BBD8                    3681              cmp.l (a0)+ , a5
00002AD6  66FE                    3682              bne *                   * Check Z Flag  beq/bne 0
00002AD8  BDD8                    3683              cmp.l (a0)+ , a6
00002ADA  66FE                    3684              bne *                   * Check Z Flag  beq/bne 0
00002ADC                          3685       * ----
00002ADC                          3686  
00002ADC                          3687  
00002ADC                          3688      * WORD  Registers --> Memory  -(An) EA Mode
00002ADC  203C 0000D0D0           3689              move.l #$0000d0d0, d0
00002AE2  223C 0000D1D1           3690              move.l #$0000d1d1, d1
00002AE8  243C 0000D2D2           3691              move.l #$0000d2d2, d2
00002AEE  263C 0000D3D3           3692              move.l #$0000d3d3, d3
00002AF4  283C 0000D4D4           3693              move.l #$0000d4d4, d4
00002AFA  2A3C 0000D5D5           3694              move.l #$0000d5d5, d5
00002B00  2C3C 0000D6D6           3695              move.l #$0000d6d6, d6
00002B06  2E3C 0000D7D7           3696              move.l #$0000d7d7, d7
00002B0C  207C 00000A0A           3697              move.l #$00000a0a, a0
00002B12  227C 00001A1A           3698              move.l #$00001a1a, a1
00002B18  247C 00002A2A           3699              move.l #$00002a2a, a2
00002B1E  267C 00003A3A           3700              move.l #$00003a3a, a3
00002B24  287C 00004A4A           3701              move.l #$00004a4a, a4
00002B2A  2A7C 00005A5A           3702              move.l #$00005a5a, a5
00002B30  2C7C 00006A6A           3703              move.l #$00006a6a, a6
00002B36                          3704             *move.l #$00007a7a, a7  * Dont change the Stack Pointer
00002B36                          3705             
00002B36  207C 000001A0           3706              move.l #$000001A0, a0
00002B3C  48A0 FFFF               3707              movem.w D0-D7/A0-A7 , -(a0)  
00002B40                          3708              
00002B40  207C 0000019E           3709              move.l #$0000019E, a0
00002B46                          3710              
00002B46  BCE0                    3711              cmp.w -(a0) , a6            
00002B48  66FE                    3712              bne *                   * Check Z Flag  beq/bne 0
00002B4A  BAE0                    3713              cmp.w -(a0) , a5            
00002B4C  66FE                    3714              bne *                   * Check Z Flag  beq/bne 0
00002B4E  B8E0                    3715              cmp.w -(a0) , a4            
00002B50  66FE                    3716              bne *                   * Check Z Flag  beq/bne 0
00002B52  B6E0                    3717              cmp.w -(a0) , a3            
00002B54  66FE                    3718              bne *                   * Check Z Flag  beq/bne 0
00002B56  B4E0                    3719              cmp.w -(a0) , a2            
00002B58  66FE                    3720              bne *                   * Check Z Flag  beq/bne 0
00002B5A  B2E0                    3721              cmp.w -(a0) , a1            
00002B5C  66FE                    3722              bne *                   * Check Z Flag  beq/bne 0
00002B5E  B0E0                    3723              cmp.w -(a0) , a0            
00002B60                          3724             * bne *                   * Check Z Flag  beq/bne 0
00002B60  BE60                    3725              cmp.w -(a0) , d7            
00002B62  66FE                    3726              bne *                   * Check Z Flag  beq/bne 0
00002B64  BC60                    3727              cmp.w -(a0) , d6
00002B66  66FE                    3728              bne *                   * Check Z Flag  beq/bne 0
00002B68  BA60                    3729              cmp.w -(a0) , d5
00002B6A  66FE                    3730              bne *                   * Check Z Flag  beq/bne 0
00002B6C  B860                    3731              cmp.w -(a0) , d4
00002B6E  66FE                    3732              bne *                   * Check Z Flag  beq/bne 0
00002B70  B660                    3733              cmp.w -(a0) , d3
00002B72  66FE                    3734              bne *                   * Check Z Flag  beq/bne 0
00002B74  B460                    3735              cmp.w -(a0) , d2
00002B76  66FE                    3736              bne *                   * Check Z Flag  beq/bne 0
00002B78  B260                    3737              cmp.w -(a0) , d1
00002B7A  66FE                    3738              bne *                   * Check Z Flag  beq/bne 0
00002B7C  B060                    3739              cmp.w -(a0) , d0
00002B7E  66FE                    3740              bne *                   * Check Z Flag  beq/bne 0
00002B80                          3741            
00002B80                          3742  
00002B80                          3743  
00002B80                          3744  
00002B80                          3745      * LONG  Registers --> Memory   -(An) EA Mode
00002B80  203C D0D0D0D0           3746              move.l #$d0d0d0d0, d0
00002B86  223C D1D1D1D1           3747              move.l #$d1d1d1d1, d1
00002B8C  243C D2D2D2D2           3748              move.l #$d2d2d2d2, d2
00002B92  263C D3D3D3D3           3749              move.l #$d3d3d3d3, d3
00002B98  283C D4D4D4D4           3750              move.l #$d4d4d4d4, d4
00002B9E  2A3C D5D5D5D5           3751              move.l #$d5d5d5d5, d5
00002BA4  2C3C D6D6D6D6           3752              move.l #$d6d6d6d6, d6
00002BAA  2E3C D7D7D7D7           3753              move.l #$d7d7d7d7, d7
00002BB0  207C 0A0A0A0A           3754              move.l #$0a0a0a0a, a0
00002BB6  227C 1A1A1A1A           3755              move.l #$1a1a1a1a, a1
00002BBC  247C 2A2A2A2A           3756              move.l #$2a2a2a2a, a2
00002BC2  267C 3A3A3A3A           3757              move.l #$3a3a3a3a, a3
00002BC8  287C 4A4A4A4A           3758              move.l #$4a4a4a4a, a4
00002BCE  2A7C 5A5A5A5A           3759              move.l #$5a5a5a5a, a5
00002BD4  2C7C 6A6A6A6A           3760              move.l #$6a6a6a6a, a6
00002BDA                          3761             *move.l #$7a7a7a7a, a7  * Dont change the Stack Pointer
00002BDA                          3762              
00002BDA                          3763           
00002BDA  207C 000001A0           3764              move.l #$000001A0, a0
00002BE0  48E0 FFFF               3765              movem.l D0-D7/A0-A7 , -(a0)  
00002BE4                          3766              
00002BE4  207C 0000019C           3767              move.l #$0000019C, a0
00002BEA                          3768              
00002BEA  BDE0                    3769              cmp.l -(a0) , a6            
00002BEC  66FE                    3770              bne *                   * Check Z Flag  beq/bne 0
00002BEE  BBE0                    3771              cmp.l -(a0) , a5            
00002BF0  66FE                    3772              bne *                   * Check Z Flag  beq/bne 0
00002BF2  B9E0                    3773              cmp.l -(a0) , a4            
00002BF4  66FE                    3774              bne *                   * Check Z Flag  beq/bne 0
00002BF6  B7E0                    3775              cmp.l -(a0) , a3            
00002BF8  66FE                    3776              bne *                   * Check Z Flag  beq/bne 0
00002BFA  B5E0                    3777              cmp.l -(a0) , a2            
00002BFC  66FE                    3778              bne *                   * Check Z Flag  beq/bne 0
00002BFE  B3E0                    3779              cmp.l -(a0) , a1            
00002C00  66FE                    3780              bne *                   * Check Z Flag  beq/bne 0
00002C02  B1E0                    3781              cmp.l -(a0) , a0            
00002C04                          3782             * bne *                   * Check Z Flag  beq/bne 0
00002C04  BEA0                    3783              cmp.l -(a0) , d7            
00002C06  66FE                    3784              bne *                   * Check Z Flag  beq/bne 0
00002C08  BCA0                    3785              cmp.l -(a0) , d6
00002C0A  66FE                    3786              bne *                   * Check Z Flag  beq/bne 0
00002C0C  BAA0                    3787              cmp.l -(a0) , d5
00002C0E  66FE                    3788              bne *                   * Check Z Flag  beq/bne 0
00002C10  B8A0                    3789              cmp.l -(a0) , d4
00002C12  66FE                    3790              bne *                   * Check Z Flag  beq/bne 0
00002C14  B6A0                    3791              cmp.l -(a0) , d3
00002C16  66FE                    3792              bne *                   * Check Z Flag  beq/bne 0
00002C18  B4A0                    3793              cmp.l -(a0) , d2
00002C1A  66FE                    3794              bne *                   * Check Z Flag  beq/bne 0
00002C1C  B2A0                    3795              cmp.l -(a0) , d1
00002C1E  66FE                    3796              bne *                   * Check Z Flag  beq/bne 0
00002C20  B0A0                    3797              cmp.l -(a0) , d0
00002C22  66FE                    3798              bne *                   * Check Z Flag  beq/bne 0
00002C24                          3799            
00002C24                          3800  
00002C24                          3801  
00002C24                          3802       *----     
00002C24                          3803            
00002C24                          3804      * WORD - Memory --> Registers
00002C24  7000                    3805              move.l #$00000000, d0
00002C26  7200                    3806              move.l #$00000000, d1
00002C28  7400                    3807              move.l #$00000000, d2
00002C2A  7600                    3808              move.l #$00000000, d3
00002C2C  7800                    3809              move.l #$00000000, d4
00002C2E  7A00                    3810              move.l #$00000000, d5
00002C30  7C00                    3811              move.l #$00000000, d6
00002C32  7E00                    3812              move.l #$00000000, d7
00002C34  207C 00000000           3813              move.l #$00000000, a0
00002C3A  227C 00000000           3814              move.l #$00000000, a1
00002C40  247C 00000000           3815              move.l #$00000000, a2
00002C46  267C 00000000           3816              move.l #$00000000, a3
00002C4C  287C 00000000           3817              move.l #$00000000, a4
00002C52  2A7C 00000000           3818              move.l #$00000000, a5
00002C58  2C7C 00000000           3819              move.l #$00000000, a6
00002C5E                          3820             *move.l #$00000000, a7  * Dont change the Stack Pointer
00002C5E                          3821              
00002C5E  4CB8 2A55 0100          3822              movem.w $00000100 , D0/D2/D4/D6/A1/A3/A5   
00002C64                          3823              
00002C64  B0BC FFFFD0D0           3824              cmp.l #$FFFFD0D0 , d0           
00002C6A  66FE                    3825              bne *                   * Check Z Flag  beq/bne 0
00002C6C  B4BC FFFFD1D1           3826              cmp.l #$FFFFD1D1 , d2           
00002C72  66FE                    3827              bne *                  * Check Z Flag  beq/bne 0
00002C74  B8BC FFFFD2D2           3828              cmp.l #$FFFFD2D2 , d4           
00002C7A  66FE                    3829              bne *                   * Check Z Flag  beq/bne 0
00002C7C  BCBC FFFFD3D3           3830              cmp.l #$FFFFD3D3 , d6           
00002C82  66FE                    3831              bne *                   * Check Z Flag  beq/bne 0
00002C84  B3FC FFFFD4D4           3832              cmp.l #$FFFFD4D4 , a1           
00002C8A  66FE                    3833              bne *                   * Check Z Flag  beq/bne 0
00002C8C  B7FC FFFFD5D5           3834              cmp.l #$FFFFD5D5 , a3           
00002C92  66FE                    3835              bne *                   * Check Z Flag  beq/bne 0
00002C94  BBFC FFFFD6D6           3836              cmp.l #$FFFFD6D6 , a5           
00002C9A  66FE                    3837              bne *                   * Check Z Flag  beq/bne 0
00002C9C                          3838              
00002C9C                          3839   
00002C9C                          3840      * LONG - Memory --> Registers
00002C9C  7000                    3841              move.l #$00000000, d0
00002C9E  7200                    3842              move.l #$00000000, d1
00002CA0  7400                    3843              move.l #$00000000, d2
00002CA2  7600                    3844              move.l #$00000000, d3
00002CA4  7800                    3845              move.l #$00000000, d4
00002CA6  7A00                    3846              move.l #$00000000, d5
00002CA8  7C00                    3847              move.l #$00000000, d6
00002CAA  7E00                    3848              move.l #$00000000, d7
00002CAC  207C 00000000           3849              move.l #$00000000, a0
00002CB2  227C 00000000           3850              move.l #$00000000, a1
00002CB8  247C 00000000           3851              move.l #$00000000, a2
00002CBE  267C 00000000           3852              move.l #$00000000, a3
00002CC4  287C 00000000           3853              move.l #$00000000, a4
00002CCA  2A7C 00000000           3854              move.l #$00000000, a5
00002CD0  2C7C 00000000           3855              move.l #$00000000, a6
00002CD6                          3856             *move.l #$00000000, a7  * Dont change the Stack Pointer
00002CD6                          3857              
00002CD6  4CF8 2A55 0120          3858              movem.l $00000120 , D0/D2/D4/D6/A1/A3/A5   
00002CDC                          3859              
00002CDC  B0BC D0D0D0D0           3860              cmp.l #$D0D0D0D0 , d0           
00002CE2  66FE                    3861              bne *                   * Check Z Flag  beq/bne 0
00002CE4  B4BC D1D1D1D1           3862              cmp.l #$D1D1D1D1 , d2           
00002CEA  66FE                    3863              bne *                  * Check Z Flag  beq/bne 0
00002CEC  B8BC D2D2D2D2           3864              cmp.l #$D2D2D2D2 , d4           
00002CF2  66FE                    3865              bne *                   * Check Z Flag  beq/bne 0
00002CF4  BCBC D3D3D3D3           3866              cmp.l #$D3D3D3D3 , d6           
00002CFA  66FE                    3867              bne *                   * Check Z Flag  beq/bne 0
00002CFC  B3FC D4D4D4D4           3868              cmp.l #$D4D4D4D4 , a1           
00002D02  66FE                    3869              bne *                   * Check Z Flag  beq/bne 0
00002D04  B7FC D5D5D5D5           3870              cmp.l #$D5D5D5D5 , a3           
00002D0A  66FE                    3871              bne *                   * Check Z Flag  beq/bne 0
00002D0C  BBFC D6D6D6D6           3872              cmp.l #$D6D6D6D6 , a5           
00002D12  66FE                    3873              bne *                   * Check Z Flag  beq/bne 0
00002D14                          3874              
00002D14  4E75                    3875              rts     
00002D16                          3876  
00002D16                          3877                            
00002D16                          3878  *-----------------------------------------------------------
00002D16                          3879  *-----------------------------------------------------------
00002D16                          3880  * OPCODE : ABCD
00002D16                          3881  *-----------------------------------------------------------
00002D16                          3882  *-----------------------------------------------------------
00002D16                          3883  op_ABCD: 
00002D16                          3884      
00002D16                          3885      * Test with X Flag CLEARED
00002D16  207C 00000110           3886                  move.l #$00000110, a0 * Address pointer-X
00002D1C  227C 00000120           3887                  move.l #$00000120, a1 * Address pointer-Y
00002D22  7000                    3888                  move.l #$00000000, d0 * BCD byte-X
00002D24  7200                    3889                  move.l #$00000000, d1 * BCD byte-Y
00002D26  7400                    3890                  move.l #$00000000, d2
00002D28  7600                    3891                  move.l #$00000000, d3 * Cumulative -(An) BCD results
00002D2A  7800                    3892                  move.l #$00000000, d4 * Cumulative number of times C was set
00002D2C  7A00                    3893                  move.l #$00000000, d5 * Cumulative Register BCD results
00002D2E  2C3C 00000099           3894                  move.l #$00000099, d6 * Inner loop counter
00002D34  2E3C 00000099           3895                  move.l #$00000099, d7 * Outer loop counter
00002D3A                          3896  
00002D3A  2007                    3897  ABCD_OUTER1:    move.l d7 , d0
00002D3C  2206                    3898  ABCD_INNER1:    move.l d6 , d1
00002D3E  023C 00EF               3899                  andi.b #$EF , CCR     * Clear X Flag
00002D42  207C 00000110           3900                  move.l #$00000110, a0 * Address pointer-X
00002D48  227C 00000120           3901                  move.l #$00000120, a1 * Address pointer-Y
00002D4E  1140 FFFF               3902                  move.b d0 , -1(a0)
00002D52  1341 FFFF               3903                  move.b d1 , -1(a1)
00002D56                          3904                  
00002D56  C300                    3905                  abcd d0 , d1
00002D58  6400 0004               3906                  bcc ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00002D5C  5284                    3907                  add.l #1 , d4
00002D5E  DA81                    3908  ABCD_NO_C1:     add.l d1 , d5
00002D60                          3909                  
00002D60  C308                    3910                  abcd -(a0) , -(a1)
00002D62  6400 0004               3911                  bcc ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00002D66  5284                    3912                  add.l #1 , d4
00002D68  D611                    3913  ABCD_NO_C2:     add.b (a1) , d3
00002D6A                          3914  
00002D6A                          3915  
00002D6A  51CE FFD0               3916                  dbf d6 , ABCD_INNER1
00002D6E  2C3C 00000099           3917                  move.l #$00000099, d6
00002D74  51CF FFC4               3918                  dbf d7 , ABCD_OUTER1
00002D78  0C84 00005AFC           3919                  cmpi.l #$00005AFC , d4  * Check the cumulative results
00002D7E  66FE                    3920                  bne *                 
00002D80  0C85 001C9A34           3921                  cmpi.l #$001C9A34 , d5
00002D86  66FE                    3922                  bne *                
00002D88  0C83 00000034           3923                  cmpi.l #$00000034 , d3
00002D8E  66FE                    3924                  bne *                
00002D90                          3925  
00002D90                          3926      * Test with X Flag SET
00002D90  207C 00000110           3927                  move.l #$00000110, a0 * Address pointer-X
00002D96  227C 00000120           3928                  move.l #$00000120, a1 * Address pointer-Y
00002D9C  7000                    3929                  move.l #$00000000, d0 * BCD byte-X
00002D9E  7200                    3930                  move.l #$00000000, d1 * BCD byte-Y
00002DA0  7400                    3931                  move.l #$00000000, d2
00002DA2  7600                    3932                  move.l #$00000000, d3 * Cumulative -(An) BCD results
00002DA4  7800                    3933                  move.l #$00000000, d4 * Cumulative number of times C was set
00002DA6  7A00                    3934                  move.l #$00000000, d5 * Cumulative Register BCD results
00002DA8  2C3C 00000099           3935                  move.l #$00000099, d6 * Inner loop counter
00002DAE  2E3C 00000099           3936                  move.l #$00000099, d7 * Outer loop counter
00002DB4                          3937  
00002DB4  2007                    3938  ABCD_OUTER2:    move.l d7 , d0
00002DB6  2206                    3939  ABCD_INNER2:    move.l d6 , d1
00002DB8  003C 0010               3940                  ori.b #$10 , CCR      * Set X Flag
00002DBC  207C 00000110           3941                  move.l #$00000110, a0 * Address pointer-X
00002DC2  227C 00000120           3942                  move.l #$00000120, a1 * Address pointer-Y
00002DC8  1140 FFFF               3943                  move.b d0 , -1(a0)
00002DCC  1341 FFFF               3944                  move.b d1 , -1(a1)
00002DD0                          3945                  
00002DD0  C300                    3946                  abcd d0 , d1
00002DD2  6400 0004               3947                  bcc ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00002DD6  5284                    3948                  add.l #1 , d4
00002DD8  DA81                    3949  ABCD_NO_C3:     add.l d1 , d5
00002DDA                          3950                  
00002DDA  C308                    3951                  abcd -(a0) , -(a1)
00002DDC  6400 0004               3952                  bcc ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00002DE0  5284                    3953                  add.l #1 , d4
00002DE2  D611                    3954  ABCD_NO_C4:     add.b (a1) , d3
00002DE4                          3955  
00002DE4                          3956  
00002DE4  51CE FFD0               3957                  dbf d6 , ABCD_INNER2
00002DE8  2C3C 00000099           3958                  move.l #$00000099, d6
00002DEE  51CF FFC4               3959                  dbf d7 , ABCD_OUTER2
00002DF2  0C84 00005B60           3960                  cmpi.l #$00005B60 , d4  * Check the cumulative results
00002DF8  66FE                    3961                  bne *                 
00002DFA  0C85 001CCFC8           3962                  cmpi.l #$001CCFC8 , d5
00002E00  66FE                    3963                  bne *                
00002E02  0C83 00000034           3964                  cmpi.l #$00000034 , d3
00002E08  66FE                    3965                  bne *                
00002E0A                          3966  
00002E0A                          3967              * Quick check of Z Flag
00002E0A  103C 0000               3968                  move.b #$00, d0 
00002E0E  123C 0000               3969                  move.b #$00, d1 
00002E12  44FC 0000               3970                  move #$00, CCR              * Set Z flag to 0
00002E16  C101                    3971                  abcd d1,d0                  * Should NOT set Z Flag to 1
00002E18  67FE                    3972                  beq *                       * Check Z Flag  beq/bne
00002E1A                          3973                  
00002E1A  103C 0001               3974                  move.b #$01, d0 
00002E1E  123C 0000               3975                  move.b #$00, d1 
00002E22  44FC 0004               3976                  move #$04, CCR              * Set Z flag to 0
00002E26  C101                    3977                  abcd d1,d0                  * Should NOT set Z Flag to 1
00002E28  67FE                    3978                  beq *                       * Check Z Flag  beq/bne
00002E2A                          3979                  
00002E2A  4E75                    3980                  rts   
00002E2C                          3981                            
00002E2C                          3982  *-----------------------------------------------------------
00002E2C                          3983  *-----------------------------------------------------------
00002E2C                          3984  * OPCODE : SBCD
00002E2C                          3985  *-----------------------------------------------------------
00002E2C                          3986  *-----------------------------------------------------------
00002E2C                          3987  op_SBCD: 
00002E2C                          3988  
00002E2C                          3989      * Test with X Flag CLEARED
00002E2C  207C 00000110           3990                  move.l #$00000110, a0 * Address pointer-X
00002E32  227C 00000120           3991                  move.l #$00000120, a1 * Address pointer-Y
00002E38  7000                    3992                  move.l #$00000000, d0 * BCD byte-X
00002E3A  7200                    3993                  move.l #$00000000, d1 * BCD byte-Y
00002E3C  7400                    3994                  move.l #$00000000, d2
00002E3E  7600                    3995                  move.l #$00000000, d3 * Cumulative -(An) BCD results
00002E40  7800                    3996                  move.l #$00000000, d4 * Cumulative number of times C was set
00002E42  7A00                    3997                  move.l #$00000000, d5 * Cumulative Register BCD results
00002E44  2C3C 00000099           3998                  move.l #$00000099, d6 * Inner loop counter
00002E4A  2E3C 00000099           3999                  move.l #$00000099, d7 * Outer loop counter
00002E50                          4000  
00002E50  2007                    4001  SBCD_OUTER1:    move.l d7 , d0
00002E52  2206                    4002  SBCD_INNER1:    move.l d6 , d1
00002E54  023C 00EF               4003                  andi.b #$EF , CCR     * Clear X Flag
00002E58  207C 00000110           4004                  move.l #$00000110, a0 * Address pointer-X
00002E5E  227C 00000120           4005                  move.l #$00000120, a1 * Address pointer-Y
00002E64  1140 FFFF               4006                  move.b d0 , -1(a0)
00002E68  1341 FFFF               4007                  move.b d1 , -1(a1)
00002E6C                          4008                  
00002E6C  8300                    4009                  sbcd d0 , d1
00002E6E  6400 0004               4010                  bcc SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00002E72  5284                    4011                  add.l #1 , d4
00002E74  DA81                    4012  SBCD_NO_C1:     add.l d1 , d5
00002E76                          4013                  
00002E76  8308                    4014                  sbcd -(a0) , -(a1)
00002E78  6400 0004               4015                  bcc SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00002E7C  5284                    4016                  add.l #1 , d4
00002E7E  D611                    4017  SBCD_NO_C2:     add.b (a1) , d3
00002E80                          4018  
00002E80                          4019  
00002E80  51CE FFD0               4020                  dbf d6 , SBCD_INNER1
00002E84  2C3C 00000099           4021                  move.l #$00000099, d6
00002E8A  51CF FFC4               4022                  dbf d7 , SBCD_OUTER1
00002E8E  0C84 00005C0A           4023                  cmpi.l #$00005C0A , d4  * Check the cumulative results
00002E94  66FE                    4024                  bne *                 
00002E96  0C85 001C459E           4025                  cmpi.l #$001C459E , d5
00002E9C  66FE                    4026                  bne *                
00002E9E  0C83 0000009E           4027                  cmpi.l #$0000009E , d3
00002EA4  66FE                    4028                  bne *                
00002EA6                          4029  
00002EA6                          4030      * Test with X Flag SET
00002EA6  207C 00000110           4031                  move.l #$00000110, a0 * Address pointer-X
00002EAC  227C 00000120           4032                  move.l #$00000120, a1 * Address pointer-Y
00002EB2  7000                    4033                  move.l #$00000000, d0 * BCD byte-X
00002EB4  7200                    4034                  move.l #$00000000, d1 * BCD byte-Y
00002EB6  7400                    4035                  move.l #$00000000, d2
00002EB8  7600                    4036                  move.l #$00000000, d3 * Cumulative -(An) BCD results
00002EBA  7800                    4037                  move.l #$00000000, d4 * Cumulative number of times C was set
00002EBC  7A00                    4038                  move.l #$00000000, d5 * Cumulative Register BCD results
00002EBE  2C3C 00000099           4039                  move.l #$00000099, d6 * Inner loop counter
00002EC4  2E3C 00000099           4040                  move.l #$00000099, d7 * Outer loop counter
00002ECA                          4041  
00002ECA  2007                    4042  SBCD_OUTER2:    move.l d7 , d0
00002ECC  2206                    4043  SBCD_INNER2:    move.l d6 , d1
00002ECE  003C 0010               4044                  ori.b #$10 , CCR      * Set X Flag
00002ED2  207C 00000110           4045                  move.l #$00000110, a0 * Address pointer-X
00002ED8  227C 00000120           4046                  move.l #$00000120, a1 * Address pointer-Y
00002EDE  1140 FFFF               4047                  move.b d0 , -1(a0)
00002EE2  1341 FFFF               4048                  move.b d1 , -1(a1)
00002EE6                          4049                  
00002EE6  8300                    4050                  sbcd d0 , d1
00002EE8  6400 0004               4051                  bcc SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00002EEC  5284                    4052                  add.l #1 , d4
00002EEE  DA81                    4053  SBCD_NO_C3:     add.l d1 , d5
00002EF0                          4054                  
00002EF0  8308                    4055                  sbcd -(a0) , -(a1)
00002EF2  6400 0004               4056                  bcc SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00002EF6  5284                    4057                  add.l #1 , d4
00002EF8  D611                    4058  SBCD_NO_C4:     add.b (a1) , d3
00002EFA                          4059  
00002EFA  51CE FFD0               4060                  dbf d6 , SBCD_INNER2
00002EFE  2C3C 00000099           4061                  move.l #$00000099, d6
00002F04  51CF FFC4               4062                  dbf d7 , SBCD_OUTER2
00002F08  0C84 00005CA4           4063                  cmpi.l #$00005CA4 , d4  * Check the cumulative results
00002F0E  66FE                    4064                  bne *                 
00002F10  0C85 001C5C66           4065                  cmpi.l #$001C5C66 , d5
00002F16  66FE                    4066                  bne *                
00002F18  0C83 0000009E           4067                  cmpi.l #$0000009E , d3
00002F1E  66FE                    4068                  bne *                
00002F20                          4069  
00002F20                          4070  
00002F20                          4071              * Quick check of Z Flag
00002F20  103C 0000               4072                  move.b #$00, d0 
00002F24  123C 0000               4073                  move.b #$00, d1 
00002F28  44FC 0000               4074                  move #$00, CCR              * Set Z flag to 0
00002F2C  8101                    4075                  sbcd d1,d0                  * Should NOT set Z Flag to 1
00002F2E  67FE                    4076                  beq *                       * Check Z Flag  beq/bne
00002F30                          4077  
00002F30  103C 0001               4078                  move.b #$01, d0 
00002F34  123C 0000               4079                  move.b #$00, d1 
00002F38  44FC 0004               4080                  move #$04, CCR              * Set Z flag to 0
00002F3C  8101                    4081                  sbcd d1,d0                  * Should NOT set Z Flag to 1
00002F3E  67FE                    4082                  beq *                       * Check Z Flag  beq/bne
00002F40                          4083  
00002F40  4E75                    4084                  rts   
00002F42                          4085                 
00002F42                          4086  *-----------------------------------------------------------
00002F42                          4087  *-----------------------------------------------------------
00002F42                          4088  * OPCODE : NBCD
00002F42                          4089  *-----------------------------------------------------------
00002F42                          4090  *-----------------------------------------------------------
00002F42                          4091  op_NBCD: 
00002F42                          4092      
00002F42                          4093         * NBCD to a  Register
00002F42                          4094         
00002F42  7000                    4095                  move.l #$00000000, d0 * BCD byte
00002F44  7200                    4096                  move.l #$00000000, d1 
00002F46  7400                    4097                  move.l #$00000000, d2
00002F48  7600                    4098                  move.l #$00000000, d3 * Cumulative number of times Z was set
00002F4A  7800                    4099                  move.l #$00000000, d4 * Cumulative number of times C was set
00002F4C  7A00                    4100                  move.l #$00000000, d5 * Cumulative BCD results
00002F4E  2C3C 00000099           4101                  move.l #$00000099, d6
00002F54  2E3C 00000099           4102                  move.l #$00000099, d7 * Loop counter
00002F5A                          4103  
00002F5A  2007                    4104  NBCD_LOOP:      move.l d7 , d0
00002F5C  44FC 0004               4105                  move #$04, CCR        * Set Z flag to 0
00002F60                          4106  
00002F60  4800                    4107                  nbcd d0
00002F62                          4108                  
00002F62  6400 0004               4109                  bcc NBCD_NO_C         * Check C Flag 
00002F66  5284                    4110                  add.l #1 , d4
00002F68  6600 0004               4111  NBCD_NO_C:      bne NBCD_NO_Z         * Check Z Flag 
00002F6C  5283                    4112                  add.l #1 , d3
00002F6E  DA80                    4113  NBCD_NO_Z:      add.l d0 , d5         * Add results into d5
00002F70                          4114  
00002F70  51CF FFE8               4115                  dbf d7 , NBCD_LOOP
00002F74                          4116                  
00002F74  0C83 00000001           4117                  cmpi.l #$00000001 , d3  * Check the cumulative results
00002F7A  66FE                    4118                  bne *                 
00002F7C  0C84 00000099           4119                  cmpi.l #$00000099 , d4
00002F82  66FE                    4120                  bne *                
00002F84  0C85 00002E3B           4121                  cmpi.l #$00002E3B , d5
00002F8A  66FE                    4122                  bne *     
00002F8C                          4123             
00002F8C                          4124  
00002F8C                          4125         * NBCD to a memory location
00002F8C                          4126         
00002F8C  7000                    4127                  move.l #$00000000, d0 * BCD byte
00002F8E  7200                    4128                  move.l #$00000000, d1 
00002F90  7400                    4129                  move.l #$00000000, d2
00002F92  7600                    4130                  move.l #$00000000, d3 * Cumulative number of times Z was set
00002F94  7800                    4131                  move.l #$00000000, d4 * Cumulative number of times C was set
00002F96  7A00                    4132                  move.l #$00000000, d5 * Cumulative BCD results
00002F98  2C3C 00000099           4133                  move.l #$00000099, d6
00002F9E  2E3C 00000099           4134                  move.l #$00000099, d7 * Loop counter
00002FA4                          4135  
00002FA4  11C7 0100               4136  NBCD_LOOP1:     move.b d7 , $00000100
00002FA8  44FC 0004               4137                  move #$04, CCR        * Set Z flag to 0
00002FAC                          4138  
00002FAC  4838 0100               4139                  nbcd $00000100
00002FB0  1038 0100               4140                  move.b $00000100 , d0
00002FB4                          4141                  
00002FB4  6400 0004               4142                  bcc NBCD_NO_C1        * Check C Flag 
00002FB8  5284                    4143                  add.l #1 , d4
00002FBA  6600 0004               4144  NBCD_NO_C1:     bne NBCD_NO_Z1        * Check Z Flag 
00002FBE  5283                    4145                  add.l #1 , d3
00002FC0  DA80                    4146  NBCD_NO_Z1:     add.l d0 , d5         * Add results into d5
00002FC2                          4147  
00002FC2  51CF FFE0               4148                  dbf d7 , NBCD_LOOP1
00002FC6                          4149                  
00002FC6  0C83 00000001           4150                  cmpi.l #$00000001 , d3  * Check the cumulative results
00002FCC  66FE                    4151                  bne *                 
00002FCE  0C84 00000000           4152                  cmpi.l #$00000000 , d4
00002FD4  66FE                    4153                  bne *                
00002FD6  0C85 00002E3B           4154                  cmpi.l #$00002E3B , d5
00002FDC  66FE                    4155                  bne *     
00002FDE                          4156             
00002FDE                          4157  
00002FDE  4E75                    4158                  rts   
00002FE0                          4159  
00002FE0                          4160  
00002FE0                          4161                 
00002FE0                          4162  *-----------------------------------------------------------
00002FE0                          4163  *-----------------------------------------------------------
00002FE0                          4164  * OPCODE : TRAPV
00002FE0                          4165  *-----------------------------------------------------------
00002FE0                          4166  *-----------------------------------------------------------
00002FE0                          4167  op_TRAPV: 
00002FE0                          4168  
00002FE0                          4169      * TRAPV will set d0 to 12345678 if V flag is set
00002FE0                          4170      
00002FE0  7000                    4171                  move.l #$00000000, d0 * Clear d0
00002FE2                          4172                  
00002FE2  44FC 0000               4173                  move #$00, CCR        * Clear V flag
00002FE6  4E76                    4174                  trapv
00002FE8  0C80 00000000           4175                  cmpi.l #$00000000 , d0  * Check of d0 was updated (should not be_)
00002FEE  66FE                    4176                  bne *       
00002FF0                          4177  
00002FF0                          4178                 * Easy658K does not use exception vectors
00002FF0                          4179                 * move #$02, CCR        * Set V flag
00002FF0                          4180                 * trapv
00002FF0                          4181                 * cmpi.l #$12345678 , d0  * Check of d0 was updated (should not be_)
00002FF0                          4182                 * bne *       
00002FF0                          4183  
00002FF0                          4184  
00002FF0  4E75                    4185                  rts   
00002FF2                          4186  
00002FF2                          4187  
00002FF2                          4188                 
00002FF2                          4189  *-----------------------------------------------------------
00002FF2                          4190  *-----------------------------------------------------------
00002FF2                          4191  * OPCODE : RTR
00002FF2                          4192  *-----------------------------------------------------------
00002FF2                          4193  *-----------------------------------------------------------
00002FF2                          4194  
00002FF2                          4195  op_RTR: 
00002FF2                          4196  
00002FF2                          4197      * Leventhal claims only 5 LSB's are popped from the stack to the CCR
00002FF2                          4198      
00002FF2  41F9 00003000           4199                  lea RTR_DONE , a0
00002FF8  2F08                    4200                  move.l a0, -(a7)     * push destination PC to the stack
00002FFA  3F3C FF15               4201                  move.w #$FF15 , -(a7)       * push flags=0xFFFF to the stack
00002FFE  4E77                    4202                  rtr
00003000                          4203  
00003000  40C0                    4204  RTR_DONE:       move SR , d0
00003002  0240 001F               4205                  andi #$1F , d0
00003006  0C40 0015               4206                  cmpi #$15 , d0
0000300A  66FE                    4207                  bne *
0000300C                          4208                  
0000300C  4E75                    4209                  rts   
0000300E                          4210  
0000300E                          4211     
0000300E  283C 44444444           4212  BSR_FAR2:       move.l #$44444444 , d4
00003014  4E75                    4213                  rts
00003016                          4214  
00003016                          4215                 
00003016                          4216  *-----------------------------------------------------------
00003016                          4217  *-----------------------------------------------------------
00003016                          4218  * OPCODE : BCC
00003016                          4219  *-----------------------------------------------------------
00003016                          4220  *-----------------------------------------------------------
00003016                          4221  
00003016  44FC 0000               4222  op_BCC:         move #$00 , CCR
0000301A  6202                    4223                  bhi.s BCC1            * Higher Than         C=0 AND Z=0
0000301C  60FE                    4224                  bra *
0000301E                          4225                  
0000301E  44FC 0001               4226  BCC1:           move #$01 , CCR
00003022  6300 0004               4227                  bls.w BCC2            * Lower or Same       C=1 OR Z=1
00003026  60FE                    4228                  bra *
00003028                          4229                   
00003028  44FC 0000               4230  BCC2:           move #$00 , CCR
0000302C  6402                    4231                  bcc.s BCC3            * Carry Clear         C=0
0000302E  60FE                    4232                  bra *
00003030                          4233                     
00003030  44FC 0001               4234  BCC3:           move #$01 , CCR
00003034  6500 0004               4235                  bcs.w BCC4            * Carry Set           C=1
00003038  60FE                    4236                  bra *
0000303A                          4237                     
0000303A  44FC 0000               4238  BCC4:           move #$00 , CCR
0000303E  6602                    4239                  bne.s BCC5            * Not Equal           Z=0
00003040  60FE                    4240                  bra *
00003042                          4241                       
00003042  44FC 0004               4242  BCC5:           move #$04 , CCR
00003046  6700 0004               4243                  beq.w BCC6            * Equal               Z=1
0000304A  60FE                    4244                  bra *
0000304C                          4245                         
0000304C  44FC 0000               4246  BCC6:           move #$00 , CCR
00003050  6802                    4247                  bvc.s BCC7            * V Clear             V=0
00003052  60FE                    4248                  bra *
00003054                          4249                           
00003054  44FC 0002               4250  BCC7:           move #$02 , CCR
00003058  6900 0004               4251                  bvs.w BCC8            * V Set               V=1
0000305C  60FE                    4252                  bra *
0000305E                          4253                            
0000305E  44FC 0000               4254  BCC8:           move #$00 , CCR
00003062  6A02                    4255                  bpl.s BCC9            * Plus                N=0
00003064  60FE                    4256                  bra *
00003066                          4257                             
00003066  44FC 0008               4258  BCC9:           move #$08 , CCR
0000306A  6B00 0004               4259                  bmi.w BCC10           * Minus               N=1
0000306E  60FE                    4260                  bra *
00003070                          4261                              
00003070  44FC 0000               4262  BCC10:          move #$00 , CCR
00003074  6C02                    4263                  bge.s BCC11           * Greater or Equal    N=V
00003076  60FE                    4264                  bra *
00003078                          4265                               
00003078  44FC 0002               4266  BCC11:          move #$02 , CCR
0000307C  6D00 0004               4267                  blt.w BCC12           * Less Than           N!=V
00003080  60FE                    4268                  bra *
00003082                          4269                                 
00003082  44FC 000A               4270  BCC12:          move #$0A , CCR
00003086  6E02                    4271                  bgt.s BCC13           * Greater Than        N=V  AND Z=0
00003088  60FE                    4272                  bra *
0000308A                          4273                                  
0000308A  44FC 0006               4274  BCC13:          move #$06 , CCR
0000308E  6F00 0004               4275                  ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
00003092  60FE                    4276                  bra *
00003094                          4277                 
00003094                          4278  
00003094  4E75                    4279  BCC14:          rts
00003096                          4280    
00003096                          4281    
00003096                          4282  *-----------------------------------------------------------
00003096                          4283  *-----------------------------------------------------------
00003096                          4284  * OPCODE : DBCC
00003096                          4285  *-----------------------------------------------------------
00003096                          4286  *-----------------------------------------------------------
00003096                          4287  
00003096  7003                    4288  op_DBCC:        move.l #$00000003 , d0    * Loop counter
00003098  7200                    4289                  move.l #$00000000 , d1    * Accumulator
0000309A  44FC 0000               4290                  move #$00 , CCR
0000309E                          4291                  
0000309E  5201                    4292  DBCC_LOOP1:     addi.b #$1 , d1
000030A0  51C8 FFFC               4293                  dbf d0 , DBCC_LOOP1
000030A4                          4294                  
000030A4  0C81 00000004           4295                  cmpi.l #$00000004 , d1  * Check Accumulator results
000030AA  66FE                    4296                  bne *       
000030AC                          4297                    
000030AC  5201                    4298  DBCC_LOOP2:     addi.b #$1 , d1
000030AE  54C8 FFFC               4299                  dbcc d0 , DBCC_LOOP2    * Dont loop
000030B2                          4300                  
000030B2  0C81 00000005           4301                  cmpi.l #$00000005 , d1  * Check Accumulator results
000030B8  66FE                    4302                  bne *       
000030BA                          4303              
000030BA  4E75                    4304                  rts
000030BC                          4305                  
000030BC                          4306  
000030BC                          4307  *-----------------------------------------------------------
000030BC                          4308  *-----------------------------------------------------------
000030BC                          4309  * OPCODE : SCC
000030BC                          4310  *-----------------------------------------------------------
000030BC                          4311  *-----------------------------------------------------------
000030BC                          4312  
000030BC  44FC 0001               4313  op_SCC:         move #$01 , CCR             
000030C0  54F9 00010000           4314                  scc $00010000                   * Clear the EA byte
000030C6  0C39 0000 00010000      4315                  cmpi.b #$00 , $00010000
000030CE  66FE                    4316                  bne *       
000030D0                          4317  
000030D0  44FC 0000               4318                  move #$00 , CCR
000030D4  54F9 00010000           4319                  scc $00010000                   * Set the EA byte to 0xFF
000030DA  0C39 00FF 00010000      4320                  cmpi.b #$FF , $00010000
000030E2  66FE                    4321                  bne *       
000030E4                          4322  
000030E4  4E75                    4323                  rts
000030E6                          4324                  
000030E6                          4325  
000030E6                          4326  
000030E6                          4327  *-----------------------------------------------------------
000030E6                          4328  *-----------------------------------------------------------
000030E6                          4329  * OPCODE : ADDQ
000030E6                          4330  *-----------------------------------------------------------
000030E6                          4331  *-----------------------------------------------------------
000030E6                          4332  
000030E6                          4333  op_ADDQ:       
000030E6                          4334  
000030E6                          4335      * BYTE
000030E6  203C 000000FF           4336                  move.l #$000000FF , d0    * Loop counter
000030EC  7200                    4337                  move.l #$00000000 , d1    * Flag results accumulator
000030EE  7400                    4338                  move.l #$00000000 , d2    * Data results accumulator
000030F0  7600                    4339                  move.l #$00000000 , d3   
000030F2  7800                    4340                  move.l #$00000000 , d4    
000030F4  7A00                    4341                  move.l #$00000000 , d5    
000030F6  7C00                    4342                  move.l #$00000000 , d6    
000030F8  7E00                    4343                  move.l #$00000000 , d7    
000030FA                          4344  
000030FA  5605                    4345  ADDQ_LOOP1:     addq.b #3 , d5          
000030FC  40C6                    4346                  move SR , d6      
000030FE  0286 0000001F           4347                  andi.l #$1F , d6        * Isolate flags
00003104  D286                    4348                  add.l d6 , d1           * Copy flag results into accumulator
00003106  D485                    4349                  add.l d5 , d2           * Copy data results into data accumulator
00003108  51C8 FFF0               4350                  dbf d0 , ADDQ_LOOP1
0000310C                          4351                  
0000310C  0C81 0000043D           4352                  cmpi.l #$0000043D , d1
00003112  66FE                    4353                  bne *       
00003114  0C82 00007F80           4354                  cmpi.l #$00007F80 , d2
0000311A  66FE                    4355                  bne *       
0000311C                          4356  
0000311C                          4357  
0000311C                          4358      * WORD
0000311C  203C 000000FF           4359                  move.l #$000000FF , d0    * Loop counter
00003122  7200                    4360                  move.l #$00000000 , d1    * Flag results accumulator
00003124  7400                    4361                  move.l #$00000000 , d2    * Data results accumulator
00003126  7600                    4362                  move.l #$00000000 , d3   
00003128  7800                    4363                  move.l #$00000000 , d4    
0000312A  2A3C 0000FFF0           4364                  move.l #$0000FFF0 , d5    
00003130  7C00                    4365                  move.l #$00000000 , d6    
00003132  7E00                    4366                  move.l #$00000000 , d7   
00003134  207C 00000100           4367                  move.l #$00000100 , a0   
0000313A                          4368  
0000313A  5A45                    4369  ADDQ_LOOP2:     addq.w #5 , d5   
0000313C  40C6                    4370                  move SR , d6      
0000313E  0286 0000001F           4371                  andi.l #$1F , d6        * Isolate flags
00003144  D286                    4372                  add.l d6 , d1           * Copy flag results into accumulator
00003146  D485                    4373                  add.l d5 , d2           * Copy data results into data accumulator
00003148  51C8 FFF0               4374                  dbf d0 , ADDQ_LOOP2
0000314C                          4375  
0000314C  0C81 00000029           4376                  cmpi.l #$00000029 , d1
00003152  66FE                    4377                  bne *       
00003154  0C82 00057280           4378                  cmpi.l #$00057280 , d2
0000315A  66FE                    4379                  bne *       
0000315C                          4380  
0000315C                          4381  
0000315C                          4382      * LONG
0000315C  203C 000000FF           4383                  move.l #$000000FF , d0    * Loop counter
00003162  7200                    4384                  move.l #$00000000 , d1    * Flag results accumulator
00003164  7400                    4385                  move.l #$00000000 , d2    * Data results accumulator
00003166  7600                    4386                  move.l #$00000000 , d3   
00003168  7800                    4387                  move.l #$00000000 , d4    
0000316A  7AF0                    4388                  move.l #$FFFFFFF0 , d5    
0000316C  7C00                    4389                  move.l #$00000000 , d6    
0000316E  7E00                    4390                  move.l #$00000000 , d7   
00003170                          4391  
00003170  5285                    4392  ADDQ_LOOP3:     addq.l #1 , d5          
00003172  40C6                    4393                  move SR , d6      
00003174  0286 0000001F           4394                  andi.l #$1F , d6        * Isolate flags
0000317A  D286                    4395                  add.l d6 , d1           * Copy flag results into accumulator
0000317C  D485                    4396                  add.l d5 , d2           * Copy data results into data accumulator
0000317E  51C8 FFF0               4397                  dbf d0 , ADDQ_LOOP3
00003182                          4398  
00003182  0C81 0000008D           4399                  cmpi.l #$0000008D , d1
00003188  66FE                    4400                  bne *       
0000318A  0C82 00007080           4401                  cmpi.l #$00007080 , d2
00003190  66FE                    4402                  bne *      
00003192                          4403  
00003192                          4404      * Check that Flags are not updated for Address registers
00003192  207C 0000FFFF           4405                  move.l #$0000FFFF , a0   
00003198  44FC 0000               4406                  move #$00 , CCR         * Clear flags
0000319C  5E48                    4407                  addq.w #$7 , a0         
0000319E  65FE                    4408                  bcs *
000031A0                          4409  
000031A0  4E75                    4410                  rts
000031A2                          4411          
000031A2                          4412  
000031A2                          4413  
000031A2                          4414  *-----------------------------------------------------------
000031A2                          4415  *-----------------------------------------------------------
000031A2                          4416  * OPCODE : SUBQ
000031A2                          4417  *-----------------------------------------------------------
000031A2                          4418  *-----------------------------------------------------------
000031A2                          4419  
000031A2                          4420  op_SUBQ:       
000031A2                          4421  
000031A2                          4422      * BYTE
000031A2  203C 000000FF           4423                  move.l #$000000FF , d0    * Loop counter
000031A8  7200                    4424                  move.l #$00000000 , d1    * Flag results accumulator
000031AA  243C 00001234           4425                  move.l #$00001234 , d2    * Data results accumulator
000031B0  7600                    4426                  move.l #$00000000 , d3   
000031B2  7800                    4427                  move.l #$00000000 , d4    
000031B4  7A12                    4428                  move.l #$00000012 , d5    
000031B6  7C00                    4429                  move.l #$00000000 , d6    
000031B8  7E00                    4430                  move.l #$00000000 , d7    
000031BA                          4431  
000031BA  5305                    4432  SUBQ_LOOP1:     subq.b #1 , d5          
000031BC  40C6                    4433                  move SR , d6      
000031BE  0286 0000001F           4434                  andi.l #$1F , d6        * Isolate flags
000031C4  D286                    4435                  add.l d6 , d1           * Copy flag results into accumulator
000031C6  D485                    4436                  add.l d5 , d2           * Copy data results into data accumulator
000031C8  51C8 FFF0               4437                  dbf d0 , SUBQ_LOOP1
000031CC                          4438                  
000031CC  0C81 00000417           4439                  cmpi.l #$00000417 , d1
000031D2  66FE                    4440                  bne *       
000031D4  0C82 000091B4           4441                  cmpi.l #$000091B4 , d2
000031DA  66FE                    4442                  bne *       
000031DC                          4443  
000031DC                          4444  
000031DC                          4445      * WORD
000031DC  203C 000000FF           4446                  move.l #$000000FF , d0    * Loop counter
000031E2  7200                    4447                  move.l #$00000000 , d1    * Flag results accumulator
000031E4  7400                    4448                  move.l #$00000000 , d2    * Data results accumulator
000031E6  7600                    4449                  move.l #$00000000 , d3   
000031E8  7800                    4450                  move.l #$00000000 , d4    
000031EA  7A02                    4451                  move.l #$00000002 , d5    
000031EC  7C00                    4452                  move.l #$00000000 , d6    
000031EE  7E00                    4453                  move.l #$00000000 , d7   
000031F0  207C 00000100           4454                  move.l #$00000100 , a0   
000031F6                          4455  
000031F6  5B45                    4456  SUBQ_LOOP2:     subq.w #5 , d5   
000031F8  40C6                    4457                  move SR , d6      
000031FA  0286 0000001F           4458                  andi.l #$1F , d6        * Isolate flags
00003200  D286                    4459                  add.l d6 , d1           * Copy flag results into accumulator
00003202  D485                    4460                  add.l d5 , d2           * Copy data results into data accumulator
00003204  51C8 FFF0               4461                  dbf d0 , SUBQ_LOOP2
00003208                          4462  
00003208  0C81 00000811           4463                  cmpi.l #$00000811 , d1
0000320E  66FE                    4464                  bne *       
00003210  0C82 00FD7F80           4465                  cmpi.l #$00FD7F80 , d2
00003216  66FE                    4466                  bne *       
00003218                          4467  
00003218                          4468  
00003218                          4469      * LONG
00003218  203C 000000FF           4470                  move.l #$000000FF , d0    * Loop counter
0000321E  7200                    4471                  move.l #$00000000 , d1    * Flag results accumulator
00003220  7400                    4472                  move.l #$00000000 , d2    * Data results accumulator
00003222  7600                    4473                  move.l #$00000000 , d3   
00003224  7800                    4474                  move.l #$00000000 , d4    
00003226  7A07                    4475                  move.l #$00000007 , d5    
00003228  7C00                    4476                  move.l #$00000000 , d6    
0000322A  7E00                    4477                  move.l #$00000000 , d7   
0000322C                          4478  
0000322C  5385                    4479  SUBQ_LOOP3:     subq.l #1 , d5          
0000322E  40C6                    4480                  move SR , d6      
00003230  0286 0000001F           4481                  andi.l #$1F , d6        * Isolate flags
00003236  D286                    4482                  add.l d6 , d1           * Copy flag results into accumulator
00003238  D485                    4483                  add.l d5 , d2           * Copy data results into data accumulator
0000323A  51C8 FFF0               4484                  dbf d0 , SUBQ_LOOP3
0000323E                          4485  
0000323E  0C81 000007DD           4486                  cmpi.l #$000007DD , d1
00003244  66FE                    4487                  bne *       
00003246  0C82 FFFF8680           4488                  cmpi.l #$FFFF8680 , d2
0000324C  66FE                    4489                  bne *      
0000324E                          4490  
0000324E                          4491      * Check that Flags are not updated for Address registers
0000324E  207C 0001FFFF           4492                  move.l #$0001FFFF , a0   
00003254  44FC 0000               4493                  move #$00 , CCR         * Clear flags
00003258  5F48                    4494                  subq.w #$7 , a0         
0000325A  65FE                    4495                  bcs *
0000325C                          4496  
0000325C  4E75                    4497                  rts
0000325E                          4498          
0000325E                          4499          
0000325E                          4500  
0000325E                          4501  
0000325E                          4502  *-----------------------------------------------------------
0000325E                          4503  *-----------------------------------------------------------
0000325E                          4504  * OPCODE : MOVEQ
0000325E                          4505  *-----------------------------------------------------------
0000325E                          4506  *-----------------------------------------------------------
0000325E                          4507  
0000325E                          4508  op_MOVEQ:     
0000325E  7000                    4509                  move.l #$00000000 , d0  
00003260  7000                    4510                  moveq #$0 , d0
00003262  66FE                    4511                  bne *
00003264  0C80 00000000           4512                  cmpi.l #$00000000 , d0
0000326A  66FE                    4513                  bne *
0000326C                          4514  
0000326C  7000                    4515                  move.l #$00000000 , d0  
0000326E  7080                    4516                  moveq #$80 , d0
00003270  67FE                    4517                  beq *
00003272  6AFE                    4518                  bpl *
00003274  0C80 FFFFFF80           4519                  cmpi.l #$FFFFFF80 , d0
0000327A  66FE                    4520                  bne *
0000327C                          4521  
0000327C                          4522  
0000327C  4E75                    4523                  rts
0000327E                          4524     
0000327E                          4525     
0000327E                          4526  *-----------------------------------------------------------
0000327E                          4527  *-----------------------------------------------------------
0000327E                          4528  * OPCODE : DIVU
0000327E                          4529  *-----------------------------------------------------------
0000327E                          4530  *-----------------------------------------------------------
0000327E                          4531  
0000327E                          4532  op_DIVU:     
0000327E                          4533  
0000327E  203C A5A5A5A5           4534                  move.l #$a5a5a5a5, d0        * Initial Numerator
00003284  223C 00005A5A           4535                  move.l #$00005a5a, d1        * Initial Divisor
0000328A  243C A5A5A5A5           4536                  move.l #$a5a5a5a5, d2
00003290  7600                    4537                  move.l #$00000000, d3
00003292  7800                    4538                  move.l #$00000000, d4        * Cumulative data results
00003294  7A00                    4539                  move.l #$00000000, d5       * Cumulative flag results
00003296  7C0E                    4540                  move.l #$0000000E, d6       * Inner loop counter
00003298  7E1E                    4541                  move.l #$0000001E, d7       * Outer loop counter
0000329A                          4542  
0000329A                          4543  
0000329A  80C1                    4544  DIVU_OUTER1:    divu d1  , d0               * !! Easy68K C not always cleared
0000329C  40C3                    4545                  move SR , d3      
0000329E  0283 0000000C           4546                  andi.l #$0C , d3            * Isolate flags 
000032A4  DA83                    4547                  add.l d3 , d5               * Copy flag results into accumulator
000032A6  D880                    4548                  add.l d0 , d4               * Copy data results into data accumulator   
000032A8  E289                    4549                  lsr.l #$1 , d1
000032AA                          4550  
000032AA  51CE FFEE               4551                  dbf d6 , DIVU_OUTER1
000032AE  E28A                    4552                  lsr.l #$1 , d2
000032B0  2002                    4553                  move.l d2 , d0
000032B2  223C 00005A5A           4554                  move.l #$00005a5a, d1       * Initial Divisor
000032B8  7C0E                    4555                  move.l #$0000000E, d6       * Inner loop counter
000032BA  51CF FFDE               4556                  dbf d7 , DIVU_OUTER1
000032BE                          4557                  
000032BE  0C84 92FEDB89           4558                  cmpi.l #$92FEDB89 , d4      * Check the data results
000032C4  66FE                    4559                  bne *                
000032C6                          4560                       
000032C6  0C85 00000110           4561                  cmpi.l #$00000110 , d5      * Check the Flag results
000032CC  66FE                    4562                  bne *                 
000032CE                          4563            
000032CE                          4564  
000032CE  4E75                    4565                  rts
000032D0                          4566                  
000032D0                          4567    
000032D0                          4568     
000032D0                          4569  *-----------------------------------------------------------
000032D0                          4570  *-----------------------------------------------------------
000032D0                          4571  * OPCODE : DIVS
000032D0                          4572  *-----------------------------------------------------------
000032D0                          4573  *-----------------------------------------------------------
000032D0                          4574  
000032D0                          4575  op_DIVS:     
000032D0                          4576  
000032D0  203C A5A5A5A5           4577                  move.l #$a5a5a5a5, d0        * Initial Numerator
000032D6  223C 00005A5A           4578                  move.l #$00005a5a, d1        * Initial Divisor
000032DC  243C A5A5A5A5           4579                  move.l #$a5a5a5a5, d2
000032E2  7600                    4580                  move.l #$00000000, d3
000032E4  7800                    4581                  move.l #$00000000, d4        * Cumulative data results
000032E6  7A00                    4582                  move.l #$00000000, d5       * Cumulative flag results
000032E8  7C0E                    4583                  move.l #$0000000E, d6       * Inner loop counter
000032EA  7E1E                    4584                  move.l #$0000001E, d7       * Outer loop counter
000032EC                          4585  
000032EC                          4586  
000032EC  81C1                    4587  DIVS_OUTER1:    divs d1  , d0               * !! Easy68K C not always cleared
000032EE  40C3                    4588                  move SR , d3      
000032F0  0283 0000000C           4589                  andi.l #$0C , d3            * Isolate flags 
000032F6  DA83                    4590                  add.l d3 , d5               * Copy flag results into accumulator
000032F8  D880                    4591                  add.l d0 , d4               * Copy data results into data accumulator   
000032FA  E289                    4592                  lsr.l #$1 , d1
000032FC                          4593  
000032FC  51CE FFEE               4594                  dbf d6 , DIVS_OUTER1
00003300  E28A                    4595                  lsr.l #$1 , d2
00003302  2002                    4596                  move.l d2 , d0
00003304  223C 00005A5A           4597                  move.l #$00005a5a, d1       * Initial Divisor
0000330A  7C0E                    4598                  move.l #$0000000E, d6       * Inner loop counter
0000330C  51CF FFDE               4599                  dbf d7 , DIVS_OUTER1
00003310                          4600                  
00003310  0C84 4EC5D057           4601                  cmpi.l #$4EC5D057 , d4      * Check the data results
00003316  66FE                    4602                  bne *                
00003318                          4603                       
00003318  0C85 00000038           4604                  cmpi.l #$00000038 , d5      * Check the Flag results
0000331E  66FE                    4605                  bne *                 
00003320                          4606            
00003320                          4607  
00003320  4E75                    4608                  rts
00003322                          4609         
00003322                          4610  
00003322                          4611     
00003322                          4612  *-----------------------------------------------------------
00003322                          4613  *-----------------------------------------------------------
00003322                          4614  * OPCODE : OR
00003322                          4615  *-----------------------------------------------------------
00003322                          4616  *-----------------------------------------------------------
00003322                          4617  
00003322                          4618  op_OR:   
00003322                          4619  
00003322                          4620    ** <EA> to Register
00003322                          4621  
00003322  203C A5A5A5A5           4622                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003328  223C 8167E123           4623                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
0000332E  243C A5A5A5A5           4624                  move.l #$a5a5a5a5, d2
00003334  7600                    4625                  move.l #$00000000, d3
00003336  7800                    4626                  move.l #$00000000, d4       * Cumulative data results
00003338  7A00                    4627                  move.l #$00000000, d5       * Cumulative flag results
0000333A  7C1E                    4628                  move.l #$0000001E, d6       * Inner loop counter
0000333C  7E1E                    4629                  move.l #$0000001E, d7       * Outer loop counter
0000333E  207C 00000100           4630                  move.l #$00000100, a0       * Address for memory EA operations
00003344                          4631  
00003344                          4632  
00003344                          4633  OR_OUTER1:    
00003344                          4634   
00003344                          4635      * BYTE     
00003344  2081                    4636                  move.l d1 , (a0)
00003346  8010                    4637                  or.b (a0) , d0             
00003348  40C3                    4638                  move SR , d3      
0000334A  0283 0000000C           4639                  andi.l #$0C , d3            * Isolate flags 
00003350  DA83                    4640                  add.l d3 , d5               * Copy flag results into accumulator
00003352  D880                    4641                  add.l d0 , d4               * Copy data results into data accumulator   
00003354                          4642   
00003354                          4643      * WORD      
00003354  2081                    4644                  move.l d1 , (a0)
00003356  8050                    4645                  or.w (a0) , d0             
00003358  40C3                    4646                  move SR , d3      
0000335A  0283 0000000C           4647                  andi.l #$0C , d3            * Isolate flags 
00003360  DA83                    4648                  add.l d3 , d5               * Copy flag results into accumulator
00003362  D880                    4649                  add.l d0 , d4               * Copy data results into data accumulator   
00003364                          4650   
00003364                          4651      * LONG      
00003364  2081                    4652                  move.l d1 , (a0)
00003366  8090                    4653                  or.l (a0) , d0             
00003368  40C3                    4654                  move SR , d3      
0000336A  0283 0000000F           4655                  andi.l #$0F , d3            * Isolate flags 
00003370  DA83                    4656                  add.l d3 , d5               * Copy flag results into accumulator
00003372  D880                    4657                  add.l d0 , d4               * Copy data results into data accumulator   
00003374                          4658                  
00003374                          4659                  
00003374  E289                    4660                  lsr.l #$1 , d1
00003376  51CE FFCC               4661                  dbf d6 , OR_OUTER1
0000337A  E28A                    4662                  lsr.l #$1 , d2
0000337C  223C 8167E123           4663                  move.l #$8167E123, d1       * Initial Data-Y
00003382  7C1E                    4664                  move.l #$0000001E, d6       * Inner loop counter
00003384  51CF FFBE               4665                  dbf d7 , OR_OUTER1
00003388                          4666                  
00003388  0C84 76EAC803           4667                  cmpi.l #$76EAC803 , d4      * Check the data results
0000338E  66FE                    4668                  bne *                
00003390  0C85 00005A18           4669                  cmpi.l #$00005A18 , d5      * Check the Flag results
00003396  66FE                    4670                  bne *                
00003398                          4671                     
00003398                          4672                     
00003398                          4673    ** Register to <EA>
00003398                          4674  
00003398  203C 86738374           4675                  move.l #$86738374, d0       * Initial Data-X  Inner loop
0000339E  223C FC55F2FE           4676                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
000033A4  243C 86738374           4677                  move.l #$86738374, d2
000033AA  7600                    4678                  move.l #$00000000, d3
000033AC  7800                    4679                  move.l #$00000000, d4       * Cumulative data results
000033AE  7A00                    4680                  move.l #$00000000, d5       * Cumulative flag results
000033B0  7C1E                    4681                  move.l #$0000001E, d6       * Inner loop counter
000033B2  7E1D                    4682                  move.l #$0000001D, d7       * Outer loop counter
000033B4  207C 00000100           4683                  move.l #$00000100, a0       * Address for memory EA operations
000033BA                          4684  
000033BA                          4685  
000033BA                          4686  OR_OUTER2:    
000033BA                          4687   
000033BA                          4688      * BYTE     
000033BA  2080                    4689                  move.l d0 , (a0)
000033BC  8310                    4690                  or.b d1 , (a0)             
000033BE  40C3                    4691                  move SR , d3      
000033C0  0283 0000000C           4692                  andi.l #$0C , d3            * Isolate flags 
000033C6  DA83                    4693                  add.l d3 , d5               * Copy flag results into accumulator
000033C8  D890                    4694                  add.l (a0) , d4             * Copy data results into data accumulator   
000033CA                          4695   
000033CA                          4696      * WORD      
000033CA  2080                    4697                  move.l d0 , (a0)
000033CC  8350                    4698                  or.w d1 , (a0)  
000033CE  40C3                    4699                  move SR , d3      
000033D0  0283 0000000C           4700                  andi.l #$0C , d3            * Isolate flags 
000033D6  DA83                    4701                  add.l d3 , d5               * Copy flag results into accumulator
000033D8  D890                    4702                  add.l (a0) , d4             * Copy data results into data accumulator   
000033DA                          4703   
000033DA                          4704      * LONG      
000033DA  2080                    4705                  move.l d0 , (a0)
000033DC  8390                    4706                  or.l d1 , (a0)  
000033DE  40C3                    4707                  move SR , d3      
000033E0  0283 0000000F           4708                  andi.l #$0F , d3            * Isolate flags 
000033E6  DA83                    4709                  add.l d3 , d5               * Copy flag results into accumulator
000033E8  D890                    4710                  add.l (a0) , d4             * Copy data results into data accumulator   
000033EA                          4711                  
000033EA                          4712                  
000033EA  E289                    4713                  lsr.l #$1 , d1
000033EC  51CE FFCC               4714                  dbf d6 , OR_OUTER2
000033F0  E28A                    4715                  lsr.l #$1 , d2
000033F2  223C 8167E123           4716                  move.l #$8167E123, d1       * Initial Data-Y
000033F8  7C1E                    4717                  move.l #$0000001E, d6       * Inner loop counter
000033FA  51CF FFBE               4718                  dbf d7 , OR_OUTER2
000033FE                          4719                  
000033FE  0C84 FA82B9E4           4720                  cmpi.l #$FA82B9E4 , d4      * Check the data results
00003404  66FE                    4721                  bne *                
00003406  0C85 00005730           4722                  cmpi.l #$00005730 , d5      * Check the Flag results
0000340C  66FE                    4723                  bne *                 
0000340E                          4724                     
0000340E                          4725                     
0000340E  4E75                    4726                  rts
00003410                          4727                  
00003410                          4728                  
00003410                          4729  
00003410                          4730  *-----------------------------------------------------------
00003410                          4731  *-----------------------------------------------------------
00003410                          4732  * OPCODE : AND
00003410                          4733  *-----------------------------------------------------------
00003410                          4734  *-----------------------------------------------------------
00003410                          4735  
00003410                          4736  op_AND:   
00003410                          4737  
00003410                          4738    ** <EA> to Register
00003410                          4739  
00003410  203C A5A5A5A5           4740                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003416  223C 8167E123           4741                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
0000341C  243C A5A5A5A5           4742                  move.l #$a5a5a5a5, d2
00003422  7600                    4743                  move.l #$00000000, d3
00003424  7800                    4744                  move.l #$00000000, d4       * Cumulative data results
00003426  7A00                    4745                  move.l #$00000000, d5       * Cumulative flag results
00003428  7C1E                    4746                  move.l #$0000001E, d6       * Inner loop counter
0000342A  7E1E                    4747                  move.l #$0000001E, d7       * Outer loop counter
0000342C  207C 00000100           4748                  move.l #$00000100, a0       * Address for memory EA operations
00003432                          4749  
00003432                          4750  
00003432                          4751  AND_OUTER1:    
00003432                          4752   
00003432                          4753      * BYTE     
00003432  2081                    4754                  move.l d1 , (a0)
00003434  C010                    4755                  and.b (a0) , d0             
00003436  40C3                    4756                  move SR , d3      
00003438  0283 0000000C           4757                  andi.l #$0C , d3            * Isolate flags 
0000343E  DA83                    4758                  add.l d3 , d5               * Copy flag results into accumulator
00003440  D880                    4759                  add.l d0 , d4               * Copy data results into data accumulator   
00003442                          4760   
00003442                          4761      * WORD      
00003442  2081                    4762                  move.l d1 , (a0)
00003444  C050                    4763                  and.w (a0) , d0             
00003446  40C3                    4764                  move SR , d3      
00003448  0283 0000000C           4765                  andi.l #$0C , d3            * Isolate flags 
0000344E  DA83                    4766                  add.l d3 , d5               * Copy flag results into accumulator
00003450  D880                    4767                  add.l d0 , d4               * Copy data results into data accumulator   
00003452                          4768   
00003452                          4769      * LONG      
00003452  2081                    4770                  move.l d1 , (a0)
00003454  C090                    4771                  and.l (a0) , d0             
00003456  40C3                    4772                  move SR , d3      
00003458  0283 0000000F           4773                  andi.l #$0F , d3            * Isolate flags 
0000345E  DA83                    4774                  add.l d3 , d5               * Copy flag results into accumulator
00003460  D880                    4775                  add.l d0 , d4               * Copy data results into data accumulator   
00003462                          4776                  
00003462                          4777                  
00003462  E289                    4778                  lsr.l #$1 , d1
00003464  51CE FFCC               4779                  dbf d6 , AND_OUTER1
00003468  E28A                    4780                  lsr.l #$1 , d2
0000346A  223C 8167E123           4781                  move.l #$8167E123, d1       * Initial Data-Y
00003470  7C1E                    4782                  move.l #$0000001E, d6       * Inner loop counter
00003472  51CF FFBE               4783                  dbf d7 , AND_OUTER1
00003476                          4784                  
00003476  0C84 CF212883           4785                  cmpi.l #$CF212883 , d4      * Check the data results
0000347C  66FE                    4786                  bne *                
0000347E  0C85 00002D10           4787                  cmpi.l #$00002D10 , d5      * Check the Flag results
00003484  66FE                    4788                  bne *                
00003486                          4789                     
00003486                          4790                     
00003486                          4791    ** Register to <EA>
00003486                          4792  
00003486  203C 86738374           4793                  move.l #$86738374, d0       * Initial Data-X  Inner loop
0000348C  223C FC55F2FE           4794                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
00003492  243C 86738374           4795                  move.l #$86738374, d2
00003498  7600                    4796                  move.l #$00000000, d3
0000349A  7800                    4797                  move.l #$00000000, d4       * Cumulative data results
0000349C  7A00                    4798                  move.l #$00000000, d5       * Cumulative flag results
0000349E  7C1E                    4799                  move.l #$0000001E, d6       * Inner loop counter
000034A0  7E1D                    4800                  move.l #$0000001D, d7       * Outer loop counter
000034A2  207C 00000100           4801                  move.l #$00000100, a0       * Address for memory EA operations
000034A8                          4802  
000034A8                          4803  
000034A8                          4804  AND_OUTER2:    
000034A8                          4805   
000034A8                          4806      * BYTE     
000034A8  2080                    4807                  move.l d0 , (a0)
000034AA  C310                    4808                  and.b d1 , (a0)             
000034AC  40C3                    4809                  move SR , d3      
000034AE  0283 0000000C           4810                  andi.l #$0C , d3            * Isolate flags 
000034B4  DA83                    4811                  add.l d3 , d5               * Copy flag results into accumulator
000034B6  D890                    4812                  add.l (a0) , d4             * Copy data results into data accumulator   
000034B8                          4813   
000034B8                          4814      * WORD      
000034B8  2080                    4815                  move.l d0 , (a0)
000034BA  C350                    4816                  and.w d1 , (a0)  
000034BC  40C3                    4817                  move SR , d3      
000034BE  0283 0000000C           4818                  andi.l #$0C , d3            * Isolate flags 
000034C4  DA83                    4819                  add.l d3 , d5               * Copy flag results into accumulator
000034C6  D890                    4820                  add.l (a0) , d4             * Copy data results into data accumulator   
000034C8                          4821   
000034C8                          4822      * LONG      
000034C8  2080                    4823                  move.l d0 , (a0)
000034CA  C390                    4824                  and.l d1 , (a0)  
000034CC  40C3                    4825                  move SR , d3      
000034CE  0283 0000000F           4826                  andi.l #$0F , d3            * Isolate flags 
000034D4  DA83                    4827                  add.l d3 , d5               * Copy flag results into accumulator
000034D6  D890                    4828                  add.l (a0) , d4             * Copy data results into data accumulator   
000034D8                          4829                  
000034D8                          4830                  
000034D8  E289                    4831                  lsr.l #$1 , d1
000034DA  51CE FFCC               4832                  dbf d6 , AND_OUTER2
000034DE  E28A                    4833                  lsr.l #$1 , d2
000034E0  223C 8167E123           4834                  move.l #$8167E123, d1       * Initial Data-Y
000034E6  7C1E                    4835                  move.l #$0000001E, d6       * Inner loop counter
000034E8  51CF FFBE               4836                  dbf d7 , AND_OUTER2
000034EC                          4837                  
000034EC  0C84 4A3DE544           4838                  cmpi.l #$4A3DE544 , d4      * Check the data results
000034F2  66FE                    4839                  bne *                
000034F4  0C85 000018E8           4840                  cmpi.l #$000018E8 , d5      * Check the Flag results
000034FA  66FE                    4841                  bne *                 
000034FC                          4842                     
000034FC                          4843                     
000034FC  4E75                    4844                  rts
000034FE                          4845                  
000034FE                          4846                 
000034FE                          4847  
000034FE                          4848  *-----------------------------------------------------------
000034FE                          4849  *-----------------------------------------------------------
000034FE                          4850  * OPCODE : EOR
000034FE                          4851  *-----------------------------------------------------------
000034FE                          4852  *-----------------------------------------------------------
000034FE                          4853  
000034FE                          4854  op_EOR:   
000034FE                          4855   
000034FE                          4856    ** Register to <EA>
000034FE                          4857  
000034FE  203C 86738374           4858                  move.l #$86738374, d0       * Initial Data-X  Inner loop
00003504  223C FC55F2FE           4859                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
0000350A  243C 86738374           4860                  move.l #$86738374, d2
00003510  7600                    4861                  move.l #$00000000, d3
00003512  7800                    4862                  move.l #$00000000, d4       * Cumulative data results
00003514  7A00                    4863                  move.l #$00000000, d5       * Cumulative flag results
00003516  7C1E                    4864                  move.l #$0000001E, d6       * Inner loop counter
00003518  7E1D                    4865                  move.l #$0000001D, d7       * Outer loop counter
0000351A  207C 00000100           4866                  move.l #$00000100, a0       * Address for memory EA operations
00003520                          4867  
00003520                          4868  
00003520                          4869  EOR_OUTER2:    
00003520                          4870   
00003520                          4871      * BYTE     
00003520  2080                    4872                  move.l d0 , (a0)
00003522  B310                    4873                  eor.b d1 , (a0)             
00003524  40C3                    4874                  move SR , d3      
00003526  0283 0000000C           4875                  andi.l #$0C , d3            * Isolate flags 
0000352C  DA83                    4876                  add.l d3 , d5               * Copy flag results into accumulator
0000352E  D890                    4877                  add.l (a0) , d4             * Copy data results into data accumulator   
00003530                          4878   
00003530                          4879      * WORD      
00003530  2080                    4880                  move.l d0 , (a0)
00003532  B350                    4881                  eor.w d1 , (a0)  
00003534  40C3                    4882                  move SR , d3      
00003536  0283 0000000C           4883                  andi.l #$0C , d3            * Isolate flags 
0000353C  DA83                    4884                  add.l d3 , d5               * Copy flag results into accumulator
0000353E  D890                    4885                  add.l (a0) , d4             * Copy data results into data accumulator   
00003540                          4886   
00003540                          4887      * LONG      
00003540  2080                    4888                  move.l d0 , (a0)
00003542  B390                    4889                  eor.l d1 , (a0)  
00003544  40C3                    4890                  move SR , d3      
00003546  0283 0000000F           4891                  andi.l #$0F , d3            * Isolate flags 
0000354C  DA83                    4892                  add.l d3 , d5               * Copy flag results into accumulator
0000354E  D890                    4893                  add.l (a0) , d4             * Copy data results into data accumulator   
00003550                          4894                  
00003550                          4895                  
00003550  E289                    4896                  lsr.l #$1 , d1
00003552  51CE FFCC               4897                  dbf d6 , EOR_OUTER2
00003556  E28A                    4898                  lsr.l #$1 , d2
00003558  223C 8167E123           4899                  move.l #$8167E123, d1       * Initial Data-Y
0000355E  7C1E                    4900                  move.l #$0000001E, d6       * Inner loop counter
00003560  51CF FFBE               4901                  dbf d7 , EOR_OUTER2
00003564                          4902                  
00003564  0C84 55C5EB70           4903                  cmpi.l #$55C5EB70 , d4      * Check the data results
0000356A  66FE                    4904                  bne *                
0000356C  0C85 00004430           4905                  cmpi.l #$00004430 , d5      * Check the Flag results
00003572  66FE                    4906                  bne *                 
00003574                          4907                     
00003574                          4908                     
00003574  4E75                    4909                  rts
00003576                          4910                  
00003576                          4911  
00003576                          4912  *-----------------------------------------------------------
00003576                          4913  *-----------------------------------------------------------
00003576                          4914  * OPCODE : CMP
00003576                          4915  *-----------------------------------------------------------
00003576                          4916  *-----------------------------------------------------------
00003576                          4917  
00003576                          4918  op_CMP:   
00003576                          4919  
00003576                          4920  
00003576                          4921    ** <EA> to Register
00003576                          4922  
00003576  203C A5A5A5A5           4923                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
0000357C  223C 8167E123           4924                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003582  243C A5A5A5A5           4925                  move.l #$a5a5a5a5, d2
00003588  7600                    4926                  move.l #$00000000, d3
0000358A  7800                    4927                  move.l #$00000000, d4       * Cumulative data results
0000358C  7A00                    4928                  move.l #$00000000, d5       * Cumulative flag results
0000358E  7C1E                    4929                  move.l #$0000001E, d6       * Inner loop counter
00003590  7E1E                    4930                  move.l #$0000001E, d7       * Outer loop counter
00003592  207C 00000100           4931                  move.l #$00000100, a0       * Address for memory EA operations
00003598                          4932  
00003598                          4933  
00003598                          4934  CMP_OUTER1:    
00003598                          4935   
00003598                          4936      * BYTE     
00003598  2081                    4937                  move.l d1 , (a0)
0000359A  B010                    4938                  cmp.b (a0) , d0             
0000359C  40C3                    4939                  move SR , d3      
0000359E  0283 0000000F           4940                  andi.l #$0F , d3            * Isolate flags 
000035A4  DA83                    4941                  add.l d3 , d5               * Copy flag results into accumulator
000035A6  D880                    4942                  add.l d0 , d4               * Copy data results into data accumulator   
000035A8                          4943   
000035A8                          4944      * WORD      
000035A8  2081                    4945                  move.l d1 , (a0)
000035AA  B050                    4946                  cmp.w (a0) , d0             
000035AC  40C3                    4947                  move SR , d3      
000035AE  0283 0000000F           4948                  andi.l #$0F , d3            * Isolate flags 
000035B4  DA83                    4949                  add.l d3 , d5               * Copy flag results into accumulator
000035B6  D880                    4950                  add.l d0 , d4               * Copy data results into data accumulator   
000035B8                          4951   
000035B8                          4952      * LONG      
000035B8  2081                    4953                  move.l d1 , (a0)
000035BA  B090                    4954                  cmp.l (a0) , d0             
000035BC  40C3                    4955                  move SR , d3      
000035BE  0283 0000000F           4956                  andi.l #$0F , d3            * Isolate flags 
000035C4  DA83                    4957                  add.l d3 , d5               * Copy flag results into accumulator
000035C6  D880                    4958                  add.l d0 , d4               * Copy data results into data accumulator   
000035C8                          4959                  
000035C8                          4960                  
000035C8  E289                    4961                  lsr.l #$1 , d1
000035CA  51CE FFCC               4962                  dbf d6 , CMP_OUTER1
000035CE  E28A                    4963                  lsr.l #$1 , d2
000035D0  223C 8167E123           4964                  move.l #$8167E123, d1       * Initial Data-Y
000035D6  7C1E                    4965                  move.l #$0000001E, d6       * Inner loop counter
000035D8  51CF FFBE               4966                  dbf d7 , CMP_OUTER1
000035DC                          4967                  
000035DC  0C84 7878712F           4968                  cmpi.l #$7878712F , d4      * Check the data results
000035E2  66FE                    4969                  bne *                
000035E4  0C85 00005502           4970                  cmpi.l #$00005502 , d5      * Check the Flag results
000035EA  66FE                    4971                  bne *                
000035EC                          4972                     
000035EC                          4973                     
000035EC                          4974  
000035EC  4E75                    4975                  rts
000035EE                          4976  
000035EE                          4977  
000035EE                          4978  *-----------------------------------------------------------
000035EE                          4979  *-----------------------------------------------------------
000035EE                          4980  * OPCODE : CMPA
000035EE                          4981  *-----------------------------------------------------------
000035EE                          4982  *-----------------------------------------------------------
000035EE                          4983  
000035EE                          4984  op_CMPA:   
000035EE                          4985  
000035EE                          4986  
000035EE                          4987    ** <EA> to Register
000035EE                          4988  
000035EE  207C A5A5A5A5           4989                  move.l #$a5a5a5a5, a0       * Initial Data-X  Inner loop
000035F4  223C 8167E123           4990                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
000035FA  243C A5A5A5A5           4991                  move.l #$a5a5a5a5, d2
00003600  7600                    4992                  move.l #$00000000, d3
00003602  7800                    4993                  move.l #$00000000, d4       * Cumulative data results
00003604  7A00                    4994                  move.l #$00000000, d5       * Cumulative flag results
00003606  7C1E                    4995                  move.l #$0000001E, d6       * Inner loop counter
00003608  7E1E                    4996                  move.l #$0000001E, d7       * Outer loop counter
0000360A  227C 00000100           4997                  move.l #$00000100, a1       * Address for memory EA operations
00003610                          4998  
00003610                          4999  
00003610                          5000  CMPA_OUTER1:    
00003610                          5001    
00003610                          5002   
00003610                          5003      * WORD      
00003610  2281                    5004                  move.l d1 , (a1)
00003612  B0D1                    5005                  cmpa.w (a1) , a0             
00003614  40C3                    5006                  move SR , d3      
00003616  0283 0000000F           5007                  andi.l #$0F , d3            * Isolate flags 
0000361C  DA83                    5008                  add.l d3 , d5               * Copy flag results into accumulator
0000361E  D888                    5009                  add.l a0 , d4               * Copy data results into data accumulator   
00003620                          5010   
00003620                          5011      * LONG      
00003620  2281                    5012                  move.l d1 , (a1)
00003622  B1D1                    5013                  cmpa.l (a1) , a0             
00003624  40C3                    5014                  move SR , d3      
00003626  0283 0000000F           5015                  andi.l #$0F , d3            * Isolate flags 
0000362C  DA83                    5016                  add.l d3 , d5               * Copy flag results into accumulator
0000362E  D888                    5017                  add.l a0 , d4               * Copy data results into data accumulator   
00003630                          5018                  
00003630                          5019                  
00003630  E289                    5020                  lsr.l #$1 , d1
00003632  51CE FFDC               5021                  dbf d6 , CMPA_OUTER1
00003636  E28A                    5022                  lsr.l #$1 , d2
00003638  223C 8167E123           5023                  move.l #$8167E123, d1       * Initial Data-Y
0000363E  7C1E                    5024                  move.l #$0000001E, d6       * Inner loop counter
00003640  51CF FFCE               5025                  dbf d7 , CMPA_OUTER1
00003644                          5026                  
00003644  0C84 A5A5A0CA           5027                  cmpi.l #$a5a5a0ca , d4      * Check the data results
0000364A  66FE                    5028                  bne *                
0000364C  0C85 00003A7D           5029                  cmpi.l #$00003A7D , d5      * Check the Flag results
00003652  66FE                    5030                  bne *                
00003654                          5031                         
00003654                          5032  
00003654  4E75                    5033                  rts
00003656                          5034  
00003656                          5035  
00003656                          5036  
00003656                          5037  *-----------------------------------------------------------
00003656                          5038  *-----------------------------------------------------------
00003656                          5039  * OPCODE : CMPM
00003656                          5040  *-----------------------------------------------------------
00003656                          5041  *-----------------------------------------------------------
00003656                          5042  
00003656                          5043  op_CMPM: 
00003656                          5044  
00003656  207C 00000100           5045                  move.l #$00000100, a0       * Address for Data-X
0000365C  227C 00000200           5046                  move.l #$00000200, a1       * Address for Data-Y
00003662  7000                    5047                  move.l #$00000000, d0       
00003664  7200                    5048                  move.l #$00000000, d1       
00003666  7400                    5049                  move.l #$00000000, d2       
00003668                          5050                  
00003668  20FC 11FF5580           5051                  move.l #$11FF5580 , (a0)+   * Populate test data
0000366E  20FC 1111FFFF           5052                  move.l #$1111FFFF , (a0)+   * Populate test data
00003674  20FC 33333333           5053                  move.l #$33333333 , (a0)+   * Populate test data
0000367A  20FC 44444444           5054                  move.l #$44444444 , (a0)+   * Populate test data
00003680                          5055                  
00003680  22FC 80FF337F           5056                  move.l #$80FF337F , (a1)+   * Populate test data
00003686  22FC FFFF1111           5057                  move.l #$FFFF1111 , (a1)+   * Populate test data
0000368C  22FC 33333333           5058                  move.l #$33333333 , (a1)+   * Populate test data
00003692  22FC 44444444           5059                  move.l #$44444444 , (a1)+   * Populate test data
00003698                          5060                  
00003698  207C 00000100           5061                  move.l #$00000100, a0       * Address for Data-X
0000369E  227C 00000200           5062                  move.l #$00000200, a1       * Address for Data-Y
000036A4  7C0F                    5063                  move.l #$0000000F, d6       * Loop counter
000036A6                          5064                  
000036A6  B308                    5065  CMPM_LOOP1:     cmpm.b (a0)+ , (a1)+
000036A8  40C3                    5066                  move SR , d3      
000036AA  0283 0000000F           5067                  andi.l #$0F , d3            * Isolate flags 
000036B0  D083                    5068                  add.l d3 , d0               * Copy flag results into accumulator                
000036B2  51CE FFF2               5069                  dbf d6 , CMPM_LOOP1
000036B6                          5070  
000036B6                          5071  
000036B6  207C 00000100           5072                  move.l #$00000100, a0       * Address for Data-X
000036BC  227C 00000200           5073                  move.l #$00000200, a1       * Address for Data-Y
000036C2  7C07                    5074                  move.l #$00000007, d6       * Loop counter
000036C4                          5075                  
000036C4  B348                    5076  CMPM_LOOP2:     cmpm.w (a0)+ , (a1)+
000036C6  40C3                    5077                  move SR , d3      
000036C8  0283 0000000F           5078                  andi.l #$0F , d3            * Isolate flags 
000036CE  D283                    5079                  add.l d3 , d1               * Copy flag results into accumulator                
000036D0  51CE FFF2               5080                  dbf d6 , CMPM_LOOP2
000036D4                          5081  
000036D4                          5082  
000036D4  207C 00000100           5083                  move.l #$00000100, a0       * Address for Data-X
000036DA  227C 00000200           5084                  move.l #$00000200, a1       * Address for Data-Y
000036E0  7C03                    5085                  move.l #$00000003, d6       * Loop counter
000036E2                          5086                  
000036E2  B388                    5087  CMPM_LOOP3:     cmpm.l (a0)+ , (a1)+
000036E4  40C3                    5088                  move SR , d3      
000036E6  0283 0000000F           5089                  andi.l #$0F , d3            * Isolate flags 
000036EC  D483                    5090                  add.l d3 , d2               * Copy flag results into accumulator                
000036EE  51CE FFF2               5091                  dbf d6 , CMPM_LOOP3
000036F2                          5092  
000036F2                          5093  
000036F2  0C80 0000004C           5094                  cmpi.l #$0000004C , d0      * Check the data results
000036F8  66FE                    5095                  bne *                
000036FA  0C81 00000024           5096                  cmpi.l #$00000024 , d1      
00003700  66FE                    5097                  bne *                
00003702  0C82 00000012           5098                  cmpi.l #$00000012 , d2      
00003708  66FE                    5099                  bne *                
0000370A                          5100          
0000370A  4E75                    5101                  rts
0000370C                          5102  
0000370C                          5103  
0000370C                          5104  *-----------------------------------------------------------
0000370C                          5105  *-----------------------------------------------------------
0000370C                          5106  * OPCODE : ADD
0000370C                          5107  *-----------------------------------------------------------
0000370C                          5108  *-----------------------------------------------------------
0000370C                          5109  
0000370C                          5110  op_ADD: 
0000370C                          5111  
0000370C                          5112  
0000370C                          5113    ** <EA> to Register
0000370C  203C A5A5A5A5           5114                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003712  223C 8167E123           5115                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003718  243C A5A5A5A5           5116                  move.l #$a5a5a5a5, d2
0000371E  7600                    5117                  move.l #$00000000, d3
00003720  7800                    5118                  move.l #$00000000, d4       * Cumulative data results
00003722  7A00                    5119                  move.l #$00000000, d5       * Cumulative flag results
00003724  7C1E                    5120                  move.l #$0000001E, d6       * Inner loop counter
00003726  7E1E                    5121                  move.l #$0000001E, d7       * Outer loop counter
00003728  207C 00000100           5122                  move.l #$00000100, a0       * Address for memory EA operations
0000372E                          5123  
0000372E                          5124  
0000372E                          5125  ADD_OUTER1:    
0000372E                          5126   
0000372E                          5127      * BYTE     
0000372E  2081                    5128                  move.l d1 , (a0)
00003730  D010                    5129                  add.b (a0) , d0             
00003732  40C3                    5130                  move SR , d3      
00003734  0283 0000001F           5131                  andi.l #$1F , d3            * Isolate flags 
0000373A  DA83                    5132                  add.l d3 , d5               * Copy flag results into accumulator
0000373C  D880                    5133                  add.l d0 , d4               * Copy data results into data accumulator   
0000373E                          5134   
0000373E                          5135      * WORD      
0000373E  2081                    5136                  move.l d1 , (a0)
00003740  D050                    5137                  add.w (a0) , d0             
00003742  40C3                    5138                  move SR , d3      
00003744  0283 0000000C           5139                  andi.l #$0C , d3            * Isolate flags 
0000374A  DA83                    5140                  add.l d3 , d5               * Copy flag results into accumulator
0000374C  D880                    5141                  add.l d0 , d4               * Copy data results into data accumulator   
0000374E                          5142   
0000374E                          5143      * LONG      
0000374E  2081                    5144                  move.l d1 , (a0)
00003750  D090                    5145                  add.l (a0) , d0             
00003752  40C3                    5146                  move SR , d3      
00003754  0283 0000000F           5147                  andi.l #$0F , d3            * Isolate flags 
0000375A  DA83                    5148                  add.l d3 , d5               * Copy flag results into accumulator
0000375C  D880                    5149                  add.l d0 , d4               * Copy data results into data accumulator   
0000375E                          5150                  
0000375E                          5151                  
0000375E  E299                    5152                  ror.l #$1 , d1
00003760  51CE FFCC               5153                  dbf d6 , ADD_OUTER1
00003764  E29A                    5154                  ror.l #$1 , d2
00003766  223C 8167E123           5155                  move.l #$8167E123, d1       * Initial Data-Y
0000376C  7C1E                    5156                  move.l #$0000001E, d6       * Inner loop counter
0000376E  51CF FFBE               5157                  dbf d7 , ADD_OUTER1
00003772                          5158                  
00003772  0C84 23ED428F           5159                  cmpi.l #$23ED428F , d4      * Check the data results
00003778  66FE                    5160                  bne *                
0000377A  0C85 00004C96           5161                  cmpi.l #$00004C96 , d5      * Check the Flag results
00003780  66FE                    5162                  bne *                
00003782                          5163                     
00003782                          5164                     
00003782                          5165    ** Register to <EA>
00003782  203C 86738374           5166                  move.l #$86738374, d0       * Initial Data-X  Inner loop
00003788  223C FC55F2FE           5167                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
0000378E  243C 86738374           5168                  move.l #$86738374, d2
00003794  7600                    5169                  move.l #$00000000, d3
00003796  7800                    5170                  move.l #$00000000, d4       * Cumulative data results
00003798  7A00                    5171                  move.l #$00000000, d5       * Cumulative flag results
0000379A  7C1E                    5172                  move.l #$0000001E, d6       * Inner loop counter
0000379C  7E1D                    5173                  move.l #$0000001D, d7       * Outer loop counter
0000379E  207C 00000100           5174                  move.l #$00000100, a0       * Address for memory EA operations
000037A4                          5175  
000037A4                          5176  
000037A4                          5177  ADD_OUTER2:    
000037A4                          5178   
000037A4                          5179      * BYTE     
000037A4  2080                    5180                  move.l d0 , (a0)
000037A6  D310                    5181                  add.b d1 , (a0)             
000037A8  40C3                    5182                  move SR , d3      
000037AA  0283 0000000C           5183                  andi.l #$0C , d3            * Isolate flags 
000037B0  DA83                    5184                  add.l d3 , d5               * Copy flag results into accumulator
000037B2  D890                    5185                  add.l (a0) , d4             * Copy data results into data accumulator   
000037B4                          5186   
000037B4                          5187      * WORD      
000037B4  2080                    5188                  move.l d0 , (a0)
000037B6  D350                    5189                  add.w d1 , (a0)  
000037B8  40C3                    5190                  move SR , d3      
000037BA  0283 0000001F           5191                  andi.l #$1F , d3            * Isolate flags 
000037C0  DA83                    5192                  add.l d3 , d5               * Copy flag results into accumulator
000037C2  D890                    5193                  add.l (a0) , d4             * Copy data results into data accumulator   
000037C4                          5194   
000037C4                          5195      * LONG      
000037C4  2080                    5196                  move.l d0 , (a0)
000037C6  D390                    5197                  add.l d1 , (a0)  
000037C8  40C3                    5198                  move SR , d3      
000037CA  0283 0000000F           5199                  andi.l #$0F , d3            * Isolate flags 
000037D0  DA83                    5200                  add.l d3 , d5               * Copy flag results into accumulator
000037D2  D890                    5201                  add.l (a0) , d4             * Copy data results into data accumulator   
000037D4                          5202                  
000037D4                          5203                  
000037D4  E299                    5204                  ror.l #$1 , d1
000037D6  51CE FFCC               5205                  dbf d6 , ADD_OUTER2
000037DA  E29A                    5206                  ror.l #$1 , d2
000037DC  223C 8167E123           5207                  move.l #$8167E123, d1       * Initial Data-Y
000037E2  7C1E                    5208                  move.l #$0000001E, d6       * Inner loop counter
000037E4  51CF FFBE               5209                  dbf d7 , ADD_OUTER2
000037E8                          5210                  
000037E8  0C84 6701B884           5211                  cmpi.l #$6701B884 , d4      * Check the data results
000037EE  66FE                    5212                  bne *                
000037F0  0C85 00005467           5213                  cmpi.l #$00005467 , d5      * Check the Flag results
000037F6  66FE                    5214                  bne *                 
000037F8                          5215                     
000037F8  4E75                    5216                  rts
000037FA                          5217  
000037FA                          5218  *-----------------------------------------------------------
000037FA                          5219  *-----------------------------------------------------------
000037FA                          5220  * OPCODE : SUB
000037FA                          5221  *-----------------------------------------------------------
000037FA                          5222  *-----------------------------------------------------------
000037FA                          5223  
000037FA                          5224  op_SUB: 
000037FA                          5225  
000037FA                          5226    ** <EA> to Register
000037FA  203C A5A5A5A5           5227                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003800  223C 8167E123           5228                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003806  243C A5A5A5A5           5229                  move.l #$a5a5a5a5, d2
0000380C  7600                    5230                  move.l #$00000000, d3
0000380E  7800                    5231                  move.l #$00000000, d4       * Cumulative data results
00003810  7A00                    5232                  move.l #$00000000, d5       * Cumulative flag results
00003812  7C1E                    5233                  move.l #$0000001E, d6       * Inner loop counter
00003814  7E1E                    5234                  move.l #$0000001E, d7       * Outer loop counter
00003816  207C 00000100           5235                  move.l #$00000100, a0       * Address for memory EA operations
0000381C                          5236  
0000381C                          5237  
0000381C                          5238  SUB_OUTER1:    
0000381C                          5239   
0000381C                          5240      * BYTE     
0000381C  2081                    5241                  move.l d1 , (a0)
0000381E  9010                    5242                  sub.b (a0) , d0             
00003820  40C3                    5243                  move SR , d3      
00003822  0283 0000001F           5244                  andi.l #$1F , d3            * Isolate flags 
00003828  DA83                    5245                  add.l d3 , d5               * Copy flag results into accumulator
0000382A  D880                    5246                  add.l d0 , d4               * Copy data results into data accumulator   
0000382C                          5247   
0000382C                          5248      * WORD      
0000382C  2081                    5249                  move.l d1 , (a0)
0000382E  9050                    5250                  sub.w (a0) , d0             
00003830  40C3                    5251                  move SR , d3      
00003832  0283 0000000C           5252                  andi.l #$0C , d3            * Isolate flags 
00003838  DA83                    5253                  add.l d3 , d5               * Copy flag results into accumulator
0000383A  D880                    5254                  add.l d0 , d4               * Copy data results into data accumulator   
0000383C                          5255   
0000383C                          5256      * LONG      
0000383C  2081                    5257                  move.l d1 , (a0)
0000383E  9090                    5258                  sub.l (a0) , d0             
00003840  40C3                    5259                  move SR , d3      
00003842  0283 0000000F           5260                  andi.l #$0F , d3            * Isolate flags 
00003848  DA83                    5261                  add.l d3 , d5               * Copy flag results into accumulator
0000384A  D880                    5262                  add.l d0 , d4               * Copy data results into data accumulator   
0000384C                          5263                  
0000384C                          5264                  
0000384C  E299                    5265                  ror.l #$1 , d1
0000384E  51CE FFCC               5266                  dbf d6 , SUB_OUTER1
00003852  E29A                    5267                  ror.l #$1 , d2
00003854  223C 8167E123           5268                  move.l #$8167E123, d1       * Initial Data-Y
0000385A  7C1E                    5269                  move.l #$0000001E, d6       * Inner loop counter
0000385C  51CF FFBE               5270                  dbf d7 , SUB_OUTER1
00003860                          5271                  
00003860  0C84 1A8D14CF           5272                  cmpi.l #$1A8D14CF , d4      * Check the data results
00003866  66FE                    5273                  bne *                
00003868  0C85 00004FC4           5274                  cmpi.l #$00004FC4 , d5      * Check the Flag results
0000386E  66FE                    5275                  bne *                
00003870                          5276                     
00003870                          5277                     
00003870                          5278    ** Register to <EA>
00003870  203C 86738374           5279                  move.l #$86738374, d0       * Initial Data-X  Inner loop
00003876  223C FC55F2FE           5280                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
0000387C  243C 86738374           5281                  move.l #$86738374, d2
00003882  7600                    5282                  move.l #$00000000, d3
00003884  7800                    5283                  move.l #$00000000, d4       * Cumulative data results
00003886  7A00                    5284                  move.l #$00000000, d5       * Cumulative flag results
00003888  7C1E                    5285                  move.l #$0000001E, d6       * Inner loop counter
0000388A  7E1D                    5286                  move.l #$0000001D, d7       * Outer loop counter
0000388C  207C 00000100           5287                  move.l #$00000100, a0       * Address for memory EA operations
00003892                          5288  
00003892                          5289  
00003892                          5290  SUB_OUTER2:    
00003892                          5291   
00003892                          5292      * BYTE     
00003892  2080                    5293                  move.l d0 , (a0)
00003894  9310                    5294                  sub.b d1 , (a0)             
00003896  40C3                    5295                  move SR , d3      
00003898  0283 0000000C           5296                  andi.l #$0C , d3            * Isolate flags 
0000389E  DA83                    5297                  add.l d3 , d5               * Copy flag results into accumulator
000038A0  D890                    5298                  add.l (a0) , d4             * Copy data results into data accumulator   
000038A2                          5299   
000038A2                          5300      * WORD      
000038A2  2080                    5301                  move.l d0 , (a0)
000038A4  9350                    5302                  sub.w d1 , (a0)  
000038A6  40C3                    5303                  move SR , d3      
000038A8  0283 0000001F           5304                  andi.l #$1F , d3            * Isolate flags 
000038AE  DA83                    5305                  add.l d3 , d5               * Copy flag results into accumulator
000038B0  D890                    5306                  add.l (a0) , d4             * Copy data results into data accumulator   
000038B2                          5307   
000038B2                          5308      * LONG      
000038B2  2080                    5309                  move.l d0 , (a0)
000038B4  9390                    5310                  sub.l d1 , (a0)  
000038B6  40C3                    5311                  move SR , d3      
000038B8  0283 0000000F           5312                  andi.l #$0F , d3            * Isolate flags 
000038BE  DA83                    5313                  add.l d3 , d5               * Copy flag results into accumulator
000038C0  D890                    5314                  add.l (a0) , d4             * Copy data results into data accumulator   
000038C2                          5315                  
000038C2                          5316                  
000038C2  E299                    5317                  ror.l #$1 , d1
000038C4  51CE FFCC               5318                  dbf d6 , SUB_OUTER2
000038C8  E29A                    5319                  ror.l #$1 , d2
000038CA  223C 8167E123           5320                  move.l #$8167E123, d1       * Initial Data-Y
000038D0  7C1E                    5321                  move.l #$0000001E, d6       * Inner loop counter
000038D2  51CF FFBE               5322                  dbf d7 , SUB_OUTER2
000038D6                          5323                  
000038D6  0C84 36D38BEC           5324                  cmpi.l #$36D38BEC , d4      * Check the data results
000038DC  66FE                    5325                  bne *                
000038DE  0C85 000045A5           5326                  cmpi.l #$000045A5 , d5      * Check the Flag results
000038E4  66FE                    5327                  bne *                 
000038E6                          5328                     
000038E6                          5329  
000038E6                          5330  
000038E6                          5331  
000038E6  4E75                    5332                  rts
000038E8                          5333  
000038E8                          5334  
000038E8                          5335  
000038E8                          5336  *-----------------------------------------------------------
000038E8                          5337  *-----------------------------------------------------------
000038E8                          5338  * OPCODE : ADDA
000038E8                          5339  *-----------------------------------------------------------
000038E8                          5340  *-----------------------------------------------------------
000038E8                          5341  
000038E8                          5342  op_ADDA: 
000038E8                          5343  
000038E8                          5344    ** <EA> to Register
000038E8  203C A5A5A5A5           5345                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
000038EE  223C 8167E123           5346                  move.l #$8167E123, d1       
000038F4  243C A5A5A5A5           5347                  move.l #$a5a5a5a5, d2
000038FA  7600                    5348                  move.l #$00000000, d3
000038FC  7800                    5349                  move.l #$00000000, d4       * Cumulative data results
000038FE  7A00                    5350                  move.l #$00000000, d5       * Cumulative flag results
00003900  7C1E                    5351                  move.l #$0000001E, d6       * Inner loop counter
00003902  7E1E                    5352                  move.l #$0000001E, d7       * Outer loop counter
00003904  207C 00000100           5353                  move.l #$00000100, a0       * Address for memory EA operations
0000390A  227C 8167E123           5354                  move.l #$8167E123, a1       * Initial Data-Y  Outer loop
00003910                          5355  
00003910                          5356  ADDA_OUTER1:    
00003910                          5357  
00003910                          5358      * WORD      
00003910                          5359                  *move.l d1 , (a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
00003910                          5360                  *adda.w (a0) , a1             
00003910                          5361                  *add.l a1 , d4               * Copy data results into data accumulator   
00003910                          5362   
00003910                          5363      * LONG      
00003910  2081                    5364                  move.l d1 , (a0)
00003912  D3D0                    5365                  adda.l (a0) , a1             
00003914  D889                    5366                  add.l a1 , d4               * Copy data results into data accumulator   
00003916                          5367                  
00003916  E299                    5368                  ror.l #$1 , d1
00003918  51CE FFF6               5369                  dbf d6 , ADDA_OUTER1
0000391C  E299                    5370                  ror.l #$1 , d1
0000391E  2241                    5371                  move.l d1 , a1
00003920  223C 8167E123           5372                  move.l #$8167E123, d1       * Initial Data-Y
00003926  7C1E                    5373                  move.l #$0000001E, d6       * Inner loop counter
00003928  51CF FFE6               5374                  dbf d7 , ADDA_OUTER1
0000392C                          5375                  
0000392C  0C84 AC04DB4C           5376                  cmpi.l #$AC04DB4C , d4      * Check the data results
00003932  66FE                    5377                  bne *                
00003934                          5378                
00003934                          5379                   
00003934  4E75                    5380                  rts
00003936                          5381  
00003936                          5382  
00003936                          5383  *-----------------------------------------------------------
00003936                          5384  *-----------------------------------------------------------
00003936                          5385  * OPCODE : SUBA
00003936                          5386  *-----------------------------------------------------------
00003936                          5387  *-----------------------------------------------------------
00003936                          5388  
00003936                          5389  op_SUBA: 
00003936                          5390  
00003936                          5391    ** <EA> to Register
00003936  203C A5A5A5A5           5392                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
0000393C  223C 8167E123           5393                  move.l #$8167E123, d1       
00003942  243C A5A5A5A5           5394                  move.l #$a5a5a5a5, d2
00003948  7600                    5395                  move.l #$00000000, d3
0000394A  7800                    5396                  move.l #$00000000, d4       * Cumulative data results
0000394C  7A00                    5397                  move.l #$00000000, d5       * Cumulative flag results
0000394E  7C1E                    5398                  move.l #$0000001E, d6       * Inner loop counter
00003950  7E1E                    5399                  move.l #$0000001E, d7       * Outer loop counter
00003952  207C 00000100           5400                  move.l #$00000100, a0       * Address for memory EA operations
00003958  227C 8167E123           5401                  move.l #$8167E123, a1       * Initial Data-Y  Outer loop
0000395E                          5402  
0000395E                          5403  SUBA_OUTER1:    
0000395E                          5404  
0000395E                          5405      * WORD      
0000395E                          5406                  *move.l d1 , (a0) * !!! Easy68K is not altering the whole 32-bits of the address register
0000395E                          5407                  *suba.w (a0) , a1             
0000395E                          5408                  *add.l a1 , d4               * Copy data results into data accumulator   
0000395E                          5409   
0000395E                          5410      * LONG      
0000395E  2081                    5411                  move.l d1 , (a0)
00003960  93D0                    5412                  suba.l (a0) , a1             
00003962  D889                    5413                  add.l a1 , d4               * Copy data results into data accumulator   
00003964                          5414                  
00003964  E299                    5415                  ror.l #$1 , d1
00003966  51CE FFF6               5416                  dbf d6 , SUBA_OUTER1
0000396A  E299                    5417                  ror.l #$1 , d1
0000396C  2241                    5418                  move.l d1 , a1
0000396E  223C 8167E123           5419                  move.l #$8167E123, d1       * Initial Data-Y
00003974  7C1E                    5420                  move.l #$0000001E, d6       * Inner loop counter
00003976  51CF FFE6               5421                  dbf d7 , SUBA_OUTER1
0000397A                          5422                  
0000397A  0C84 E1E36D7A           5423                  cmpi.l #$E1E36D7A , d4      * Check the data results
00003980  66FE                    5424                  bne *                
00003982                          5425                
00003982                          5426                   
00003982  4E75                    5427                  rts
00003984                          5428  
00003984                          5429  
00003984                          5430  
00003984                          5431  *-----------------------------------------------------------
00003984                          5432  *-----------------------------------------------------------
00003984                          5433  * OPCODE : ADDX
00003984                          5434  *-----------------------------------------------------------
00003984                          5435  *-----------------------------------------------------------
00003984                          5436  
00003984                          5437  op_ADDX: 
00003984                          5438  
00003984                          5439  
00003984                          5440    ** Register to Register
00003984  203C A5A5A5A5           5441                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
0000398A  223C 8167E123           5442                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003990  243C A5A5A5A5           5443                  move.l #$a5a5a5a5, d2
00003996  7600                    5444                  move.l #$00000000, d3
00003998  7800                    5445                  move.l #$00000000, d4       * Cumulative data results
0000399A  7A00                    5446                  move.l #$00000000, d5       * Cumulative flag results
0000399C  7C1E                    5447                  move.l #$0000001E, d6       * Inner loop counter
0000399E  7E1E                    5448                  move.l #$0000001E, d7       * Outer loop counter
000039A0  207C 00000100           5449                  move.l #$00000100, a0       * Address for memory EA operations
000039A6                          5450  
000039A6                          5451  
000039A6                          5452  ADDX_OUTER1:    
000039A6                          5453   
000039A6                          5454      * BYTE    
000039A6  2002                    5455                  move.l d2 , d0
000039A8  D101                    5456                  addx.b d1 , d0             
000039AA  40C3                    5457                  move SR , d3      
000039AC  0283 0000001F           5458                  andi.l #$1F , d3            * Isolate flags 
000039B2  DA83                    5459                  add.l d3 , d5               * Copy flag results into accumulator
000039B4  D880                    5460                  add.l d0 , d4               * Copy data results into data accumulator   
000039B6                          5461   
000039B6                          5462      * WORD      
000039B6  2002                    5463                  move.l d2 , d0
000039B8  D141                    5464                  addx.w d1 , d0             
000039BA  40C3                    5465                  move SR , d3      
000039BC  0283 0000001F           5466                  andi.l #$1F , d3            * Isolate flags 
000039C2  DA83                    5467                  add.l d3 , d5               * Copy flag results into accumulator
000039C4  D880                    5468                  add.l d0 , d4               * Copy data results into data accumulator   
000039C6                          5469   
000039C6                          5470      * LONG      
000039C6  2002                    5471                  move.l d2 , d0
000039C8  D181                    5472                  addx.l d1 , d0             
000039CA  40C3                    5473                  move SR , d3      
000039CC  0283 0000001F           5474                  andi.l #$1F , d3            * Isolate flags 
000039D2  DA83                    5475                  add.l d3 , d5               * Copy flag results into accumulator
000039D4  D880                    5476                  add.l d0 , d4               * Copy data results into data accumulator   
000039D6                          5477                  
000039D6  E299                    5478                  ror.l #$1 , d1
000039D8  51CE FFCC               5479                  dbf d6 , ADDX_OUTER1
000039DC  E29A                    5480                  ror.l #$1 , d2
000039DE  223C 8167E123           5481                  move.l #$8167E123, d1       * Initial Data-Y
000039E4  7C1E                    5482                  move.l #$0000001E, d6       * Inner loop counter
000039E6  51CF FFBE               5483                  dbf d7 , ADDX_OUTER1
000039EA                          5484                  
000039EA  0C84 4E96A4D9           5485                  cmpi.l #$4E96A4D9 , d4      * Check the data results
000039F0  66FE                    5486                  bne *                
000039F2  0C85 000085CD           5487                  cmpi.l #$000085CD , d5      * Check the Flag results
000039F8  66FE                    5488                  bne *                
000039FA                          5489                     
000039FA                          5490      
000039FA                          5491      
000039FA                          5492      * -(An) , -(An)
000039FA                          5493      
000039FA  7000                    5494                  move.l #$00000000, d0       * BYTE Flag Results Accumulator     
000039FC  7200                    5495                  move.l #$00000000, d1        
000039FE  7400                    5496                  move.l #$00000000, d2      
00003A00  207C 00000100           5497                  move.l #$00000100, a0       * Address for Data-X
00003A06  227C 00000200           5498                  move.l #$00000200, a1       * Address for Data-Y
00003A0C  20FC 11FF5580           5499                  move.l #$11FF5580 , (a0)+   * Populate test data
00003A12  20FC 1111FFFF           5500                  move.l #$1111FFFF , (a0)+   * Populate test data
00003A18  20FC 33333333           5501                  move.l #$33333333 , (a0)+   * Populate test data
00003A1E  20FC 44444444           5502                  move.l #$44444444 , (a0)+   * Populate test data
00003A24  22FC 80FF337F           5503                  move.l #$80FF337F , (a1)+   * Populate test data
00003A2A  22FC FFFF1111           5504                  move.l #$FFFF1111 , (a1)+   * Populate test data
00003A30  22FC 33333333           5505                  move.l #$33333333 , (a1)+   * Populate test data
00003A36  22FC 44444444           5506                  move.l #$44444444 , (a1)+   * Populate test data
00003A3C                          5507                  
00003A3C                          5508  
00003A3C  7C0F                    5509                  move.l #$0000000F, d6       * Loop counter
00003A3E                          5510                  
00003A3E  D308                    5511  ADDX_LOOP3:     addx.b -(a0) , -(a1)
00003A40  40C3                    5512                  move SR , d3      
00003A42  0283 0000000F           5513                  andi.l #$0F , d3            * Isolate flags 
00003A48  D083                    5514                  add.l d3 , d0               * Copy flag results into accumulator    
00003A4A  D211                    5515                  add.b (a1) , d1     
00003A4C  51CE FFF0               5516                  dbf d6 , ADDX_LOOP3
00003A50                          5517  
00003A50                          5518  
00003A50  207C 00000110           5519                  move.l #$00000110, a0       * Address for Data-X
00003A56  227C 00000210           5520                  move.l #$00000210, a1       * Address for Data-Y
00003A5C  7C07                    5521                  move.l #$00000007, d6       * Loop counter
00003A5E                          5522                  
00003A5E  D348                    5523  ADDX_LOOP4:     addx.w -(a0) , -(a1)
00003A60  40C3                    5524                  move SR , d3      
00003A62  0283 0000000F           5525                  andi.l #$0F , d3            * Isolate flags 
00003A68  D083                    5526                  add.l d3 , d0               * Copy flag results into accumulator    
00003A6A  D251                    5527                  add.w (a1) , d1     
00003A6C  51CE FFF0               5528                  dbf d6 , ADDX_LOOP4
00003A70                          5529  
00003A70                          5530  
00003A70  207C 00000110           5531                  move.l #$00000110, a0       * Address for Data-X
00003A76  227C 00000210           5532                  move.l #$00000210, a1       * Address for Data-Y
00003A7C  7C03                    5533                  move.l #$00000003, d6       * Loop counter
00003A7E                          5534                  
00003A7E  D388                    5535  ADDX_LOOP5:     addx.l -(a0) , -(a1)
00003A80  40C3                    5536                  move SR , d3      
00003A82  0283 0000000F           5537                  andi.l #$0F , d3            * Isolate flags 
00003A88  D083                    5538                  add.l d3 , d0               * Copy flag results into accumulator    
00003A8A  D291                    5539                  add.l (a1) , d1     
00003A8C  51CE FFF0               5540                  dbf d6 , ADDX_LOOP5
00003A90                          5541  
00003A90                          5542  
00003A90  0C80 00000095           5543                  cmpi.l #$00000095 , d0      * Check the flag results
00003A96  66FE                    5544                  bne *                
00003A98  0C81 C812A682           5545                  cmpi.l #$C812A682 , d1      * Check the data results 
00003A9E  66FE                    5546                  bne *                
00003AA0                          5547   
00003AA0  4E75                    5548                  rts
00003AA2                          5549  
00003AA2                          5550  
00003AA2                          5551  
00003AA2                          5552  
00003AA2                          5553  *-----------------------------------------------------------
00003AA2                          5554  *-----------------------------------------------------------
00003AA2                          5555  * OPCODE : SUBX
00003AA2                          5556  *-----------------------------------------------------------
00003AA2                          5557  *-----------------------------------------------------------
00003AA2                          5558  
00003AA2                          5559  op_SUBX: 
00003AA2                          5560  
00003AA2                          5561  
00003AA2                          5562    ** Register to Register
00003AA2  203C A5A5A5A5           5563                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003AA8  223C 8167E123           5564                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003AAE  243C A5A5A5A5           5565                  move.l #$a5a5a5a5, d2
00003AB4  7600                    5566                  move.l #$00000000, d3
00003AB6  7800                    5567                  move.l #$00000000, d4       * Cumulative data results
00003AB8  7A00                    5568                  move.l #$00000000, d5       * Cumulative flag results
00003ABA  7C1E                    5569                  move.l #$0000001E, d6       * Inner loop counter
00003ABC  7E1E                    5570                  move.l #$0000001E, d7       * Outer loop counter
00003ABE  207C 00000100           5571                  move.l #$00000100, a0       * Address for memory EA operations
00003AC4                          5572  
00003AC4                          5573  
00003AC4                          5574  SUBX_OUTER1:    
00003AC4                          5575   
00003AC4                          5576      * BYTE    
00003AC4  2002                    5577                  move.l d2 , d0
00003AC6  9101                    5578                  subx.b d1 , d0             
00003AC8  40C3                    5579                  move SR , d3      
00003ACA  0283 0000001F           5580                  andi.l #$1F , d3            * Isolate flags 
00003AD0  DA83                    5581                  add.l d3 , d5               * Copy flag results into accumulator
00003AD2  D880                    5582                  add.l d0 , d4               * Copy data results into data accumulator   
00003AD4                          5583   
00003AD4                          5584      * WORD      
00003AD4  2002                    5585                  move.l d2 , d0
00003AD6  9141                    5586                  subx.w d1 , d0             
00003AD8  40C3                    5587                  move SR , d3      
00003ADA  0283 0000001F           5588                  andi.l #$1F , d3            * Isolate flags 
00003AE0  DA83                    5589                  add.l d3 , d5               * Copy flag results into accumulator
00003AE2  D880                    5590                  add.l d0 , d4               * Copy data results into data accumulator   
00003AE4                          5591   
00003AE4                          5592      * LONG      
00003AE4  2002                    5593                  move.l d2 , d0
00003AE6  9181                    5594                  subx.l d1 , d0             
00003AE8  40C3                    5595                  move SR , d3      
00003AEA  0283 0000001F           5596                  andi.l #$1F , d3            * Isolate flags 
00003AF0  DA83                    5597                  add.l d3 , d5               * Copy flag results into accumulator
00003AF2  D880                    5598                  add.l d0 , d4               * Copy data results into data accumulator   
00003AF4                          5599                  
00003AF4  E299                    5600                  ror.l #$1 , d1
00003AF6  51CE FFCC               5601                  dbf d6 , SUBX_OUTER1
00003AFA  E29A                    5602                  ror.l #$1 , d2
00003AFC  223C 8167E123           5603                  move.l #$8167E123, d1       * Initial Data-Y
00003B02  7C1E                    5604                  move.l #$0000001E, d6       * Inner loop counter
00003B04  51CF FFBE               5605                  dbf d7 , SUBX_OUTER1
00003B08                          5606                  
00003B08  0C84 FCAA913E           5607                  cmpi.l #$FCAA913E , d4      * Check the data results
00003B0E  66FE                    5608                  bne *                
00003B10  0C85 00007E89           5609                  cmpi.l #$00007E89 , d5      * Check the Flag results
00003B16  66FE                    5610                  bne *                
00003B18                          5611                     
00003B18                          5612      
00003B18                          5613      
00003B18                          5614      * -(An) , -(An)
00003B18                          5615      
00003B18  7000                    5616                  move.l #$00000000, d0       * BYTE Flag Results Accumulator     
00003B1A  7200                    5617                  move.l #$00000000, d1        
00003B1C  7400                    5618                  move.l #$00000000, d2      
00003B1E  207C 00000100           5619                  move.l #$00000100, a0       * Address for Data-X
00003B24  227C 00000200           5620                  move.l #$00000200, a1       * Address for Data-Y
00003B2A  20FC 11FF5580           5621                  move.l #$11FF5580 , (a0)+   * Populate test data
00003B30  20FC 1111FFFF           5622                  move.l #$1111FFFF , (a0)+   * Populate test data
00003B36  20FC 80FF337F           5623                  move.l #$80FF337F , (a0)+   * Populate test data
00003B3C  20FC 44444444           5624                  move.l #$44444444 , (a0)+   * Populate test data
00003B42  22FC 80FF337F           5625                  move.l #$80FF337F , (a1)+   * Populate test data
00003B48  22FC 1111FFFF           5626                  move.l #$1111FFFF , (a1)+   * Populate test data
00003B4E  22FC 33333333           5627                  move.l #$33333333 , (a1)+   * Populate test data
00003B54  22FC 5580EECC           5628                  move.l #$5580EECC , (a1)+   * Populate test data
00003B5A                          5629                  
00003B5A                          5630  
00003B5A  7C0F                    5631                  move.l #$0000000F, d6       * Loop counter
00003B5C                          5632                  
00003B5C  9308                    5633  SUBX_LOOP3:     subx.b -(a0) , -(a1)
00003B5E  40C3                    5634                  move SR , d3      
00003B60  0283 0000000F           5635                  andi.l #$0F , d3            * Isolate flags 
00003B66  D083                    5636                  add.l d3 , d0               * Copy flag results into accumulator    
00003B68  D211                    5637                  add.b (a1) , d1     
00003B6A  51CE FFF0               5638                  dbf d6 , SUBX_LOOP3
00003B6E                          5639  
00003B6E                          5640  
00003B6E  207C 00000110           5641                  move.l #$00000110, a0       * Address for Data-X
00003B74  227C 00000210           5642                  move.l #$00000210, a1       * Address for Data-Y
00003B7A  7C07                    5643                  move.l #$00000007, d6       * Loop counter
00003B7C                          5644                  
00003B7C  9348                    5645  SUBX_LOOP4:     subx.w -(a0) , -(a1)
00003B7E  40C3                    5646                  move SR , d3      
00003B80  0283 0000000F           5647                  andi.l #$0F , d3            * Isolate flags 
00003B86  D083                    5648                  add.l d3 , d0               * Copy flag results into accumulator    
00003B88  D251                    5649                  add.w (a1) , d1     
00003B8A  51CE FFF0               5650                  dbf d6 , SUBX_LOOP4
00003B8E                          5651  
00003B8E                          5652  
00003B8E  207C 00000110           5653                  move.l #$00000110, a0       * Address for Data-X
00003B94  227C 00000210           5654                  move.l #$00000210, a1       * Address for Data-Y
00003B9A  7C03                    5655                  move.l #$00000003, d6       * Loop counter
00003B9C                          5656                  
00003B9C  9388                    5657  SUBX_LOOP5:     subx.l -(a0) , -(a1)
00003B9E  40C3                    5658                  move SR , d3      
00003BA0  0283 0000000F           5659                  andi.l #$0F , d3            * Isolate flags 
00003BA6  D083                    5660                  add.l d3 , d0               * Copy flag results into accumulator    
00003BA8  D291                    5661                  add.l (a1) , d1     
00003BAA  51CE FFF0               5662                  dbf d6 , SUBX_LOOP5
00003BAE                          5663  
00003BAE                          5664  
00003BAE  0C80 000000B1           5665                  cmpi.l #$000000B1 , d0      * Check the flag results
00003BB4  66FE                    5666                  bne *                
00003BB6  0C81 62C6F417           5667                  cmpi.l #$62C6F417 , d1      * Check the data results 
00003BBC  66FE                    5668                  bne *                
00003BBE                          5669   
00003BBE  4E75                    5670                  rts
00003BC0                          5671  
00003BC0                          5672  
00003BC0                          5673  *-----------------------------------------------------------
00003BC0                          5674  *-----------------------------------------------------------
00003BC0                          5675  * OPCODE : MULU
00003BC0                          5676  *-----------------------------------------------------------
00003BC0                          5677  *-----------------------------------------------------------
00003BC0                          5678  
00003BC0                          5679  op_MULU:     
00003BC0                          5680  
00003BC0  203C FE805501           5681                  move.l #$FE805501, d0        * Initial 
00003BC6  223C 5697EDB6           5682                  move.l #$5697EDB6, d1        * Initial Y
00003BCC  243C FE805501           5683                  move.l #$FE805501, d2
00003BD2  7600                    5684                  move.l #$00000000, d3
00003BD4  7800                    5685                  move.l #$00000000, d4        * Cumulative data results
00003BD6  7A00                    5686                  move.l #$00000000, d5       * Cumulative flag results
00003BD8  7C0E                    5687                  move.l #$0000000E, d6       * Inner loop counter
00003BDA  7E0E                    5688                  move.l #$0000000E, d7       * Outer loop counter
00003BDC                          5689  
00003BDC                          5690  
00003BDC  C0C1                    5691  MULU_OUTER1:    mulu d1  , d0             
00003BDE  40C3                    5692                  move SR , d3      
00003BE0  0283 0000000C           5693                  andi.l #$0C , d3            * Isolate flags 
00003BE6  DA83                    5694                  add.l d3 , d5               * Copy flag results into accumulator
00003BE8  D880                    5695                  add.l d0 , d4               * Copy data results into data accumulator   
00003BEA  E299                    5696                  ror.l #$1 , d1
00003BEC                          5697  
00003BEC  51CE FFEE               5698                  dbf d6 , MULU_OUTER1
00003BF0  E29A                    5699                  ror.l #$1 , d2
00003BF2  2002                    5700                  move.l d2 , d0
00003BF4  7C0E                    5701                  move.l #$0000000E, d6       * Inner loop counter
00003BF6  51CF FFE4               5702                  dbf d7 , MULU_OUTER1
00003BFA                          5703                  
00003BFA  0C84 76FB988C           5704                  cmpi.l #$76FB988C , d4      * Check the data results
00003C00  66FE                    5705                  bne *                
00003C02                          5706                       
00003C02  0C85 00000170           5707                  cmpi.l #$00000170 , d5      * Check the Flag results
00003C08  66FE                    5708                  bne *                 
00003C0A                          5709            
00003C0A                          5710  
00003C0A  4E75                    5711                  rts
00003C0C                          5712                  
00003C0C                          5713                  
00003C0C                          5714  *-----------------------------------------------------------
00003C0C                          5715  *-----------------------------------------------------------
00003C0C                          5716  * OPCODE : MULS
00003C0C                          5717  *-----------------------------------------------------------
00003C0C                          5718  *-----------------------------------------------------------
00003C0C                          5719  
00003C0C                          5720  op_MULS:     
00003C0C                          5721  
00003C0C  203C FE805501           5722                  move.l #$FE805501, d0        * Initial 
00003C12  223C 5697EDB6           5723                  move.l #$5697EDB6, d1        * Initial Y
00003C18  243C FE805501           5724                  move.l #$FE805501, d2
00003C1E  7600                    5725                  move.l #$00000000, d3
00003C20  7800                    5726                  move.l #$00000000, d4        * Cumulative data results
00003C22  7A00                    5727                  move.l #$00000000, d5       * Cumulative flag results
00003C24  7C0E                    5728                  move.l #$0000000E, d6       * Inner loop counter
00003C26  7E0E                    5729                  move.l #$0000000E, d7       * Outer loop counter
00003C28                          5730  
00003C28                          5731  
00003C28  C1C1                    5732  MULS_OUTER1:    muls d1  , d0             
00003C2A  40C3                    5733                  move SR , d3      
00003C2C  0283 0000000C           5734                  andi.l #$0C , d3            * Isolate flags 
00003C32  DA83                    5735                  add.l d3 , d5               * Copy flag results into accumulator
00003C34  D880                    5736                  add.l d0 , d4               * Copy data results into data accumulator   
00003C36  E299                    5737                  ror.l #$1 , d1
00003C38                          5738  
00003C38  51CE FFEE               5739                  dbf d6 , MULS_OUTER1
00003C3C  E29A                    5740                  ror.l #$1 , d2
00003C3E  2002                    5741                  move.l d2 , d0
00003C40  7C0E                    5742                  move.l #$0000000E, d6       * Inner loop counter
00003C42  51CF FFE4               5743                  dbf d7 , MULS_OUTER1
00003C46                          5744                  
00003C46  0C84 D4E2988C           5745                  cmpi.l #$D4E2988C , d4      * Check the data results
00003C4C  66FE                    5746                  bne *                
00003C4E                          5747                       
00003C4E  0C85 000003E0           5748                  cmpi.l #$000003E0 , d5      * Check the Flag results
00003C54  66FE                    5749                  bne *                 
00003C56                          5750            
00003C56                          5751  
00003C56  4E75                    5752                  rts
00003C58                          5753                  
00003C58                          5754    
00003C58                          5755                  
00003C58                          5756  *-----------------------------------------------------------
00003C58                          5757  *-----------------------------------------------------------
00003C58                          5758  * OPCODE : EXG
00003C58                          5759  *-----------------------------------------------------------
00003C58                          5760  *-----------------------------------------------------------
00003C58                          5761  
00003C58                          5762  op_EXG:     
00003C58  223C D1D1D1D1           5763                  move.l #$d1d1d1d1, d1      
00003C5E  243C D2D2D2D2           5764                  move.l #$d2d2d2d2, d2      
00003C64  263C D3D3D3D3           5765                  move.l #$d3d3d3d3, d3      
00003C6A  227C A1A1A1A1           5766                  move.l #$a1a1a1a1, a1      
00003C70  247C A2A2A2A2           5767                  move.l #$a2a2a2a2, a2  
00003C76  267C A3A3A3A3           5768                  move.l #$a3a3a3a3, a3  
00003C7C                          5769                  
00003C7C  C342                    5770                  exg d1 , d2    
00003C7E  C34A                    5771                  exg a1 , a2    
00003C80  C78B                    5772                  exg d3 , a3  
00003C82                          5773  
00003C82  0C81 D2D2D2D2           5774                  cmpi.l #$d2d2d2d2 , d1      * Check the results
00003C88  66FE                    5775                  bne *                 
00003C8A  0C82 D1D1D1D1           5776                  cmpi.l #$d1d1d1d1 , d2    
00003C90  66FE                    5777                  bne *                 
00003C92  0C83 A3A3A3A3           5778                  cmpi.l #$a3a3a3a3 , d3    
00003C98  66FE                    5779                  bne *                 
00003C9A                          5780                  
00003C9A  2209                    5781                  move.l a1 , d1
00003C9C  240A                    5782                  move.l a2 , d2
00003C9E  260B                    5783                  move.l a3 , d3
00003CA0                          5784   
00003CA0  0C81 A2A2A2A2           5785                  cmpi.l #$a2a2a2a2 , d1    
00003CA6  66FE                    5786                  bne *                 
00003CA8  0C82 A1A1A1A1           5787                  cmpi.l #$a1a1a1a1 , d2     
00003CAE  66FE                    5788                  bne *                 
00003CB0  0C83 D3D3D3D3           5789                  cmpi.l #$d3d3d3d3 , d3     
00003CB6  66FE                    5790                  bne *                 
00003CB8                          5791   
00003CB8  4E75                    5792                  rts
00003CBA                          5793        
00003CBA                          5794                  
00003CBA                          5795  *-----------------------------------------------------------
00003CBA                          5796  *-----------------------------------------------------------
00003CBA                          5797  * OPCODE : ROx
00003CBA                          5798  *-----------------------------------------------------------
00003CBA                          5799  *-----------------------------------------------------------
00003CBA                          5800  
00003CBA                          5801      * Subroutine to check and accumulate the flags 
00003CBA  40C3                    5802  ROx_FLAGS:      move SR , d3      
00003CBC  0283 0000000F           5803                  andi.l #$0F , d3            * Isolate flags 
00003CC2  DA83                    5804                  add.l d3 , d5               * Copy flag results into accumulator
00003CC4  4E75                    5805                  rts
00003CC6                          5806      
00003CC6                          5807  op_ROx:   
00003CC6                          5808             
00003CC6                          5809      * Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
00003CC6                          5810      
00003CC6                          5811         * BYTE LEFT
00003CC6  203C 80018FF1           5812                  move.l #$80018FF1, d0   
00003CCC  7A00                    5813                  move.l #$00000000, d5  
00003CCE  7C11                    5814                  move.l #$00000011, d6  
00003CD0                          5815  ROx_LOOP1:
00003CD0  ED38                    5816                  rol.b d6 , d0       
00003CD2  4EB8 3CBA               5817                  jsr ROx_FLAGS
00003CD6  51CE FFF8               5818                  dbf d6 , ROx_LOOP1
00003CDA  0C80 80018FE3           5819                  cmpi.l #$80018FE3 , d0     
00003CE0  66FE                    5820                  bne *                 
00003CE2  0C85 0000006B           5821                  cmpi.l #$0000006B, d5     
00003CE8  66FE                    5822                  bne *      
00003CEA                          5823      
00003CEA                          5824         * BYTE RIGHT
00003CEA  203C 80018FF1           5825                  move.l #$80018FF1, d0   
00003CF0  7C12                    5826                  move.l #$00000012, d6  
00003CF2                          5827  ROx_LOOP2:
00003CF2  EC38                    5828                  ror.b d6 , d0       
00003CF4  4EB8 3CBA               5829                  jsr ROx_FLAGS
00003CF8  51CE FFF8               5830                  dbf d6 , ROx_LOOP2
00003CFC  0C80 80018F3E           5831                  cmpi.l #$80018F3E , d0     
00003D02  66FE                    5832                  bne *                 
00003D04  0C85 000000C5           5833                  cmpi.l #$000000C5, d5     
00003D0A  66FE                    5834                  bne *      
00003D0C                          5835  
00003D0C                          5836      
00003D0C                          5837         * WORD LEFT
00003D0C  203C 80018FF1           5838                  move.l #$80018FF1, d0   
00003D12  7C13                    5839                  move.l #$00000013, d6  
00003D14                          5840  ROx_LOOP3:
00003D14  ED78                    5841                  rol.w d6 , d0       
00003D16  4EB8 3CBA               5842                  jsr ROx_FLAGS
00003D1A  51CE FFF8               5843                  dbf d6 , ROx_LOOP3
00003D1E  0C80 800163FC           5844                  cmpi.l #$800163FC , d0     
00003D24  66FE                    5845                  bne *                 
00003D26  0C85 00000131           5846                  cmpi.l #$00000131, d5     
00003D2C  66FE                    5847                  bne *      
00003D2E                          5848      
00003D2E                          5849         * WORD RIGHT
00003D2E  203C 80018FF1           5850                  move.l #$80018FF1, d0   
00003D34  7C1E                    5851                  move.l #$0000001E, d6  
00003D36                          5852  ROx_LOOP4:
00003D36  EC78                    5853                  ror.w d6 , d0       
00003D38  4EB8 3CBA               5854                  jsr ROx_FLAGS
00003D3C  51CE FFF8               5855                  dbf d6 , ROx_LOOP4
00003D40  0C80 8001C7F8           5856                  cmpi.l #$8001C7F8 , d0     
00003D46  66FE                    5857                  bne *                 
00003D48  0C85 000001DB           5858                  cmpi.l #$000001DB, d5     
00003D4E  66FE                    5859                  bne *      
00003D50                          5860  
00003D50                          5861      
00003D50                          5862         * LONG LEFT
00003D50  203C 80018FF1           5863                  move.l #$80018FF1, d0   
00003D56  7C15                    5864                  move.l #$00000015, d6  
00003D58                          5865  ROx_LOOP5:
00003D58  EDB8                    5866                  rol.l d6 , d0       
00003D5A  4EB8 3CBA               5867                  jsr ROx_FLAGS
00003D5E  51CE FFF8               5868                  dbf d6 , ROx_LOOP5
00003D62  0C80 00C7F8C0           5869                  cmpi.l #$00C7F8C0 , d0     
00003D68  66FE                    5870                  bne *                 
00003D6A  0C85 0000021A           5871                  cmpi.l #$0000021A, d5     
00003D70  66FE                    5872                  bne *      
00003D72                          5873      
00003D72                          5874         * LONG RIGHT
00003D72  203C 80018FF1           5875                  move.l #$80018FF1, d0   
00003D78  7C16                    5876                  move.l #$00000016, d6  
00003D7A                          5877  ROx_LOOP6:
00003D7A  ECB8                    5878                  ror.l d6 , d0       
00003D7C  4EB8 3CBA               5879                  jsr ROx_FLAGS
00003D80  51CE FFF8               5880                  dbf d6 , ROx_LOOP6
00003D84  0C80 000C7F8C           5881                  cmpi.l #$000C7F8C , d0     
00003D8A  66FE                    5882                  bne *                 
00003D8C  0C85 00000250           5883                  cmpi.l #$00000250, d5     
00003D92  66FE                    5884                  bne *      
00003D94                          5885  
00003D94                          5886              
00003D94                          5887      * Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
00003D94                          5888      
00003D94  203C 80018FF1           5889                  move.l #$80018FF1, d0   
00003D9A  7A00                    5890                  move.l #$00000000, d5   
00003D9C                          5891  
00003D9C                          5892         * BYTE LEFT
00003D9C  E318                    5893                  rol.b #1 , d0       
00003D9E  4EB8 3CBA               5894                  jsr ROx_FLAGS
00003DA2  EB18                    5895                  rol.b #5 , d0      
00003DA4  4EB8 3CBA               5896                  jsr ROx_FLAGS
00003DA8  EF18                    5897                  rol.b #7 , d0   
00003DAA  4EB8 3CBA               5898                  jsr ROx_FLAGS
00003DAE  E118                    5899                  rol.b #8 , d0   
00003DB0  4EB8 3CBA               5900                  jsr ROx_FLAGS
00003DB4  0C80 80018F3E           5901                  cmpi.l #$80018F3E , d0     
00003DBA  66FE                    5902                  bne *                 
00003DBC  0C85 00000009           5903                  cmpi.l #$00000009, d5     
00003DC2  66FE                    5904                  bne *                 
00003DC4                          5905       
00003DC4                          5906         * BYTE RIGHT
00003DC4  E218                    5907                  ror.b #1 , d0       
00003DC6  4EB8 3CBA               5908                  jsr ROx_FLAGS
00003DCA  EA18                    5909                  ror.b #5 , d0      
00003DCC  4EB8 3CBA               5910                  jsr ROx_FLAGS
00003DD0  EE18                    5911                  ror.b #7 , d0   
00003DD2  4EB8 3CBA               5912                  jsr ROx_FLAGS
00003DD6  E018                    5913                  ror.b #8 , d0   
00003DD8  4EB8 3CBA               5914                  jsr ROx_FLAGS
00003DDC  0C80 80018FF1           5915                  cmpi.l #$80018FF1 , d0     
00003DE2  66FE                    5916                  bne *                 
00003DE4  0C85 00000024           5917                  cmpi.l #$00000024, d5     
00003DEA  66FE                    5918                  bne *                 
00003DEC                          5919       
00003DEC                          5920         * WORD LEFT
00003DEC  E358                    5921                  rol.w #1 , d0       
00003DEE  4EB8 3CBA               5922                  jsr ROx_FLAGS
00003DF2  EB58                    5923                  rol.w #5 , d0      
00003DF4  4EB8 3CBA               5924                  jsr ROx_FLAGS
00003DF8  EF58                    5925                  rol.w #7 , d0   
00003DFA  4EB8 3CBA               5926                  jsr ROx_FLAGS
00003DFE  E158                    5927                  rol.w #8 , d0   
00003E00  4EB8 3CBA               5928                  jsr ROx_FLAGS
00003E04  0C80 8001FE31           5929                  cmpi.l #$8001FE31 , d0     
00003E0A  66FE                    5930                  bne *                 
00003E0C  0C85 00000037           5931                  cmpi.l #$00000037, d5     
00003E12  66FE                    5932                  bne *                 
00003E14                          5933                    
00003E14                          5934         * WORD RIGHT
00003E14  E258                    5935                  ror.w #1 , d0       
00003E16  4EB8 3CBA               5936                  jsr ROx_FLAGS
00003E1A  EA58                    5937                  ror.w #5 , d0      
00003E1C  4EB8 3CBA               5938                  jsr ROx_FLAGS
00003E20  EE58                    5939                  ror.w #7 , d0   
00003E22  4EB8 3CBA               5940                  jsr ROx_FLAGS
00003E26  E058                    5941                  ror.w #8 , d0   
00003E28  4EB8 3CBA               5942                  jsr ROx_FLAGS
00003E2C  0C80 80018FF1           5943                  cmpi.l #$80018FF1 , d0     
00003E32  66FE                    5944                  bne *                 
00003E34  0C85 0000005B           5945                  cmpi.l #$0000005B, d5     
00003E3A  66FE                    5946                  bne *                 
00003E3C                          5947                 
00003E3C                          5948         * LONG LEFT
00003E3C  E398                    5949                  rol.l #1 , d0       
00003E3E  4EB8 3CBA               5950                  jsr ROx_FLAGS
00003E42  EB98                    5951                  rol.l #5 , d0      
00003E44  4EB8 3CBA               5952                  jsr ROx_FLAGS
00003E48  EF98                    5953                  rol.l #7 , d0   
00003E4A  4EB8 3CBA               5954                  jsr ROx_FLAGS
00003E4E  E198                    5955                  rol.l #8 , d0   
00003E50  4EB8 3CBA               5956                  jsr ROx_FLAGS
00003E54  0C80 FE300031           5957                  cmpi.l #$FE300031 , d0     
00003E5A  66FE                    5958                  bne *                 
00003E5C  0C85 00000065           5959                  cmpi.l #$00000065, d5     
00003E62  66FE                    5960                  bne *                 
00003E64                          5961                                  
00003E64                          5962         * LONG RIGHT
00003E64  E298                    5963                  ror.l #1 , d0       
00003E66  4EB8 3CBA               5964                  jsr ROx_FLAGS
00003E6A  EA98                    5965                  ror.l #5 , d0      
00003E6C  4EB8 3CBA               5966                  jsr ROx_FLAGS
00003E70  EE98                    5967                  ror.l #7 , d0   
00003E72  4EB8 3CBA               5968                  jsr ROx_FLAGS
00003E76  E098                    5969                  ror.l #8 , d0   
00003E78  4EB8 3CBA               5970                  jsr ROx_FLAGS
00003E7C  0C80 80018FF1           5971                  cmpi.l #$80018FF1 , d0     
00003E82  66FE                    5972                  bne *                 
00003E84  0C85 00000080           5973                  cmpi.l #$00000080, d5     
00003E8A  66FE                    5974                  bne *                 
00003E8C                          5975     
00003E8C                          5976              
00003E8C                          5977      * Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
00003E8C                          5978      
00003E8C  7A00                    5979                  move.l #$00000000, d5   
00003E8E  207C 00000100           5980                  move.l #$00000100, a0 
00003E94  30BC 8FF1               5981                  move.w #$8FF1 , (a0)
00003E98                          5982                  
00003E98                          5983         * WORD LEFT
00003E98  E7D0                    5984                  rol (a0)       
00003E9A  4EB8 3CBA               5985                  jsr ROx_FLAGS
00003E9E  E7D0                    5986                  rol (a0)       
00003EA0  4EB8 3CBA               5987                  jsr ROx_FLAGS
00003EA4  E7D0                    5988                  rol (a0)       
00003EA6  4EB8 3CBA               5989                  jsr ROx_FLAGS
00003EAA  E7D0                    5990                  rol (a0)       
00003EAC  4EB8 3CBA               5991                  jsr ROx_FLAGS
00003EB0  3010                    5992                  move.w (a0) , d0
00003EB2  0C80 8001FF18           5993                  cmpi.l #$8001FF18 , d0     
00003EB8  66FE                    5994                  bne *                 
00003EBA  0C85 00000009           5995                  cmpi.l #$00000009, d5     
00003EC0  66FE                    5996                  bne *                 
00003EC2                          5997                    
00003EC2                          5998         * WORD RIGHT
00003EC2  E6D0                    5999                  ror (a0)       
00003EC4  4EB8 3CBA               6000                  jsr ROx_FLAGS
00003EC8  E6D0                    6001                  ror (a0)       
00003ECA  4EB8 3CBA               6002                  jsr ROx_FLAGS
00003ECE  E6D0                    6003                  ror (a0)       
00003ED0  4EB8 3CBA               6004                  jsr ROx_FLAGS                
00003ED4  E6D0                    6005                  ror (a0)       
00003ED6  4EB8 3CBA               6006                  jsr ROx_FLAGS               
00003EDA  E6D0                    6007                  ror (a0)       
00003EDC  4EB8 3CBA               6008                  jsr ROx_FLAGS
00003EE0  E6D0                    6009                  ror (a0)       
00003EE2  4EB8 3CBA               6010                  jsr ROx_FLAGS
00003EE6  3010                    6011                  move.w (a0) , d0
00003EE8  0C80 800163FC           6012                  cmpi.l #$800163FC , d0     
00003EEE  66FE                    6013                  bne *                 
00003EF0  0C85 0000001B           6014                  cmpi.l #$0000001B, d5     
00003EF6  66FE                    6015                  bne *                 
00003EF8                          6016  
00003EF8  4E75                    6017                  rts
00003EFA                          6018        
00003EFA                          6019       
00003EFA                          6020                  
00003EFA                          6021  *-----------------------------------------------------------
00003EFA                          6022  *-----------------------------------------------------------
00003EFA                          6023  * OPCODE : ROXx
00003EFA                          6024  *-----------------------------------------------------------
00003EFA                          6025  *-----------------------------------------------------------
00003EFA                          6026  
00003EFA                          6027      * Subroutine to check and accumulate the flags 
00003EFA  40C3                    6028  ROXx_FLAGS:     move SR , d3      
00003EFC  0283 0000000F           6029                  andi.l #$0F , d3            * Isolate flags 
00003F02  DA83                    6030                  add.l d3 , d5               * Copy flag results into accumulator
00003F04  4E75                    6031                  rts
00003F06                          6032      
00003F06                          6033  op_ROXx:   
00003F06                          6034             
00003F06                          6035      * Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
00003F06                          6036      
00003F06                          6037         * BYTE LEFT
00003F06  203C 80018FF1           6038                  move.l #$80018FF1, d0   
00003F0C  7A00                    6039                  move.l #$00000000, d5  
00003F0E  7C11                    6040                  move.l #$00000011, d6  
00003F10                          6041  ROXx_LOOP1:
00003F10  ED30                    6042                  roxl.b d6 , d0       
00003F12  4EB8 3EFA               6043                  jsr ROXx_FLAGS
00003F16  51CE FFF8               6044                  dbf d6 , ROXx_LOOP1
00003F1A  0C80 80018FD0           6045                  cmpi.l #$80018FD0 , d0     
00003F20  66FE                    6046                  bne *                 
00003F22  0C85 00000042           6047                  cmpi.l #$00000042, d5     
00003F28  66FE                    6048                  bne *      
00003F2A                          6049      
00003F2A                          6050         * BYTE RIGHT
00003F2A  203C 80018FF1           6051                  move.l #$80018FF1, d0   
00003F30  7C12                    6052                  move.l #$00000012, d6  
00003F32                          6053  ROXx_LOOP2:
00003F32  EC30                    6054                  roxr.b d6 , d0       
00003F34  4EB8 3EFA               6055                  jsr ROXx_FLAGS
00003F38  51CE FFF8               6056                  dbf d6 , ROXx_LOOP2
00003F3C  0C80 80018F51           6057                  cmpi.l #$80018F51 , d0     
00003F42  66FE                    6058                  bne *                 
00003F44  0C85 0000009C           6059                  cmpi.l #$0000009C, d5     
00003F4A  66FE                    6060                  bne *      
00003F4C                          6061  
00003F4C                          6062      
00003F4C                          6063         * WORD LEFT
00003F4C  203C 80018FF1           6064                  move.l #$80018FF1, d0   
00003F52  7C13                    6065                  move.l #$00000013, d6  
00003F54                          6066  ROXx_LOOP3:
00003F54  ED70                    6067                  roxl.w d6 , d0       
00003F56  4EB8 3EFA               6068                  jsr ROXx_FLAGS
00003F5A  51CE FFF8               6069                  dbf d6 , ROXx_LOOP3
00003F5E  0C80 80013980           6070                  cmpi.l #$80013980 , d0     
00003F64  66FE                    6071                  bne *                 
00003F66  0C85 000000C9           6072                  cmpi.l #$000000C9, d5     
00003F6C  66FE                    6073                  bne *      
00003F6E                          6074      
00003F6E                          6075         * WORD RIGHT
00003F6E  203C 80018FF1           6076                  move.l #$80018FF1, d0   
00003F74  7C1E                    6077                  move.l #$0000001E, d6  
00003F76                          6078  ROXx_LOOP4:
00003F76  EC70                    6079                  roxr.w d6 , d0       
00003F78  4EB8 3EFA               6080                  jsr ROXx_FLAGS
00003F7C  51CE FFF8               6081                  dbf d6 , ROXx_LOOP4
00003F80  0C80 80010A1D           6082                  cmpi.l #$80010A1D , d0     
00003F86  66FE                    6083                  bne *                 
00003F88  0C85 0000014D           6084                  cmpi.l #$0000014D, d5     
00003F8E  66FE                    6085                  bne *      
00003F90                          6086  
00003F90                          6087      
00003F90                          6088         * LONG LEFT
00003F90  203C 80018FF1           6089                  move.l #$80018FF1, d0   
00003F96  7C15                    6090                  move.l #$00000015, d6  
00003F98                          6091  ROXx_LOOP5:
00003F98  EDB0                    6092                  roxl.l d6 , d0       
00003F9A  4EB8 3EFA               6093                  jsr ROXx_FLAGS
00003F9E  51CE FFF8               6094                  dbf d6 , ROXx_LOOP5
00003FA2  0C80 800185D0           6095                  cmpi.l #$800185D0 , d0     
00003FA8  66FE                    6096                  bne *                 
00003FAA  0C85 000001A1           6097                  cmpi.l #$000001A1, d5     
00003FB0  66FE                    6098                  bne *      
00003FB2                          6099      
00003FB2                          6100         * LONG RIGHT
00003FB2  203C 80018FF1           6101                  move.l #$80018FF1, d0   
00003FB8  7C16                    6102                  move.l #$00000016, d6  
00003FBA                          6103  ROXx_LOOP6:
00003FBA  ECB0                    6104                  roxr.l d6 , d0       
00003FBC  4EB8 3EFA               6105                  jsr ROXx_FLAGS
00003FC0  51CE FFF8               6106                  dbf d6 , ROXx_LOOP6
00003FC4  0C80 082D8200           6107                  cmpi.l #$082D8200 , d0     
00003FCA  66FE                    6108                  bne *                 
00003FCC  0C85 000001DE           6109                  cmpi.l #$000001DE, d5     
00003FD2  66FE                    6110                  bne *      
00003FD4                          6111  
00003FD4                          6112              
00003FD4                          6113      * Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
00003FD4                          6114      
00003FD4  203C 80018FF1           6115                  move.l #$80018FF1, d0   
00003FDA  7A00                    6116                  move.l #$00000000, d5   
00003FDC                          6117  
00003FDC                          6118         * BYTE LEFT
00003FDC  E310                    6119                  roxl.b #1 , d0       
00003FDE  4EB8 3EFA               6120                  jsr ROXx_FLAGS
00003FE2  EB10                    6121                  roxl.b #5 , d0      
00003FE4  4EB8 3EFA               6122                  jsr ROXx_FLAGS
00003FE8  EF10                    6123                  roxl.b #7 , d0   
00003FEA  4EB8 3EFA               6124                  jsr ROXx_FLAGS
00003FEE  E110                    6125                  roxl.b #8 , d0   
00003FF0  4EB8 3EFA               6126                  jsr ROXx_FLAGS
00003FF4  0C80 80018F09           6127                  cmpi.l #$80018F09 , d0     
00003FFA  66FE                    6128                  bne *                 
00003FFC  0C85 0000000B           6129                  cmpi.l #$0000000B, d5     
00004002  66FE                    6130                  bne *                 
00004004                          6131       
00004004                          6132         * BYTE RIGHT
00004004  E210                    6133                  roxr.b #1 , d0       
00004006  4EB8 3EFA               6134                  jsr ROXx_FLAGS
0000400A  EA10                    6135                  roxr.b #5 , d0      
0000400C  4EB8 3EFA               6136                  jsr ROXx_FLAGS
00004010  EE10                    6137                  roxr.b #7 , d0   
00004012  4EB8 3EFA               6138                  jsr ROXx_FLAGS
00004016  E010                    6139                  roxr.b #8 , d0   
00004018  4EB8 3EFA               6140                  jsr ROXx_FLAGS
0000401C  0C80 80018F00           6141                  cmpi.l #$80018F00 , d0     
00004022  66FE                    6142                  bne *                 
00004024  0C85 00000015           6143                  cmpi.l #$00000015, d5     
0000402A  66FE                    6144                  bne *                 
0000402C                          6145       
0000402C                          6146         * WORD LEFT
0000402C  E350                    6147                  roxl.w #1 , d0       
0000402E  4EB8 3EFA               6148                  jsr ROXx_FLAGS
00004032  EB50                    6149                  roxl.w #5 , d0      
00004034  4EB8 3EFA               6150                  jsr ROXx_FLAGS
00004038  EF50                    6151                  roxl.w #7 , d0   
0000403A  4EB8 3EFA               6152                  jsr ROXx_FLAGS
0000403E  E150                    6153                  roxl.w #8 , d0   
00004040  4EB8 3EFA               6154                  jsr ROXx_FLAGS
00004044  0C80 8001B000           6155                  cmpi.l #$8001B000 , d0     
0000404A  66FE                    6156                  bne *                 
0000404C  0C85 00000027           6157                  cmpi.l #$00000027, d5     
00004052  66FE                    6158                  bne *                 
00004054                          6159                    
00004054                          6160         * WORD RIGHT
00004054  E250                    6161                  roxr.w #1 , d0       
00004056  4EB8 3EFA               6162                  jsr ROXx_FLAGS
0000405A  EA50                    6163                  roxr.w #5 , d0      
0000405C  4EB8 3EFA               6164                  jsr ROXx_FLAGS
00004060  EE50                    6165                  roxr.w #7 , d0   
00004062  4EB8 3EFA               6166                  jsr ROXx_FLAGS
00004066  E050                    6167                  roxr.w #8 , d0   
00004068  4EB8 3EFA               6168                  jsr ROXx_FLAGS
0000406C  0C80 80010A00           6169                  cmpi.l #$80010A00 , d0     
00004072  66FE                    6170                  bne *                 
00004074  0C85 00000028           6171                  cmpi.l #$00000028, d5     
0000407A  66FE                    6172                  bne *                 
0000407C                          6173                 
0000407C                          6174         * LONG LEFT
0000407C  E390                    6175                  roxl.l #1 , d0       
0000407E  4EB8 3EFA               6176                  jsr ROXx_FLAGS
00004082  EB90                    6177                  roxl.l #5 , d0      
00004084  4EB8 3EFA               6178                  jsr ROXx_FLAGS
00004088  EF90                    6179                  roxl.l #7 , d0   
0000408A  4EB8 3EFA               6180                  jsr ROXx_FLAGS
0000408E  E190                    6181                  roxl.l #8 , d0   
00004090  4EB8 3EFA               6182                  jsr ROXx_FLAGS
00004094  0C80 40000010           6183                  cmpi.l #$40000010 , d0     
0000409A  66FE                    6184                  bne *                 
0000409C  0C85 0000002A           6185                  cmpi.l #$0000002A, d5     
000040A2  66FE                    6186                  bne *                 
000040A4                          6187                                  
000040A4                          6188         * LONG RIGHT
000040A4  E290                    6189                  roxr.l #1 , d0       
000040A6  4EB8 3EFA               6190                  jsr ROXx_FLAGS
000040AA  EA90                    6191                  roxr.l #5 , d0      
000040AC  4EB8 3EFA               6192                  jsr ROXx_FLAGS
000040B0  EE90                    6193                  roxr.l #7 , d0   
000040B2  4EB8 3EFA               6194                  jsr ROXx_FLAGS
000040B6  E090                    6195                  roxr.l #8 , d0   
000040B8  4EB8 3EFA               6196                  jsr ROXx_FLAGS
000040BC  0C80 00010200           6197                  cmpi.l #$00010200 , d0     
000040C2  66FE                    6198                  bne *                 
000040C4  0C85 00000032           6199                  cmpi.l #$00000032, d5     
000040CA  66FE                    6200                  bne *                 
000040CC                          6201     
000040CC                          6202              
000040CC                          6203      * Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
000040CC                          6204      
000040CC  7A00                    6205                  move.l #$00000000, d5   
000040CE  207C 00000100           6206                  move.l #$00000100, a0 
000040D4  30BC 8FF1               6207                  move.w #$8FF1 , (a0)
000040D8                          6208                  
000040D8                          6209         * WORD LEFT
000040D8  E5D0                    6210                  roxl (a0)       
000040DA  4EB8 3EFA               6211                  jsr ROXx_FLAGS
000040DE  E5D0                    6212                  roxl (a0)       
000040E0  4EB8 3EFA               6213                  jsr ROXx_FLAGS
000040E4  E5D0                    6214                  roxl (a0)       
000040E6  4EB8 3EFA               6215                  jsr ROXx_FLAGS
000040EA  E5D0                    6216                  roxl (a0)       
000040EC  4EB8 3EFA               6217                  jsr ROXx_FLAGS
000040F0  3010                    6218                  move.w (a0) , d0
000040F2  0C80 0001FF10           6219                  cmpi.l #$0001FF10 , d0     
000040F8  66FE                    6220                  bne *                 
000040FA  0C85 00000009           6221                  cmpi.l #$00000009, d5     
00004100  66FE                    6222                  bne *                 
00004102                          6223                    
00004102                          6224         * WORD RIGHT
00004102  E4D0                    6225                  roxr (a0)       
00004104  4EB8 3EFA               6226                  jsr ROXx_FLAGS
00004108  E4D0                    6227                  roxr (a0)       
0000410A  4EB8 3EFA               6228                  jsr ROXx_FLAGS
0000410E  E4D0                    6229                  roxr (a0)       
00004110  4EB8 3EFA               6230                  jsr ROXx_FLAGS                
00004114  E4D0                    6231                  roxr (a0)       
00004116  4EB8 3EFA               6232                  jsr ROXx_FLAGS               
0000411A  E4D0                    6233                  roxr (a0)       
0000411C  4EB8 3EFA               6234                  jsr ROXx_FLAGS
00004120  E4D0                    6235                  roxr (a0)       
00004122  4EB8 3EFA               6236                  jsr ROXx_FLAGS
00004126  3010                    6237                  move.w (a0) , d0
00004128  0C80 000103FC           6238                  cmpi.l #$000103FC , d0     
0000412E  66FE                    6239                  bne *                 
00004130  0C85 0000000A           6240                  cmpi.l #$0000000A, d5     
00004136  66FE                    6241                  bne *                 
00004138                          6242  
00004138  4E75                    6243                  rts        
0000413A                          6244  
0000413A                          6245  
0000413A                          6246   
0000413A                          6247                  
0000413A                          6248  *-----------------------------------------------------------
0000413A                          6249  *-----------------------------------------------------------
0000413A                          6250  * OPCODE : SHIFTS
0000413A                          6251  *-----------------------------------------------------------
0000413A                          6252  *-----------------------------------------------------------
0000413A                          6253  
0000413A                          6254      * Subroutine to check and accumulate the flags 
0000413A  40C3                    6255  SHIFTS_FLAGS:   move SR , d3      
0000413C  0283 0000000F           6256                  andi.l #$0F , d3            * Isolate flags 
00004142  DA83                    6257                  add.l d3 , d5               * Copy flag results into accumulator
00004144  4E75                    6258                  rts
00004146                          6259      
00004146                          6260  op_SHIFTS:   
00004146                          6261             
00004146                          6262      * Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
00004146                          6263      
00004146                          6264         * BYTE LEFT
00004146  203C 80018F81           6265                  move.l #$80018F81, d0   
0000414C  7A00                    6266                  move.l #$00000000, d5  
0000414E  7C02                    6267                  move.l #$00000002, d6  
00004150                          6268  SHIFTS_LOOP1:
00004150  ED20                    6269                  asl.b d6 , d0       
00004152  4EB8 413A               6270                  jsr SHIFTS_FLAGS
00004156  51CE FFF8               6271                  dbf d6 , SHIFTS_LOOP1
0000415A  0C80 80018F08           6272                  cmpi.l #$80018F08 , d0     
00004160  66FE                    6273                  bne *                 
00004162  0C85 00000002           6274                  cmpi.l #$00000002, d5     
00004168  66FE                    6275                  bne *      
0000416A                          6276      
0000416A                          6277         * BYTE RIGHT
0000416A  203C 80018F81           6278                  move.l #$80018F81, d0   
00004170  7C02                    6279                  move.l #$00000002, d6  
00004172                          6280  SHIFTS_LOOP2:
00004172  EC20                    6281                  asr.b d6 , d0       
00004174  4EB8 413A               6282                  jsr SHIFTS_FLAGS
00004178  51CE FFF8               6283                  dbf d6 , SHIFTS_LOOP2
0000417C  0C80 80018FF0           6284                  cmpi.l #$80018FF0 , d0     
00004182  66FE                    6285                  bne *                 
00004184  0C85 0000001A           6286                  cmpi.l #$0000001A, d5     
0000418A  66FE                    6287                  bne *      
0000418C                          6288  
0000418C                          6289      
0000418C                          6290         * WORD LEFT
0000418C  203C 80018FF1           6291                  move.l #$80018FF1, d0   
00004192  7C02                    6292                  move.l #$00000002, d6  
00004194                          6293  SHIFTS_LOOP3:
00004194  ED60                    6294                  asl.w d6 , d0       
00004196  4EB8 413A               6295                  jsr SHIFTS_FLAGS
0000419A  51CE FFF8               6296                  dbf d6 , SHIFTS_LOOP3
0000419E  0C80 80017F88           6297                  cmpi.l #$80017F88 , d0     
000041A4  66FE                    6298                  bne *                 
000041A6  0C85 0000001C           6299                  cmpi.l #$0000001C, d5     
000041AC  66FE                    6300                  bne *      
000041AE                          6301      
000041AE                          6302         * WORD RIGHT
000041AE  203C 80018FF1           6303                  move.l #$80018FF1, d0   
000041B4  7C02                    6304                  move.l #$00000002, d6  
000041B6                          6305  SHIFTS_LOOP4:
000041B6  EC60                    6306                  asr.w d6 , d0       
000041B8  4EB8 413A               6307                  jsr SHIFTS_FLAGS
000041BC  51CE FFF8               6308                  dbf d6 , SHIFTS_LOOP4
000041C0  0C80 8001F1FE           6309                  cmpi.l #$8001F1FE , d0     
000041C6  66FE                    6310                  bne *                 
000041C8  0C85 00000034           6311                  cmpi.l #$00000034, d5     
000041CE  66FE                    6312                  bne *      
000041D0                          6313  
000041D0                          6314      
000041D0                          6315         * LONG LEFT
000041D0  203C 80018FF1           6316                  move.l #$80018FF1, d0   
000041D6  7C02                    6317                  move.l #$00000002, d6  
000041D8                          6318  SHIFTS_LOOP5:
000041D8  EDA0                    6319                  asl.l d6 , d0       
000041DA  4EB8 413A               6320                  jsr SHIFTS_FLAGS
000041DE  51CE FFF8               6321                  dbf d6 , SHIFTS_LOOP5
000041E2  0C80 000C7F88           6322                  cmpi.l #$000C7F88 , d0     
000041E8  66FE                    6323                  bne *                 
000041EA  0C85 00000036           6324                  cmpi.l #$00000036, d5     
000041F0  66FE                    6325                  bne *      
000041F2                          6326      
000041F2                          6327         * LONG RIGHT
000041F2  203C 80018FF1           6328                  move.l #$80018FF1, d0   
000041F8  7C02                    6329                  move.l #$00000002, d6  
000041FA                          6330  SHIFTS_LOOP6:
000041FA  ECA0                    6331                  asr.l d6 , d0       
000041FC  4EB8 413A               6332                  jsr SHIFTS_FLAGS
00004200  51CE FFF8               6333                  dbf d6 , SHIFTS_LOOP6
00004204  0C80 F00031FE           6334                  cmpi.l #$F00031FE , d0     
0000420A  66FE                    6335                  bne *                 
0000420C  0C85 0000004E           6336                  cmpi.l #$0000004E, d5     
00004212  66FE                    6337                  bne *      
00004214                          6338  
00004214                          6339              
00004214                          6340      * Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
00004214                          6341      
00004214  203C 80018FF1           6342                  move.l #$80018FF1, d0   
0000421A  7A00                    6343                  move.l #$00000000, d5   
0000421C                          6344  
0000421C                          6345         * BYTE LEFT
0000421C  E300                    6346                  asl.b #1 , d0       
0000421E  4EB8 413A               6347                  jsr SHIFTS_FLAGS
00004222  E500                    6348                  asl.b #2 , d0      
00004224  4EB8 413A               6349                  jsr SHIFTS_FLAGS
00004228  E300                    6350                  asl.b #1 , d0   
0000422A  4EB8 413A               6351                  jsr SHIFTS_FLAGS
0000422E  E700                    6352                  asl.b #3 , d0   
00004230  4EB8 413A               6353                  jsr SHIFTS_FLAGS
00004234  0C80 80018F80           6354                  cmpi.l #$80018F80 , d0     
0000423A  66FE                    6355                  bne *                 
0000423C  0C85 0000001F           6356                  cmpi.l #$0000001F, d5     
00004242  66FE                    6357                  bne *                 
00004244                          6358       
00004244                          6359         * BYTE RIGHT
00004244  E200                    6360                  asr.b #1 , d0       
00004246  4EB8 413A               6361                  jsr SHIFTS_FLAGS
0000424A  E400                    6362                  asr.b #2 , d0      
0000424C  4EB8 413A               6363                  jsr SHIFTS_FLAGS
00004250  E600                    6364                  asr.b #3 , d0   
00004252  4EB8 413A               6365                  jsr SHIFTS_FLAGS
00004256  E200                    6366                  asr.b #1 , d0   
00004258  4EB8 413A               6367                  jsr SHIFTS_FLAGS
0000425C  0C80 80018FFF           6368                  cmpi.l #$80018FFF , d0     
00004262  66FE                    6369                  bne *                 
00004264  0C85 0000003F           6370                  cmpi.l #$0000003F, d5     
0000426A  66FE                    6371                  bne *                 
0000426C                          6372       
0000426C                          6373         * WORD LEFT
0000426C  E340                    6374                  asl.w #1 , d0       
0000426E  4EB8 413A               6375                  jsr SHIFTS_FLAGS
00004272  E540                    6376                  asl.w #2 , d0      
00004274  4EB8 413A               6377                  jsr SHIFTS_FLAGS
00004278  E740                    6378                  asl.w #3 , d0   
0000427A  4EB8 413A               6379                  jsr SHIFTS_FLAGS
0000427E  EB40                    6380                  asl.w #5 , d0   
00004280  4EB8 413A               6381                  jsr SHIFTS_FLAGS
00004284  0C80 8001F800           6382                  cmpi.l #$8001F800 , d0     
0000428A  66FE                    6383                  bne *                 
0000428C  0C85 00000056           6384                  cmpi.l #$00000056, d5     
00004292  66FE                    6385                  bne *                 
00004294                          6386                    
00004294                          6387         * WORD RIGHT
00004294  EA40                    6388                  asr.w #5 , d0       
00004296  4EB8 413A               6389                  jsr SHIFTS_FLAGS
0000429A  E240                    6390                  asr.w #1 , d0      
0000429C  4EB8 413A               6391                  jsr SHIFTS_FLAGS
000042A0  E440                    6392                  asr.w #2 , d0   
000042A2  4EB8 413A               6393                  jsr SHIFTS_FLAGS
000042A6  E840                    6394                  asr.w #4 , d0   
000042A8  4EB8 413A               6395                  jsr SHIFTS_FLAGS
000042AC  0C80 8001FFFF           6396                  cmpi.l #$8001FFFF , d0     
000042B2  66FE                    6397                  bne *                 
000042B4  0C85 00000077           6398                  cmpi.l #$00000077, d5     
000042BA  66FE                    6399                  bne *                 
000042BC                          6400                 
000042BC                          6401         * LONG LEFT
000042BC  203C 80018FF1           6402                  move.l #$80018FF1, d0   
000042C2  E380                    6403                  asl.l #1 , d0       
000042C4  4EB8 413A               6404                  jsr SHIFTS_FLAGS
000042C8  E580                    6405                  asl.l #2 , d0      
000042CA  4EB8 413A               6406                  jsr SHIFTS_FLAGS
000042CE  EF80                    6407                  asl.l #7 , d0   
000042D0  4EB8 413A               6408                  jsr SHIFTS_FLAGS
000042D4  E980                    6409                  asl.l #4 , d0   
000042D6  4EB8 413A               6410                  jsr SHIFTS_FLAGS
000042DA  0C80 63FC4000           6411                  cmpi.l #$63FC4000  , d0     
000042E0  66FE                    6412                  bne *                 
000042E2  0C85 0000007A           6413                  cmpi.l #$0000007A, d5     
000042E8  66FE                    6414                  bne *                 
000042EA                          6415                                  
000042EA                          6416         * LONG RIGHT
000042EA  203C 80018FF1           6417                  move.l #$80018FF1, d0   
000042F0  E280                    6418                  asr.l #1 , d0       
000042F2  4EB8 413A               6419                  jsr SHIFTS_FLAGS
000042F6  EA80                    6420                  asr.l #5 , d0      
000042F8  4EB8 413A               6421                  jsr SHIFTS_FLAGS
000042FC  EE80                    6422                  asr.l #7 , d0   
000042FE  4EB8 413A               6423                  jsr SHIFTS_FLAGS
00004302  E080                    6424                  asr.l #8 , d0   
00004304  4EB8 413A               6425                  jsr SHIFTS_FLAGS
00004308  0C80 FFFFFC00           6426                  cmpi.l #$FFFFFC00 , d0     
0000430E  66FE                    6427                  bne *                 
00004310  0C85 0000009C           6428                  cmpi.l #$0000009C, d5     
00004316  66FE                    6429                  bne *                 
00004318                          6430     
00004318                          6431              
00004318                          6432      * Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
00004318                          6433      
00004318  7A00                    6434                  move.l #$00000000, d5   
0000431A  207C 00000100           6435                  move.l #$00000100, a0 
00004320  30BC 8FF1               6436                  move.w #$8FF1 , (a0)
00004324                          6437                  
00004324                          6438         * WORD LEFT
00004324  E1D0                    6439                  asl  (a0)       
00004326  4EB8 413A               6440                  jsr SHIFTS_FLAGS
0000432A  E1D0                    6441                  asl  (a0)       
0000432C  4EB8 413A               6442                  jsr SHIFTS_FLAGS
00004330  E1D0                    6443                  asl  (a0)       
00004332  4EB8 413A               6444                  jsr SHIFTS_FLAGS
00004336  E1D0                    6445                  asl  (a0)       
00004338  4EB8 413A               6446                  jsr SHIFTS_FLAGS
0000433C  3010                    6447                  move.w (a0) , d0
0000433E  0C80 FFFFFF10           6448                  cmpi.l #$FFFFFF10 , d0     
00004344  66FE                    6449                  bne *                 
00004346  0C85 0000000D           6450                  cmpi.l #$0000000D, d5     
0000434C  66FE                    6451                  bne *                 
0000434E                          6452                    
0000434E                          6453         * WORD RIGHT
0000434E  E0D0                    6454                  asr (a0)       
00004350  4EB8 413A               6455                  jsr SHIFTS_FLAGS
00004354  E0D0                    6456                  asr (a0)       
00004356  4EB8 413A               6457                  jsr SHIFTS_FLAGS
0000435A  E0D0                    6458                  asr (a0)       
0000435C  4EB8 413A               6459                  jsr SHIFTS_FLAGS                
00004360  E0D0                    6460                  asr (a0)       
00004362  4EB8 413A               6461                  jsr SHIFTS_FLAGS               
00004366  E0D0                    6462                  asr (a0)       
00004368  4EB8 413A               6463                  jsr SHIFTS_FLAGS
0000436C  E0D0                    6464                  asr (a0)       
0000436E  4EB8 413A               6465                  jsr SHIFTS_FLAGS
00004372  3010                    6466                  move.w (a0) , d0
00004374  0C80 FFFFFFFC           6467                  cmpi.l #$FFFFFFFC , d0     
0000437A  66FE                    6468                  bne *                 
0000437C  0C85 0000003E           6469                  cmpi.l #$0000003E, d5     
00004382  66FE                    6470                  bne *                 
00004384                          6471  
00004384  4E75                    6472                  rts      
00004386                          6473          
00004386                          6474  
00004386                          6475                  
00004386                          6476  *-----------------------------------------------------------
00004386                          6477  *-----------------------------------------------------------
00004386                          6478  * OPCODE : SHIFTS2
00004386                          6479  *-----------------------------------------------------------
00004386                          6480  *-----------------------------------------------------------
00004386                          6481  
00004386                          6482      * Subroutine to check and accumulate the flags 
00004386  40C3                    6483  SHIFTS2_FLAGS:  move SR , d3      
00004388  0283 0000000F           6484                  andi.l #$0F , d3            * Isolate flags 
0000438E  DA83                    6485                  add.l d3 , d5               * Copy flag results into accumulator
00004390  4E75                    6486                  rts
00004392                          6487      
00004392                          6488  op_SHIFTS2:   
00004392                          6489             
00004392                          6490      * Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
00004392                          6491      
00004392                          6492         * BYTE LEFT
00004392  203C 80018F81           6493                  move.l #$80018F81, d0   
00004398  7A00                    6494                  move.l #$00000000, d5  
0000439A  7C02                    6495                  move.l #$00000002, d6  
0000439C                          6496  SHIFTS2_LOOP1:
0000439C  ED28                    6497                  lsl.b d6 , d0       
0000439E  4EB8 4386               6498                  jsr SHIFTS2_FLAGS
000043A2  51CE FFF8               6499                  dbf d6 , SHIFTS2_LOOP1
000043A6  0C80 80018F08           6500                  cmpi.l #$80018F08 , d0     
000043AC  66FE                    6501                  bne *                 
000043AE  0C85 00000000           6502                  cmpi.l #$00000000, d5     
000043B4  66FE                    6503                  bne *      
000043B6                          6504      
000043B6                          6505         * BYTE RIGHT
000043B6  203C 80018F81           6506                  move.l #$80018F81, d0   
000043BC  7C02                    6507                  move.l #$00000002, d6  
000043BE                          6508  SHIFTS2_LOOP2:
000043BE  EC28                    6509                  lsr.b d6 , d0       
000043C0  4EB8 4386               6510                  jsr SHIFTS2_FLAGS
000043C4  51CE FFF8               6511                  dbf d6 , SHIFTS2_LOOP2
000043C8  0C80 80018F10           6512                  cmpi.l #$80018F10 , d0     
000043CE  66FE                    6513                  bne *                 
000043D0  0C85 00000000           6514                  cmpi.l #$00000000, d5     
000043D6  66FE                    6515                  bne *      
000043D8                          6516  
000043D8                          6517      
000043D8                          6518         * WORD LEFT
000043D8  203C 80018FF1           6519                  move.l #$80018FF1, d0   
000043DE  7C02                    6520                  move.l #$00000002, d6  
000043E0                          6521  SHIFTS2_LOOP3:
000043E0  ED68                    6522                  lsl.w d6 , d0       
000043E2  4EB8 4386               6523                  jsr SHIFTS2_FLAGS
000043E6  51CE FFF8               6524                  dbf d6 , SHIFTS2_LOOP3
000043EA  0C80 80017F88           6525                  cmpi.l #$80017F88 , d0     
000043F0  66FE                    6526                  bne *                 
000043F2  0C85 00000000           6527                  cmpi.l #$00000000, d5     
000043F8  66FE                    6528                  bne *      
000043FA                          6529      
000043FA                          6530         * WORD RIGHT
000043FA  203C 80018FF1           6531                  move.l #$80018FF1, d0   
00004400  7C02                    6532                  move.l #$00000002, d6  
00004402                          6533  SHIFTS2_LOOP4:
00004402  EC68                    6534                  lsr.w d6 , d0       
00004404  4EB8 4386               6535                  jsr SHIFTS2_FLAGS
00004408  51CE FFF8               6536                  dbf d6 , SHIFTS2_LOOP4
0000440C  0C80 800111FE           6537                  cmpi.l #$800111FE , d0     
00004412  66FE                    6538                  bne *                 
00004414  0C85 00000000           6539                  cmpi.l #$00000000, d5     
0000441A  66FE                    6540                  bne *      
0000441C                          6541  
0000441C                          6542      
0000441C                          6543         * LONG LEFT
0000441C  203C 80018FF1           6544                  move.l #$80018FF1, d0   
00004422  7C02                    6545                  move.l #$00000002, d6  
00004424                          6546  SHIFTS2_LOOP5:
00004424  EDA8                    6547                  lsl.l d6 , d0       
00004426  4EB8 4386               6548                  jsr SHIFTS2_FLAGS
0000442A  51CE FFF8               6549                  dbf d6 , SHIFTS2_LOOP5
0000442E  0C80 000C7F88           6550                  cmpi.l #$000C7F88 , d0     
00004434  66FE                    6551                  bne *                 
00004436  0C85 00000000           6552                  cmpi.l #$00000000, d5     
0000443C  66FE                    6553                  bne *      
0000443E                          6554      
0000443E                          6555         * LONG RIGHT
0000443E  203C 80018FF1           6556                  move.l #$80018FF1, d0   
00004444  7C02                    6557                  move.l #$00000002, d6  
00004446                          6558  SHIFTS2_LOOP6:
00004446  ECA8                    6559                  lsr.l d6 , d0       
00004448  4EB8 4386               6560                  jsr SHIFTS2_FLAGS
0000444C  51CE FFF8               6561                  dbf d6 , SHIFTS2_LOOP6
00004450  0C80 100031FE           6562                  cmpi.l #$100031FE , d0     
00004456  66FE                    6563                  bne *                 
00004458  0C85 00000000           6564                  cmpi.l #$00000000, d5     
0000445E  66FE                    6565                  bne *      
00004460                          6566  
00004460                          6567              
00004460                          6568      * Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
00004460                          6569      
00004460  203C 80018FF1           6570                  move.l #$80018FF1, d0   
00004466  7A00                    6571                  move.l #$00000000, d5   
00004468                          6572  
00004468                          6573         * BYTE LEFT
00004468  E308                    6574                  lsl.b #1 , d0       
0000446A  4EB8 4386               6575                  jsr SHIFTS2_FLAGS
0000446E  E508                    6576                  lsl.b #2 , d0      
00004470  4EB8 4386               6577                  jsr SHIFTS2_FLAGS
00004474  E308                    6578                  lsl.b #1 , d0   
00004476  4EB8 4386               6579                  jsr SHIFTS2_FLAGS
0000447A  E708                    6580                  lsl.b #3 , d0   
0000447C  4EB8 4386               6581                  jsr SHIFTS2_FLAGS
00004480  0C80 80018F80           6582                  cmpi.l #$80018F80 , d0     
00004486  66FE                    6583                  bne *                 
00004488  0C85 0000001B           6584                  cmpi.l #$0000001B, d5     
0000448E  66FE                    6585                  bne *                 
00004490                          6586       
00004490                          6587         * BYTE RIGHT
00004490  E208                    6588                  lsr.b #1 , d0       
00004492  4EB8 4386               6589                  jsr SHIFTS2_FLAGS
00004496  E408                    6590                  lsr.b #2 , d0      
00004498  4EB8 4386               6591                  jsr SHIFTS2_FLAGS
0000449C  E608                    6592                  lsr.b #3 , d0   
0000449E  4EB8 4386               6593                  jsr SHIFTS2_FLAGS
000044A2  E208                    6594                  lsr.b #1 , d0   
000044A4  4EB8 4386               6595                  jsr SHIFTS2_FLAGS
000044A8  0C80 80018F01           6596                  cmpi.l #$80018F01 , d0     
000044AE  66FE                    6597                  bne *                 
000044B0  0C85 0000001B           6598                  cmpi.l #$0000001B, d5     
000044B6  66FE                    6599                  bne *                 
000044B8                          6600       
000044B8                          6601         * WORD LEFT
000044B8  E348                    6602                  lsl.w #1 , d0       
000044BA  4EB8 4386               6603                  jsr SHIFTS2_FLAGS
000044BE  E548                    6604                  lsl.w #2 , d0      
000044C0  4EB8 4386               6605                  jsr SHIFTS2_FLAGS
000044C4  E748                    6606                  lsl.w #3 , d0   
000044C6  4EB8 4386               6607                  jsr SHIFTS2_FLAGS
000044CA  EB48                    6608                  lsl.w #5 , d0   
000044CC  4EB8 4386               6609                  jsr SHIFTS2_FLAGS
000044D0  0C80 80010800           6610                  cmpi.l #$80010800 , d0     
000044D6  66FE                    6611                  bne *                 
000044D8  0C85 00000025           6612                  cmpi.l #$00000025, d5     
000044DE  66FE                    6613                  bne *                 
000044E0                          6614                    
000044E0                          6615         * WORD RIGHT
000044E0  EA48                    6616                  lsr.w #5 , d0       
000044E2  4EB8 4386               6617                  jsr SHIFTS2_FLAGS
000044E6  E248                    6618                  lsr.w #1 , d0      
000044E8  4EB8 4386               6619                  jsr SHIFTS2_FLAGS
000044EC  E448                    6620                  lsr.w #2 , d0   
000044EE  4EB8 4386               6621                  jsr SHIFTS2_FLAGS
000044F2  E848                    6622                  lsr.w #4 , d0   
000044F4  4EB8 4386               6623                  jsr SHIFTS2_FLAGS
000044F8  0C80 80010000           6624                  cmpi.l #$80010000 , d0     
000044FE  66FE                    6625                  bne *                 
00004500  0C85 0000002A           6626                  cmpi.l #$0000002A, d5     
00004506  66FE                    6627                  bne *                 
00004508                          6628                 
00004508                          6629         * LONG LEFT
00004508  203C 80018FF1           6630                  move.l #$80018FF1, d0   
0000450E  E388                    6631                  lsl.l #1 , d0       
00004510  4EB8 4386               6632                  jsr SHIFTS2_FLAGS
00004514  E588                    6633                  lsl.l #2 , d0      
00004516  4EB8 4386               6634                  jsr SHIFTS2_FLAGS
0000451A  EF88                    6635                  lsl.l #7 , d0   
0000451C  4EB8 4386               6636                  jsr SHIFTS2_FLAGS
00004520  E988                    6637                  lsl.l #4 , d0   
00004522  4EB8 4386               6638                  jsr SHIFTS2_FLAGS
00004526  0C80 63FC4000           6639                  cmpi.l #$63FC4000  , d0     
0000452C  66FE                    6640                  bne *                 
0000452E  0C85 0000002B           6641                  cmpi.l #$0000002B, d5     
00004534  66FE                    6642                  bne *                 
00004536                          6643                                  
00004536                          6644         * LONG RIGHT
00004536  203C 80018FF1           6645                  move.l #$80018FF1, d0   
0000453C  E288                    6646                  lsr.l #1 , d0       
0000453E  4EB8 4386               6647                  jsr SHIFTS2_FLAGS
00004542  EA88                    6648                  lsr.l #5 , d0      
00004544  4EB8 4386               6649                  jsr SHIFTS2_FLAGS
00004548  EE88                    6650                  lsr.l #7 , d0   
0000454A  4EB8 4386               6651                  jsr SHIFTS2_FLAGS
0000454E  E088                    6652                  lsr.l #8 , d0   
00004550  4EB8 4386               6653                  jsr SHIFTS2_FLAGS
00004554  0C80 00000400           6654                  cmpi.l #$00000400 , d0     
0000455A  66FE                    6655                  bne *                 
0000455C  0C85 0000002D           6656                  cmpi.l #$0000002D, d5     
00004562  66FE                    6657                  bne *                 
00004564                          6658     
00004564                          6659              
00004564                          6660      * Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
00004564                          6661      
00004564  7A00                    6662                  move.l #$00000000, d5   
00004566  207C 00000100           6663                  move.l #$00000100, a0 
0000456C  30BC 8FF1               6664                  move.w #$8FF1 , (a0)
00004570                          6665                  
00004570                          6666         * WORD LEFT
00004570  E3D0                    6667                  lsl  (a0)       
00004572  4EB8 4386               6668                  jsr SHIFTS2_FLAGS
00004576  E3D0                    6669                  lsl  (a0)       
00004578  4EB8 4386               6670                  jsr SHIFTS2_FLAGS
0000457C  E3D0                    6671                  lsl  (a0)       
0000457E  4EB8 4386               6672                  jsr SHIFTS2_FLAGS
00004582  E3D0                    6673                  lsl  (a0)       
00004584  4EB8 4386               6674                  jsr SHIFTS2_FLAGS
00004588  3010                    6675                  move.w (a0) , d0
0000458A  0C80 0000FF10           6676                  cmpi.l #$0000FF10 , d0     
00004590  66FE                    6677                  bne *                 
00004592  0C85 00000009           6678                  cmpi.l #$00000009, d5     
00004598  66FE                    6679                  bne *                 
0000459A                          6680                    
0000459A                          6681         * WORD RIGHT
0000459A  E2D0                    6682                  lsr (a0)       
0000459C  4EB8 4386               6683                  jsr SHIFTS2_FLAGS
000045A0  E2D0                    6684                  lsr (a0)       
000045A2  4EB8 4386               6685                  jsr SHIFTS2_FLAGS
000045A6  E2D0                    6686                  lsr (a0)       
000045A8  4EB8 4386               6687                  jsr SHIFTS2_FLAGS                
000045AC  E2D0                    6688                  lsr (a0)       
000045AE  4EB8 4386               6689                  jsr SHIFTS2_FLAGS               
000045B2  E2D0                    6690                  lsr (a0)       
000045B4  4EB8 4386               6691                  jsr SHIFTS2_FLAGS
000045B8  E2D0                    6692                  lsr (a0)       
000045BA  4EB8 4386               6693                  jsr SHIFTS2_FLAGS
000045BE  3010                    6694                  move.w (a0) , d0
000045C0  0C80 000003FC           6695                  cmpi.l #$000003FC , d0     
000045C6  66FE                    6696                  bne *                 
000045C8  0C85 0000000A           6697                  cmpi.l #$0000000A, d5     
000045CE  66FE                    6698                  bne *                 
000045D0                          6699  
000045D0  4E75                    6700                  rts      
000045D2                          6701          
000045D2                          6702  
000045D2                          6703  *------------------------------------------------------   
000045D2                          6704  *------------------------------------------------------   
000045D2  FFFF FFFF               6705    SIMHALT            
000045D6                          6706  
000045D6                          6707    END     START       

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABCD_INNER1         2D3C
ABCD_INNER2         2DB6
ABCD_NO_C1          2D5E
ABCD_NO_C2          2D68
ABCD_NO_C3          2DD8
ABCD_NO_C4          2DE2
ABCD_OUTER1         2D3A
ABCD_OUTER2         2DB4
ADDA_OUTER1         3910
ADDQ_LOOP1          30FA
ADDQ_LOOP2          313A
ADDQ_LOOP3          3170
ADDX_LOOP3          3A3E
ADDX_LOOP4          3A5E
ADDX_LOOP5          3A7E
ADDX_OUTER1         39A6
ADD_OUTER1          372E
ADD_OUTER2          37A4
ALL_DONE            F000
ANDI_TO_CCR_FAIL    68A
ANDI_TO_SR_FAIL     6C2
AND_OUTER1          3432
AND_OUTER2          34A8
BCC1                301E
BCC10               3070
BCC11               3078
BCC12               3082
BCC13               308A
BCC14               3094
BCC2                3028
BCC3                3030
BCC4                303A
BCC5                3042
BCC6                304C
BCC7                3054
BCC8                305E
BCC9                3066
BCHG_FAIL           1006
BSET_FAIL           1854
BSR_CLOSE1          1ACE
BSR_CLOSE2          1B04
BSR_FAR1            574
BSR_FAR2            300E
BTST_FAIL           B74
CMPA_OUTER1         3610
CMPM_LOOP1          36A6
CMPM_LOOP2          36C4
CMPM_LOOP3          36E2
CMP_OUTER1          3598
DBCC_LOOP1          309E
DBCC_LOOP2          30AC
DIVS_OUTER1         32EC
DIVU_OUTER1         329A
EORI_TO_CCR_FAIL    61A
EORI_TO_SR_FAIL     652
EOR_OUTER2          3520
EXCEPTION_6         F010
EXCEPTION_7         F020
LEA1                2512
MOVE1               2168
MOVE2               20EA
MOVE3               21EA
MOVE4               234C
MULS_OUTER1         3C28
MULU_OUTER1         3BDC
NBCD_LOOP           2F5A
NBCD_LOOP1          2FA4
NBCD_NO_C           2F68
NBCD_NO_C1          2FBA
NBCD_NO_Z           2F6E
NBCD_NO_Z1          2FC0
OP_ABCD             2D16
OP_ADD              370C
OP_ADDA             38E8
OP_ADDQ             30E6
OP_ADDX             3984
OP_ADD_I            1D0E
OP_AND              3410
OP_ANDI_TO_CCR      654
OP_ANDI_TO_SR       68C
OP_BCC              3016
OP_BCHG             B76
OP_BCLR             1008
OP_BOOL_I           18EC
OP_BSET             13BA
OP_BSR              1AD6
OP_BTST             6C4
OP_BTST0            8B6
OP_BTST1            8C4
OP_BTST10           91E
OP_BTST11           928
OP_BTST12           92E
OP_BTST2            8CE
OP_BTST20           AF0
OP_BTST21           AFC
OP_BTST22           B04
OP_BTST23           B0C
OP_BTST24           B14
OP_BTST25           B1C
OP_BTST26           B24
OP_BTST27           B2C
OP_BTST28           B34
OP_BTST29           B3C
OP_BTST3            8D8
OP_BTST30           B44
OP_BTST31           B4C
OP_BTST32           B50
OP_BTST4            8E2
OP_BTST5            8EC
OP_BTST6            8F6
OP_BTST7            900
OP_BTST8            90A
OP_BTST9            914
OP_CHK              25C4
OP_CMP              3576
OP_CMPA             35EE
OP_CMPM             3656
OP_CMP_I            1B0C
OP_DBCC             3096
OP_DIVS             32D0
OP_DIVU             327E
OP_EOR              34FE
OP_EORI_TO_CCR      5E4
OP_EORI_TO_SR       61C
OP_EXG              3C58
OP_EXT              243A
OP_LEAPEA           247A
OP_LINKS            2598
OP_MOVE             201A
OP_MOVEM            2992
OP_MOVEP            1856
OP_MOVEQ            325E
OP_MOVE_USP         25B6
OP_MOVE_XXX_FLAGS   222C
OP_MULS             3C0C
OP_MULU             3BC0
OP_NBCD             2F42
OP_NEGS             25DC
OP_OR               3322
OP_ORI_TO_CCR       57C
OP_ORI_TO_SR        5B0
OP_ROX              3CC6
OP_ROXX             3F06
OP_RTR              2FF2
OP_SBCD             2E2C
OP_SCC              30BC
OP_SHIFTS           4146
OP_SHIFTS2          4392
OP_SUB              37FA
OP_SUBA             3936
OP_SUBQ             31A2
OP_SUBX             3AA2
OP_SUB_I            1E94
OP_SWAP             2464
OP_TAS              2526
OP_TRAPV            2FE0
OP_TST              2550
ORI_TO_CCR_FAIL     5AE
ORI_TO_SR_FAIL      5E2
OR_OUTER1           3344
OR_OUTER2           33BA
ROXX_FLAGS          3EFA
ROXX_LOOP1          3F10
ROXX_LOOP2          3F32
ROXX_LOOP3          3F54
ROXX_LOOP4          3F76
ROXX_LOOP5          3F98
ROXX_LOOP6          3FBA
ROX_FLAGS           3CBA
ROX_LOOP1           3CD0
ROX_LOOP2           3CF2
ROX_LOOP3           3D14
ROX_LOOP4           3D36
ROX_LOOP5           3D58
ROX_LOOP6           3D7A
RTR_DONE            3000
SBCD_INNER1         2E52
SBCD_INNER2         2ECC
SBCD_NO_C1          2E74
SBCD_NO_C2          2E7E
SBCD_NO_C3          2EEE
SBCD_NO_C4          2EF8
SBCD_OUTER1         2E50
SBCD_OUTER2         2ECA
SHIFTS2_FLAGS       4386
SHIFTS2_LOOP1       439C
SHIFTS2_LOOP2       43BE
SHIFTS2_LOOP3       43E0
SHIFTS2_LOOP4       4402
SHIFTS2_LOOP5       4424
SHIFTS2_LOOP6       4446
SHIFTS_FLAGS        413A
SHIFTS_LOOP1        4150
SHIFTS_LOOP2        4172
SHIFTS_LOOP3        4194
SHIFTS_LOOP4        41B6
SHIFTS_LOOP5        41D8
SHIFTS_LOOP6        41FA
START               400
SUBA_OUTER1         395E
SUBQ_LOOP1          31BA
SUBQ_LOOP2          31F6
SUBQ_LOOP3          322C
SUBX_LOOP3          3B5C
SUBX_LOOP4          3B7C
SUBX_LOOP5          3B9C
SUBX_OUTER1         3AC4
SUB_OUTER1          381C
SUB_OUTER2          3892
