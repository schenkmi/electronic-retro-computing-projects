; Copyright (C) 1994-2004 Joe Forster/STA <sta(at)c64(dot)org>
; All rights reserved.
;
; This file is part of OpenCBM
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in
;       the documentation and/or other materials provided with the
;       distribution.
;     * Neither the name of the OpenCBM team nor the names of its
;       contributors may be used to endorse or promote products derived
;       from this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

; 1581 Turbo write

	*	= $0500

	cnt	= $fc	; byte count

	chn	= $50	; current channel
	sa	= $52	; secondary address

	init       = $0680
	chkerr     = $0683
	noerr	   = $0686
	get_byte   = $0689

	nop
	nop
	nop

	jsr init	; custom I/O init

	ldy #$01
	sty chn		; channel = 1
	sty sa		; sec. addr = 1

	jsr $9f11	; get buffer number
	asl
	tax
	stx bufx2+1
	lda $0b,x	; start
	sta $0b		; track
	sta $4d
	lda $0c,x	; and
	sta $0c		; sector
	sta $4e
copy	jsr get_byte	; get byte count
	beq empty	; empty file
	sta cnt		; store

	ldy #$01
rcv	iny
	beq more
	jsr get_byte	; block data
	sta $0300,y
	dec cnt
	bne rcv		; more data
	beq last

more	jsr chkerr
	jsr $b668
	ldy $4e		; sector
	lda $4d		; track
	jmp m1
empty	ldy #$01
last	jsr chkerr
	lda #$00
	sta $4d
m1	sta $0300
	sty $0301

	lda #$90
	ldx #$00
	jsr $ff54
	cmp #$02
	bcs error
	jsr noerr
	ldx chn
	inc $0249,x
	bne bufx2
	inc $0250,x

bufx2	ldx #$00
	lda $4e
	sta $0c
	sta $0c,x

	lda $4d
	sta $0b
	sta $0b,x
	bne copy
	jmp $99bf	; close and exit

error	jmp $ff2d

