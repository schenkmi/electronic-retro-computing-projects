// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Reflection;
using PaytonByrd.ProcessConfiguration;

namespace PaytonByrd_ProcessConfigurationTests
{
    /// <summary>
    ///This is a test class for PaytonByrd.ProcessConfiguration.ProcessParameterAttribute and is intended
    ///to contain all PaytonByrd.ProcessConfiguration.ProcessParameterAttribute Unit Tests
    ///</summary>
    [TestClass()]
    public class ProcessParameterAttributeTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ProcessParameterAttribute (string, string, bool, string, string)
        ///</summary>
        [DeploymentItem("PaytonByrd.ProcessConfiguration.dll")]
        [TestMethod()]
        [ExpectedException(typeof(ArgumentNullException))]
        public void ConstructorTest_InvalidNullParameterName()
        {
            string pv_strParameterName = null;

            string pv_strParameterAbbreviation = null;

            bool pv_blnParameterRequired = false;

            string pv_strValidationExpression = null;

            string pv_strParameterHelpResource = null;

            Attribute target = new PaytonByrd.ProcessConfiguration.ProcessParameterAttribute(
                pv_strParameterName,
                pv_strParameterAbbreviation,
                pv_blnParameterRequired,
                pv_strValidationExpression,
                pv_strParameterHelpResource);

            Assert.Fail("Did not throw ArgumentNullException.");
        }

        /// <summary>
        ///A test for ProcessParameterAttribute (string, string, bool, string, string)
        ///</summary>
        [DeploymentItem("PaytonByrd.ProcessConfiguration.dll")]
        [TestMethod()]
        public void ConstructorTest_SunnyDay()
        {
            string pv_strParameterName = "--help";

            string pv_strParameterAbbreviation = "-?";

            bool pv_blnParameterRequired = false;

            string pv_strValidationExpression = null;

            string pv_strParameterHelpResource = null;

            PaytonByrd.ProcessConfiguration.ProcessParameterAttribute target = 
                new PaytonByrd.ProcessConfiguration.ProcessParameterAttribute(
                    pv_strParameterName,
                    pv_strParameterAbbreviation,
                    pv_blnParameterRequired,
                    pv_strValidationExpression,
                    pv_strParameterHelpResource);

            Assert.IsNotNull(target);
            Assert.Equals(target.ParameterName, pv_strParameterName);
            Assert.Equals(target.ParameterAbbreviation, pv_strParameterAbbreviation);
            Assert.Equals(target.ValidationExpression, pv_strValidationExpression);
            Assert.Equals(target.ParameterHelpResource, pv_strParameterHelpResource);
        }

        /// <summary>
        ///A test for Validate (object, PropertyInfo)
        ///</summary>
        [DeploymentItem("PaytonByrd.ProcessConfiguration.dll")]
        [TestMethod()]
        public void ValidateTest()
        {
            MockObject pv_objInstance = new MockObject(); 

            PropertyInfo pv_objPropertyInfo = typeof(MockObject).GetProperty("MockProperty"); 

            PaytonByrd_ProcessConfigurationTests.PaytonByrd_ProcessConfiguration_ProcessParameterAttributeAccessor.Validate(pv_objInstance, pv_objPropertyInfo);
        }

        public class MockObject
        {
            [ProcessParameter("--MockParameter", "-mp", true, null, null)]
            public string MockProperty
            {
                get { return string.Empty; }
            }

            public MockObject()
            {
            }
        }

    }


}
