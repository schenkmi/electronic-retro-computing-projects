// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace PaytonByrd_GenericHelpersTests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class PaytonByrd_GenericHelpers_ArgumentAssertAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::PaytonByrd.GenericHelpers.ArgumentAssert));
    
    internal PaytonByrd_GenericHelpers_ArgumentAssertAccessor() : 
            base(m_privateType) {
    }
    
    internal static void IsNotNull(object pv_objValue, string pv_strName) {
        object[] args = new object[] {
                pv_objValue,
                pv_strName};
        m_privateType.InvokeStatic("IsNotNull", new System.Type[] {
                    typeof(object),
                    typeof(string)}, args);
    }
    
    internal static void IsInRange(object pv_objValue, string pv_strName, object pv_objLow, object pv_objHigh) {
        object[] args = new object[] {
                pv_objValue,
                pv_strName,
                pv_objLow,
                pv_objHigh};
        m_privateType.InvokeStatic("IsInRange", new System.Type[] {
                    typeof(object),
                    typeof(string),
                    typeof(object),
                    typeof(object)}, args);
    }
}
}
