MEMORY {
	ROM0LO:          start = $8000, size = $1E00, fill = yes, fillval = $ff, file = %O;
	ROMIO:           start = $9E00, size = $0200, fill = yes, fillval = $ff, file = %O;
	ROM0HI:          start = $A000, size = $1FA0, fill = yes, fillval = $ff, file = %O;
	ROM0TOP:         start = $BFA0, size = $005A, fill = yes, fillval = $ff, file = %O;
	ULTIMAX_VECTORS: start = $BFFA, size = $0006, fill = yes, fillval = $ff, file = %O;

	L0220:   start = $0220, size = $0060;
	IO:      start = $DE00, size = $0200;
	BASIC:   start = $0801, size = $97FF;
	DRIVE4A: start = $0400, size = $0400;
	DRIVE4B: start = $0400, size = $0400;
	DRIVE5:  start = $0500, size = $0300;
	FREEZER: start = $FFA0, size = $005A;
	L0100:   start = $0100, size = $00FF;
}

SEGMENTS {
	header:            load = ROM0LO, type = ro;
	vectors:           load = ROM0LO, type = ro;
	basic_init:        load = ROM0LO, type = ro;
	drive:             load = ROM0LO, type = ro;
	basic_commands:    load = ROM0LO, type = ro;
	pack_code:         load = ROM0LO, run = L0100, type = ro, define = yes;
	unpack_header:     load = ROM0LO, run = BASIC, type = ro, define = yes;
	screen_editor:     load = ROM0LO, type = ro;
	desktop_helper:    load = ROM0LO, type = ro;
	fast_format:       load = ROM0LO, type = ro;
	fast_format_drive: load = ROM0LO, run = DRIVE4A, type = ro, define = yes;
	wrappers:          load = ROM0LO, type = ro;
	junk:              load = ROM0LO, type = ro;
	speeder_a:         load = ROM0LO, type = ro;
	tape_stack_code:   load = ROM0LO, type = ro;
	speeder_b:         load = ROM0LO, type = ro;
	drive_code_load:   load = ROM0LO, run = DRIVE4B, type = ro, define = yes;

	romio:             load = ROMIO, run = IO, type = ro;

	basic_vectors:     load = ROM0HI, type = ro;
	printer:           load = ROM0HI, type = ro;
	drive_code_save:   load = ROM0HI, run = DRIVE5, type = ro, define = yes;
	speeder_c:         load = ROM0HI, type = ro;
	tape:              load = ROM0HI, type = ro;
	basic_keywords:    load = ROM0HI, type = ro;
	monitor_a:         load = ROM0HI, type = ro;
	monitor_ram_code:  load = ROM0HI, run = L0220, type = ro, define = yes;
    monitor_b:         load = ROM0HI, type = ro;
    asmchars1:         load = ROM0HI, type = ro, define = yes;
    asmchars2:         load = ROM0HI, type = ro, define = yes;
    mnemos1:           load = ROM0HI, type = ro, define = yes;
    mnemos2:           load = ROM0HI, type = ro, define = yes;
    monitor_c:         load = ROM0HI, type = ro;
	freezer:           load = ROM0TOP, run = FREEZER, type = ro;
	freezer_vectors:   load = ULTIMAX_VECTORS, type = ro;
}
