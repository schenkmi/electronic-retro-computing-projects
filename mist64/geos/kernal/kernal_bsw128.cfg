MEMORY {
	START:        start = $5000, size = $0400, fill = yes, file = %O;
	PADDING1:     start = $5400, size = $4980, fill = yes, file = %O;
	LOKERNAL:     start = $9D80, size = $0280, fill = yes, file = %O;
	PADDING2:     start = $A000, size = $2000, fill = yes, file = %O;
	KERNALHDR:    start = $C000, size = $0100, fill = yes, file = %O;
	KERNAL:       start = $C100, size = $0F00, fill = yes, file = %O;
	IOKERNAL:     start = $D000, size = $1000, fill = yes, file = %O;
	UPPERKERNAL:  start = $E000, size = $1D00, fill = yes, file = %O;
	PADDING3:     start = $FD00, size = $0180, fill = yes, file = %O;
	HIKERNAL:     start = $FE80, size = $0080, fill = yes, file = %O;
	PADDING4:     start = $FF00, size = $0005, fill = yes, file = %O;
	TOPKERNAL:    start = $FF05, size = $00F0, fill = yes, file = %O;
	VECTORS:      start = $FFF5, size = $000B, fill = yes, file = %O;

	VARS:         start = $86C0, size = $0940;
}

SEGMENTS {
	vars:               load = VARS, type = bss;

	# start: $5000-
	start:              load = START, type = ro; # not the original start code!

#unused
	init3:              load = START, type = ro; # doesn't seem to exist!
	hw2:                load = START, type = ro; # doesn't seem to exist!

	# lokernal: $9D80-$9FFF
	low_jmptab:         load = LOKERNAL, type = ro;
	banking:            load = LOKERNAL, type = ro;
	files2:             load = LOKERNAL, type = ro;
	files1a2a:          load = LOKERNAL, type = ro;
	files1a2b:          load = LOKERNAL, type = ro;
	files1b:            load = LOKERNAL, type = ro;
	serial1:            load = LOKERNAL, type = ro;
	reu:                load = LOKERNAL, type = ro;
	vdc_init2:          load = LOKERNAL, type = ro;
	files6b:            load = LOKERNAL, type = ro;
	mainloop3:          load = LOKERNAL, type = ro;

	# kernal header: $c000
	header:             load = KERNALHDR, type = ro;

	# ...
	tobasic2:           load = KERNALHDR, type = ro;
	mainloop1:          load = KERNALHDR, type = ro;

	# kernal jump table: $c100
	jumptab:            load = KERNAL, type = ro;

	# kernal code
	files3:             load = KERNAL, type = ro;
	misc:               load = KERNAL, type = ro;
	graph5:             load = KERNAL, type = ro;
	compat:             load = KERNAL, type = ro;
	mouse4:             load = KERNAL, type = ro;
	irq:                load = KERNAL, type = ro;
	keyboard1:          load = KERNAL, type = ro;
	keyboard2:          load = KERNAL, type = ro;
	keyboard3:          load = KERNAL, type = ro;
	init4:              load = KERNAL, type = ro;
	graph3b:            load = KERNAL, type = ro;
	graph2b:            load = KERNAL, type = ro;
	graph2d:            load = KERNAL, type = ro;
	graph2f:            load = KERNAL, type = ro;
	graph2h:            load = KERNAL, type = ro;
	graph2j:            load = KERNAL, type = ro;
	mode:               load = KERNAL, type = ro;
	graph2k:            load = KERNAL, type = ro;
	graph2m:            load = KERNAL, type = ro;
	conio2:             load = KERNAL, type = ro;
	graph1:             load = KERNAL, type = ro;
	memory3:            load = KERNAL, type = ro;
	bitmask2:           load = KERNAL, type = ro;
	mouseptr:           load = KERNAL, type = ro;
	hw1a:               load = KERNAL, type = ro;
	load1d:             load = KERNAL, type = ro;
	load1c:             load = KERNAL, type = ro;
	math1a1:            load = KERNAL, type = ro;
	math1a2:            load = KERNAL, type = ro;
	math1c1:            load = KERNAL, type = ro;
	math1c2:            load = KERNAL, type = ro;
	iowrapper:          load = KERNAL, type = ro;
	vdc_base:           load = KERNAL, type = ro;
	memory2:            load = KERNAL, type = ro;
	panic1:             load = KERNAL, type = ro;
	panic3:             load = KERNAL, type = ro;
	panic2:             load = KERNAL, type = ro;
	serial2:            load = KERNAL, type = ro;
	sprites:            load = KERNAL, type = ro;
	process3a:          load = KERNAL, type = ro;
	process3b:          load = KERNAL, type = ro;
	process3c:          load = KERNAL, type = ro;
	process1:           load = KERNAL, type = ro;
	time1:              load = KERNAL, type = ro;
	time2:              load = KERNAL, type = ro;
	dlgbox1b:           load = KERNAL, type = ro;
	patterns:           load = KERNAL, type = ro;
	# D000
	iojmptab:           load = IOKERNAL, type = ro;
	mouse1:             load = IOKERNAL, type = ro;
	memory_128:         load = IOKERNAL, type = ro;
	math2:              load = IOKERNAL, type = ro;
	math1d:             load = IOKERNAL, type = ro;
	math1b:             load = IOKERNAL, type = ro;
	process3aa:         load = IOKERNAL, type = ro;
	inline:             load = IOKERNAL, type = ro;
	graph2l1:           load = IOKERNAL, type = ro;
	process2:           load = IOKERNAL, type = ro;
	dlgbox1k:           load = IOKERNAL, type = ro;
	dlgbox2:            load = IOKERNAL, type = ro;
	dlgbox1i:           load = IOKERNAL, type = ro;
	junk_front1:        load = IOKERNAL, type = ro;
	# E000
	bank_jmptab_front:  load = UPPERKERNAL, type = ro;
	conio4:             load = UPPERKERNAL, type = ro;
	conio1:             load = UPPERKERNAL, type = ro;
	conio3a:            load = UPPERKERNAL, type = ro;
	menu2:              load = UPPERKERNAL, type = ro;
	conio6:             load = UPPERKERNAL, type = ro;
	load3:              load = UPPERKERNAL, type = ro;
	files6a:            load = UPPERKERNAL, type = ro;
	files6c:            load = UPPERKERNAL, type = ro;
	deskacc1:           load = UPPERKERNAL, type = ro;
	load4b:             load = UPPERKERNAL, type = ro;
	deskacc2:           load = UPPERKERNAL, type = ro;
	files7:             load = UPPERKERNAL, type = ro; # SerialHiCompare
	deskacc3:           load = UPPERKERNAL, type = ro;
	files8:             load = UPPERKERNAL, type = ro;
	files10:            load = UPPERKERNAL, type = ro;
	dlgbox1a:           load = UPPERKERNAL, type = ro;
	dlgbox1c:           load = UPPERKERNAL, type = ro;
	dlgbox1f:           load = UPPERKERNAL, type = ro;
	dlgbox1d:           load = UPPERKERNAL, type = ro;
	dlgbox1e2:          load = UPPERKERNAL, type = ro;
	dlgbox1h:           load = UPPERKERNAL, type = ro;
	dlgbox1j:           load = UPPERKERNAL, type = ro;
	load1a:             load = UPPERKERNAL, type = ro;
	init1:              load = UPPERKERNAL, type = ro;
	hw1b:               load = UPPERKERNAL, type = ro;
	init2:              load = UPPERKERNAL, type = ro;
	memory1a:           load = UPPERKERNAL, type = ro;
	memory1b:           load = UPPERKERNAL, type = ro;
	hw3:                load = UPPERKERNAL, type = ro;
	load2:              load = UPPERKERNAL, type = ro;
	mouse2:             load = UPPERKERNAL, type = ro;
	menu1:              load = UPPERKERNAL, type = ro;
	menu3:              load = UPPERKERNAL, type = ro;
	icon1:              load = UPPERKERNAL, type = ro;
	mouse3:             load = UPPERKERNAL, type = ro;
	icon2:              load = UPPERKERNAL, type = ro;
	junk_front2:        load = UPPERKERNAL, type = ro;

	# hikernal: $fe80-
	mouseproxy:         load = HIKERNAL, type = ro;
	dlgbox1g:           load = HIKERNAL, type = ro;
	vdc_init1:          load = HIKERNAL, type = ro;
	junk_front3:        load = HIKERNAL, type = ro;
	irq_front:          load = TOPKERNAL, type = ro;
	dlgbox1e1:          load = TOPKERNAL, type = ro;
	load1b:             load = TOPKERNAL, type = ro;
	graph2l2:           load = TOPKERNAL, type = ro;
	junk_front4:        load = TOPKERNAL, type = ro;
	cbm_jmptab:         load = TOPKERNAL, type = ro;
	vectors_front:      load = VECTORS, type = ro;
}
