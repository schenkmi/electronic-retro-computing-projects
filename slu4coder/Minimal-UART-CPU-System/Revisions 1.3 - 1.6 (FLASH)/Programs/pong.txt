          #org 0xc000
; **************************************
; *****                            *****
; ***** MINPONG by C. Herting 2021 *****
; *****                            *****
; **************************************
          LDI 0xfe STA 0xffff            ; init stack
          LDI 25 STA spos                ; initialize
          LDI 0 STA xpos+0 LDI 13 STA xpos+1
          LDI 0 STA ypos+0 LDI 1 STA ypos+1
          LDI 80 STA xvel LDI 127 STA yvel

start:    INP BEQ movitx

; *********************
; ***** Steuerung *****
; *********************
          CPI ' '             ; key space
          BNE nextkey1
            LDA ypos+1
            CPI 25
            BCC movitx
              CLB ypos+0 CLB ypos+1
              LDI 127 STA yvel
nextkey1: CPI 'a'             ; key a
          BNE nextkey2
            LDA spos
            CPI 1
            BEQ nextkey2
              DEB spos
              JPA movitx
nextkey2: CPI 'd'             ; key d
          BNE movitx
            LDA spos
            CPI 51            ; width - 10
            BEQ movitx
              INB spos

; ********************
; ***** Bewegung *****
; ********************
movitx:   LDA xvel            ; move ball in x
          CPI 0
          BMI xneg
            LDA xvel          ; vx >= 0
            ADW xpos
            LDA xpos+1
            CPI 60            ; right wall
            BNE movity
              NEB xvel
              JPA movity
xneg:     LDA xvel            ; vx < 0
          NEG
          SBW xpos
          LDA xpos+1
          CPI 1
          BNE movity
            NEB xvel

movity:   LDA yvel            ; move ball in y
          CPI 0
          BMI yneg
            LDA yvel          ; vy >= 0
            ADW ypos
            LDA ypos+1
              CPI 22          ; ball at racket?
              BCC clear
                BEQ rackettest  ; test for racket
                  CPI 25
                  BCC clear
                    CLB yvel
                    JPA clear
yneg:     LDA yvel            ; vy < 0
          NEG
          SBW ypos
          LDA ypos+1
          CPI 1
          BNE clear
            NEB yvel
            JPA clear

; ***********************************
; ***** Ball-Schlaeger-Kollision *****
; ***********************************
rackettest: LDA xpos+1
            CPA spos
            BCC clear
              SBI 10
              BCC rackhit
                CPA spos
                BCS clear
rackhit:          NEB yvel

; *********************************
; ***** Zeichnen eines frames *****
; *********************************
clear:    LDI 27 OUT JPS _WaitUART      ; clear screen
          LDI '[' OUT JPS _WaitUART
          LDI 'H' OUT JPS _WaitUART
          LDI 27 OUT JPS _WaitUART
          LDI '[' OUT JPS _WaitUART
          LDI 'J' OUT JPS _WaitUART
          LDA spos PHS JPS _CursorX PLS ; to racket pos
          LDI 23 PHS JPS _CursorY PLS
          LDI 10                        ; draw racket?
          STA var
rackloop: LDI '=' OUT JPS _WaitUART
          DEB var
          BNE rackloop

          LDA ypos+1                    ; draw ball?
          CPI 25
          BCS gameover                  ; do not draw
            PHS JPS _CursorY PLS
            LDA xpos+1 PHS JPS _CursorX PLS
            LDI 'o' OUT JPS _WaitUART   ; Ball malen
            JPA frameend

gameover: LDI 11 PHS JPS _CursorX PLS
          LDI 11 PHS JPS _CursorY PLS
          LDI <text PHS LDI >text PHS
          JPS _Print PLS PLS

frameend: CLW var                       ; wait
          LDI 16 STA var+1
waitloop: DEW var BNE waitloop            
          JPA start

text:     'GAME OVER - PRESS SPACE TO TRY AGAIN', 0

#end

#org 0xef00              ; put variables into temp RAM

spos:         0          ; racket pos
xpos:         0, 0       ; LSB, MSB ball x
ypos:         0, 0       ; LSB, MSB ball y
xvel:         0          ; signed speed vector of the ball
yvel:         0          ; 2nd component
var:          0, 0       ; for counting

#end                     ; use these OS API routines

#org 0xf006   _Print:    ; Prints a null-terminated string
#org 0xf00c   _WaitUART: ; Waits for UART transmission
#org 0xf022   _CursorX:  ; set the cursor x position 1..60
#org 0xf025   _CursorY:  ; set the cursor y position 1..25