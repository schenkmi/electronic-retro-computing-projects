; ***********************************************************
; *****                                                 *****
; ***** Demonstration of the Minimal VGA Extension Card *****
; *****                                                 *****
; *****            by C. Herting 17.11.2021             *****
; *****                                                 *****
; ***********************************************************
#org 0x8000			LDI 0xfe STA 0xffff													; initialize the stack
							
								JPS VGA_Init																; clear entire VRAM
					
filltext:				LDI 0xff PHS JPS VGA_Fill PLS								; fill pixel area

fredo:					LDI <text PHS LDI >text PHS									; push text address onto stack
								PHS JPS _Random PLS LSR LSR PHS							; API _Random function: push random x value 0..64
								PHS JPS _Random PLS LSR LSR LSR PHS					; API _Random function: push random y value 0..32
								JPS VGA_Print																; call the print function
								PLS PLS PLS PLS															; clean up the stack
								INP BEQ fredo																; key pressed?

								LDI 0x00 PHS JPS VGA_Fill PLS								; clear pixel area
redo:						PHS JPS _Random															; API _Random function
								PHS JPS _Random
								PHS JPS _Random															; push x_msb, x_lsb, y
								JPS VGA_SetPixel PLS PLS PLS
								
								INP BEQ redo																; key pressed?
						
								JPA _Prompt																	; API _Prompt function: back to OS prompt
						
text:						'Hello, World!', 0

; *******************************************************************************
; Initializes the entire video RAM including the blank areas to zero (not needed)
; push:
; pull:
; *******************************************************************************
VGA_Init:				LDI 0xff STA VGA_ADDR+0											; set the index to end of VRAM
								LDI 0x3f STA VGA_ADDR+1
	vi_loop:			CLB VGA_DATA																; clear VRAM at that index
								DEW VGA_ADDR BCS vi_loop										; decrement VRAM index down to zero
									RTS

; *******************************************************************************
; Fills pixel area with <val>
; push: <val>
; pull: --
; *******************************************************************************
VGA_Fill:				LDA VGA_INDEX+0 STA VGA_ADDR+0							; set start index
								LDA VGA_INDEX+1 STA VGA_ADDR+1
								CLB vf_y
	vf_loopy:			CLB vf_x			
	vf_loopx:			LDS 3 STA VGA_DATA
								INW VGA_ADDR
								INB vf_x CPA VGA_XBYTES BCC vf_loopx				; area byte width
									LDA VGA_XBLANK ADW VGA_ADDR								; byte stride to next VRAM pixel row
									INB vf_y CPA VGA_YLINES BCC vf_loopy			; area pixel height
										RTS
	vf_x:					0
	vf_y:					0
	
; *******************************************************************************
; Prints text inside pixel area at char position (x,y) using the charset provided
; push: text_LSB, text_MSB, x, y
; pull: --, --, --, --
; *******************************************************************************
VGA_Print:			LDS 3 CPA VGA_YBYTES BCS vp_exit
									LSL ADA VGA_INDEX+1 STA vp_index+1				; multiply y with 8*64=512
								LDS 4 CPA VGA_XBYTES BCS vp_exit
									ADA VGA_INDEX+0 STA vp_index+0
								LDS 5 STA vp_tptr+1													; copy text pointer
								LDS 6 STA vp_tptr+0
	vp_tloop: 		LDA vp_index+0 STA vp_write+0								; copy index to write
								LDA vp_index+1 STA vp_write+1
								LDI <VGA_CHARSET STA vp_cptr+0							; init char data pointer
								LDI >VGA_CHARSET STA vp_cptr+1
								LDR vp_tptr CPI 0 BEQ vp_exit								; load next char
									ADW vp_cptr																; start of current char data
									LDI 8 STA vp_cnt
	vp_cloop:				LDA vp_write+0 STA VGA_ADDR+0							; set VRAM index register
									LDA vp_write+1 STA VGA_ADDR+1
									LDR vp_cptr																; get char byte
									STA VGA_DATA															; write char byte
									INB vp_cptr+1															; move to next char data row
									LDI 64 ADW vp_write												; move down to next write location
									DEB vp_cnt BNE vp_cloop
										INB vp_index+0 SBA VGA_INDEX+0 CPA VGA_XBYTES BCS vp_exit				; do not paint into the right border
											INW vp_tptr
											JPA vp_tloop
	vp_exit:  				RTS
	vp_tptr:			0x0000
	vp_cptr:			0x0000
	vp_index:			0x0000
	vp_write:			0x0000
	vp_cnt:				0x00

; *******************************************************************************
; Sets a pixel at position (x, y) 
; push: x_LSB, x_MSB, y
; pull: --, --, --
; *******************************************************************************
VGA_SetPixel:		LDS 3 CPA VGA_YLINES BCS vs_exit
								LSR STA vs_index+1 LDI 0 ROR STA vs_index+0
								LDA vs_index+1 LSR STA vs_index+1
								LDA vs_index+0 ROR STA vs_index+0						; y *= 64
								LDA VGA_INDEX+1 ADB vs_index+1							; y += y-start
								LDS 5 STA vs_x+0														; retrieve x
								LDS 4 LSR																		; shift the x_msb's 1st bit into carray
								LDA vs_x+0 ROR LSR LSR											; x /= 8
								CPA VGA_XBYTES BCS vs_exit
									ADA VGA_INDEX+0 ADW vs_index							; vs_index = 64*(ystart+y) + (xstart+x) with blank area checked
								LDA vs_index+0 STA VGA_ADDR+0								; set VRAM index register
								LDA vs_index+1 STA VGA_ADDR+1
								LDA VGA_DATA STA vs_buf											; read out VRAM index
								LDS 5 LSL LSL LSL LSL LSL LSL ROL ROL ROL		; cut out the lower 8 bits
								STA vs_x																		; calculate the bit number to set
								LDI 8 STA vs_count
	vs_loop:			DEB vs_count BCC vs_done
									CPA vs_x BEQ vs_ispos											; is it the current pixel?
										LDA vs_buf LSL LDA vs_buf ROL						; shift left with bit 7 to bit 0
										STA vs_buf JPA vs_loop
	vs_ispos:				LDA vs_buf SEC ROL												; current pixel: enforce shifting in a "1"
									STA vs_buf JPA vs_loop
	vs_done:			LDA vs_buf STA VGA_DATA											; write back the new byte
	vs_exit:			RTS
	vs_index:			0x0000
	vs_x:					0x00
	vs_count:			0x00
	vs_buf:				0x00

																														; CHARACTER SET (256 x 8 bytes)
VGA_CHARSET:		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xc0,0x00,0x18,0x66,0x66,0x18,0x62,0x3c,0x06,0x0c,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x18,0x3c,0x3c,0x06,0x7e,0x3c,0x7e,0x3c,0x3c,0x00,0x00,0x0e,0x00,0x70,0x3c,0x3c,0x18,0x7c,0x3c,0x78,0x7e,0x7e,0x3c,0x66,0x3c,0x1e,0x66,0x60,0x63,0x66,0x3c,0x7c,0x3c,0x7c,0x3c,0x7e,0x66,0x66,0x63,0x66,0x66,0x7e,0x3c,0x00,0x3c,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x18,0x70,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0xff,0xff,0x01,0x80,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0xe7,0x99,0x99,0xe7,0x9d,0xc3,0xf9,0xf3,0xcf,0xff,0xff,0xff,0xff,0xff,0xff,0xc3,0xe7,0xc3,0xc3,0xf9,0x81,0xc3,0x81,0xc3,0xc3,0xff,0xff,0xf1,0xff,0x8f,0xc3,0xc3,0xe7,0x83,0xc3,0x87,0x81,0x81,0xc3,0x99,0xc3,0xe1,0x99,0x9f,0x9c,0x99,0xc3,0x83,0xc3,0x83,0xc3,0x81,0x99,0x99,0x9c,0x99,0x99,0x81,0xc3,0xff,0xc3,0xff,0xff,0xc3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf1,0xe7,0x8f,0xff,0xff,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xe0,0x00,0x18,0x66,0x66,0x3e,0x66,0x66,0x0c,0x18,0x18,0x66,0x18,0x00,0x00,0x00,0x03,0x66,0x18,0x66,0x66,0x0e,0x60,0x66,0x66,0x66,0x66,0x00,0x00,0x18,0x00,0x18,0x66,0x66,0x3c,0x66,0x66,0x6c,0x60,0x60,0x66,0x66,0x18,0x0c,0x6c,0x60,0x77,0x76,0x66,0x66,0x66,0x66,0x66,0x18,0x66,0x66,0x63,0x66,0x66,0x06,0x30,0x60,0x0c,0x18,0x00,0x66,0x00,0x60,0x00,0x06,0x00,0x0e,0x00,0x60,0x18,0x06,0x60,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x00,0x10,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x7f,0xfe,0x03,0xc0,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0xe7,0x99,0x99,0xc1,0x99,0x99,0xf3,0xe7,0xe7,0x99,0xe7,0xff,0xff,0xff,0xfc,0x99,0xe7,0x99,0x99,0xf1,0x9f,0x99,0x99,0x99,0x99,0xff,0xff,0xe7,0xff,0xe7,0x99,0x99,0xc3,0x99,0x99,0x93,0x9f,0x9f,0x99,0x99,0xe7,0xf3,0x93,0x9f,0x88,0x89,0x99,0x99,0x99,0x99,0x99,0xe7,0x99,0x99,0x9c,0x99,0x99,0xf9,0xcf,0x9f,0xf3,0xe7,0xff,0x99,0xff,0x9f,0xff,0xf9,0xff,0xf1,0xff,0x9f,0xe7,0xf9,0x9f,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe7,0xff,0xff,0xff,0xff,0xff,0xff,0xe7,0xe7,0xe7,0xff,0xef,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x70,0x00,0x18,0x66,0xff,0x60,0x0c,0x3c,0x18,0x30,0x0c,0x3c,0x18,0x00,0x00,0x00,0x06,0x6e,0x38,0x06,0x06,0x1e,0x7c,0x60,0x0c,0x66,0x66,0x18,0x18,0x30,0x7e,0x0c,0x06,0x6e,0x66,0x66,0x60,0x66,0x60,0x60,0x60,0x66,0x18,0x0c,0x78,0x60,0x7f,0x7e,0x66,0x66,0x66,0x66,0x60,0x18,0x66,0x66,0x63,0x3c,0x66,0x0c,0x30,0x30,0x0c,0x3c,0x00,0x6e,0x3c,0x60,0x3c,0x06,0x3c,0x18,0x3e,0x60,0x00,0x00,0x60,0x18,0x66,0x7c,0x3c,0x7c,0x3e,0x7c,0x3e,0x7e,0x66,0x66,0x63,0x66,0x66,0x7e,0x18,0x18,0x18,0x00,0x30,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x1c,0x38,0x3f,0xfc,0x07,0xe0,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0xe7,0x99,0x00,0x9f,0xf3,0xc3,0xe7,0xcf,0xf3,0xc3,0xe7,0xff,0xff,0xff,0xf9,0x91,0xc7,0xf9,0xf9,0xe1,0x83,0x9f,0xf3,0x99,0x99,0xe7,0xe7,0xcf,0x81,0xf3,0xf9,0x91,0x99,0x99,0x9f,0x99,0x9f,0x9f,0x9f,0x99,0xe7,0xf3,0x87,0x9f,0x80,0x81,0x99,0x99,0x99,0x99,0x9f,0xe7,0x99,0x99,0x9c,0xc3,0x99,0xf3,0xcf,0xcf,0xf3,0xc3,0xff,0x91,0xc3,0x9f,0xc3,0xf9,0xc3,0xe7,0xc1,0x9f,0xff,0xff,0x9f,0xe7,0x99,0x83,0xc3,0x83,0xc1,0x83,0xc1,0x81,0x99,0x99,0x9c,0x99,0x99,0x81,0xe7,0xe7,0xe7,0xff,0xcf,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x38,0x00,0x18,0x00,0x66,0x3c,0x18,0x38,0x00,0x30,0x0c,0xff,0x7e,0x00,0x7e,0x00,0x0c,0x76,0x18,0x0c,0x1c,0x66,0x06,0x7c,0x18,0x3c,0x3e,0x00,0x00,0x60,0x00,0x06,0x0c,0x6e,0x7e,0x7c,0x60,0x66,0x78,0x78,0x6e,0x7e,0x18,0x0c,0x70,0x60,0x6b,0x7e,0x66,0x7c,0x66,0x7c,0x3c,0x18,0x66,0x66,0x6b,0x18,0x3c,0x18,0x30,0x18,0x0c,0x7e,0x00,0x6e,0x06,0x7c,0x60,0x3e,0x66,0x3e,0x66,0x7c,0x38,0x06,0x6c,0x18,0x7f,0x66,0x66,0x66,0x66,0x66,0x60,0x18,0x66,0x66,0x6b,0x3c,0x66,0x0c,0x70,0x18,0x0e,0x3b,0x7f,0x1f,0xff,0xf8,0x1f,0xff,0xf8,0x1f,0xff,0xf8,0xff,0x07,0xe0,0x0f,0xf0,0x1f,0xf8,0x0f,0xf0,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0x00,0x0f,0xf0,0xff,0xe7,0xff,0x99,0xc3,0xe7,0xc7,0xff,0xcf,0xf3,0x00,0x81,0xff,0x81,0xff,0xf3,0x89,0xe7,0xf3,0xe3,0x99,0xf9,0x83,0xe7,0xc3,0xc1,0xff,0xff,0x9f,0xff,0xf9,0xf3,0x91,0x81,0x83,0x9f,0x99,0x87,0x87,0x91,0x81,0xe7,0xf3,0x8f,0x9f,0x94,0x81,0x99,0x83,0x99,0x83,0xc3,0xe7,0x99,0x99,0x94,0xe7,0xc3,0xe7,0xcf,0xe7,0xf3,0x81,0xff,0x91,0xf9,0x83,0x9f,0xc1,0x99,0xc1,0x99,0x83,0xc7,0xf9,0x93,0xe7,0x80,0x99,0x99,0x99,0x99,0x99,0x9f,0xe7,0x99,0x99,0x94,0xc3,0x99,0xf3,0x8f,0xe7,0xf1,0xc4,0x80,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x1c,0x00,0x00,0x00,0xff,0x06,0x30,0x67,0x00,0x30,0x0c,0x3c,0x18,0x00,0x00,0x00,0x18,0x66,0x18,0x30,0x06,0x7f,0x06,0x66,0x18,0x66,0x06,0x00,0x00,0x30,0x7e,0x0c,0x18,0x60,0x66,0x66,0x60,0x66,0x60,0x60,0x66,0x66,0x18,0x0c,0x78,0x60,0x63,0x6e,0x66,0x60,0x66,0x78,0x06,0x18,0x66,0x66,0x7f,0x3c,0x18,0x30,0x30,0x0c,0x0c,0x18,0x00,0x60,0x3e,0x66,0x60,0x66,0x7e,0x18,0x66,0x66,0x18,0x06,0x78,0x18,0x7f,0x66,0x66,0x66,0x66,0x60,0x3c,0x18,0x66,0x66,0x7f,0x18,0x66,0x18,0x18,0x18,0x18,0x6e,0x7f,0x1f,0xff,0xf8,0x1f,0xff,0xf8,0x1f,0xff,0xf8,0xff,0x0f,0xf0,0x07,0xe0,0x0f,0xf0,0x1f,0xf8,0x00,0x00,0x00,0x0f,0x0f,0x0f,0x0f,0xf0,0xf0,0xf0,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xf9,0xcf,0x98,0xff,0xcf,0xf3,0xc3,0xe7,0xff,0xff,0xff,0xe7,0x99,0xe7,0xcf,0xf9,0x80,0xf9,0x99,0xe7,0x99,0xf9,0xff,0xff,0xcf,0x81,0xf3,0xe7,0x9f,0x99,0x99,0x9f,0x99,0x9f,0x9f,0x99,0x99,0xe7,0xf3,0x87,0x9f,0x9c,0x91,0x99,0x9f,0x99,0x87,0xf9,0xe7,0x99,0x99,0x80,0xc3,0xe7,0xcf,0xcf,0xf3,0xf3,0xe7,0xff,0x9f,0xc1,0x99,0x9f,0x99,0x81,0xe7,0x99,0x99,0xe7,0xf9,0x87,0xe7,0x80,0x99,0x99,0x99,0x99,0x9f,0xc3,0xe7,0x99,0x99,0x80,0xe7,0x99,0xe7,0xe7,0xe7,0xe7,0x91,0x80,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x0e,0x00,0x00,0x00,0x66,0x7c,0x66,0x66,0x00,0x18,0x18,0x66,0x18,0x18,0x00,0x18,0x30,0x66,0x18,0x60,0x66,0x06,0x66,0x66,0x18,0x66,0x66,0x18,0x18,0x18,0x00,0x18,0x00,0x66,0x66,0x66,0x66,0x6c,0x60,0x60,0x66,0x66,0x18,0x6c,0x6c,0x60,0x63,0x66,0x66,0x60,0x3c,0x6c,0x66,0x18,0x66,0x3c,0x77,0x66,0x18,0x60,0x30,0x06,0x0c,0x18,0x00,0x66,0x66,0x66,0x60,0x66,0x60,0x18,0x3e,0x66,0x18,0x06,0x6c,0x18,0x6b,0x66,0x66,0x7c,0x3e,0x60,0x06,0x18,0x66,0x3c,0x3e,0x3c,0x3e,0x30,0x18,0x18,0x18,0x00,0x30,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x1c,0x38,0x00,0x00,0x07,0xe0,0x3f,0xfc,0x00,0x00,0x00,0x0f,0x0f,0x0f,0x0f,0xf0,0xf0,0xf0,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0x99,0x83,0x99,0x99,0xff,0xe7,0xe7,0x99,0xe7,0xe7,0xff,0xe7,0xcf,0x99,0xe7,0x9f,0x99,0xf9,0x99,0x99,0xe7,0x99,0x99,0xe7,0xe7,0xe7,0xff,0xe7,0xff,0x99,0x99,0x99,0x99,0x93,0x9f,0x9f,0x99,0x99,0xe7,0x93,0x93,0x9f,0x9c,0x99,0x99,0x9f,0xc3,0x93,0x99,0xe7,0x99,0xc3,0x88,0x99,0xe7,0x9f,0xcf,0xf9,0xf3,0xe7,0xff,0x99,0x99,0x99,0x9f,0x99,0x9f,0xe7,0xc1,0x99,0xe7,0xf9,0x93,0xe7,0x94,0x99,0x99,0x83,0xc1,0x9f,0xf9,0xe7,0x99,0xc3,0xc1,0xc3,0xc1,0xcf,0xe7,0xe7,0xe7,0xff,0xcf,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x07,0x00,0x18,0x00,0x66,0x18,0x46,0x3f,0x00,0x0c,0x30,0x00,0x00,0x18,0x00,0x18,0x60,0x3c,0x7e,0x7e,0x3c,0x06,0x3c,0x3c,0x18,0x3c,0x3c,0x00,0x18,0x0e,0x00,0x70,0x18,0x3c,0x66,0x7c,0x3c,0x78,0x7e,0x60,0x3c,0x66,0x3c,0x38,0x66,0x7e,0x63,0x66,0x3c,0x60,0x0e,0x66,0x3c,0x18,0x3c,0x18,0x63,0x66,0x18,0x7e,0x3c,0x03,0x3c,0x18,0xff,0x3c,0x3e,0x7c,0x3c,0x3e,0x3c,0x18,0x06,0x66,0x3c,0x06,0x66,0x3c,0x63,0x66,0x3c,0x60,0x06,0x60,0x7c,0x0e,0x3e,0x18,0x36,0x66,0x0c,0x7e,0x0e,0x18,0x70,0x00,0x10,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x03,0xc0,0x7f,0xfe,0x00,0x00,0x00,0x0f,0x0f,0x0f,0x0f,0xf0,0xf0,0xf0,0xf0,0xff,0xff,0xff,0xff,0xe7,0xff,0x99,0xe7,0xb9,0xc0,0xff,0xf3,0xcf,0xff,0xff,0xe7,0xff,0xe7,0x9f,0xc3,0x81,0x81,0xc3,0xf9,0xc3,0xc3,0xe7,0xc3,0xc3,0xff,0xe7,0xf1,0xff,0x8f,0xe7,0xc3,0x99,0x83,0xc3,0x87,0x81,0x9f,0xc3,0x99,0xc3,0xc7,0x99,0x81,0x9c,0x99,0xc3,0x9f,0xf1,0x99,0xc3,0xe7,0xc3,0xe7,0x9c,0x99,0xe7,0x81,0xc3,0xfc,0xc3,0xe7,0x00,0xc3,0xc1,0x83,0xc3,0xc1,0xc3,0xe7,0xf9,0x99,0xc3,0xf9,0x99,0xc3,0x9c,0x99,0xc3,0x9f,0xf9,0x9f,0x83,0xf1,0xc1,0xe7,0xc9,0x99,0xf3,0x81,0xf1,0xe7,0x8f,0xff,0xef,
								0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x60,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x18,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x01,0x80,0xff,0xff,0x00,0x00,0x00,0x0f,0x0f,0x0f,0x0f,0xf0,0xf0,0xf0,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xcf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xcf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe7,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xc3,0xff,0xff,0xff,0xff,0xff,0x9f,0xf9,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0xff,0xe7,0xff,0xff,0xff,

																														; CONSTANTS
VGA_INDEX:			0x0811																			; (y_start * 64) + x_start (400x240: 0x040c, 320x200: 0x0811)
VGA_XBYTES:			40																					; byte width of the display area (400x240: 50, 320x200: 40)
VGA_XBLANK:			24																					; horizontal blank bytes (must be equal to 64-VGA_XBYTES)
VGA_YBYTES:			25																					; byte height (400x240: 30, 320x200: 25)
VGA_YLINES:			200																					; pixel height (must be equal to 8*VGA_YBYTES)

								#end																				; LABEL DEFINITIONS
#org 0xdff9			VGA_ADDR:																		; memory-mapped address of the VGA index register
#org 0xdffc			VGA_DATA:																		; memory-mapped address of the VGA data register

																														; OS API FUNCTIONS
#org 0xf028			_Random:																		; generates a pseudo-random byte
#org 0xf003			_Prompt:																		; returns focus to the OS
								#begin

#org 0x8000
