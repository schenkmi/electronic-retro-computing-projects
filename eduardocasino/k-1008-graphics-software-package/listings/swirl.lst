
                              .PAGE  'DOCUMENTATION, EQUATES, STORAGE'
    3                ;        SWIRL DRAWING DEMONSTRATION FOR THE MICRO TECHNOLOGY UNLIMITED
    4                ;        VISIBLE MEMORY 320 BY 200 PIXEL DISPLAY
    5
    6                ;        ENTER AT SWIRL WITH LINES, FREQ, AND DAMP SET TO APPROPRIATE
    7                ;        VALUES TO GENERATE AN SWIRLING DISPLAY. INTERRUPT WITH RESET
    8                ;        KEY WHEN PATTERN IS COMPLETED TO DESIRED EXTENT.
    9
   10                ;        ENTER AT RSWIRL FOR AN ENDLESS SERIES OF PATTERNS USING
   11                ;        RANDOMLY SELECTED PARAMETERS.
   12
   13                ;        GENERAL EQUATES
   14
   15 1C22           KIMMON   =      X'1C22       ; RESET ENTRY INTO KIM MONITOR
   16 0140           NX       =      320          ; NUMBER OF BITS IN A ROW
   17 00C8           NY       =      200          ; NUMBER OF ROWS (CHANGE FOR HALF SCREEN
   18                                             ; OPERATION)
   19 FA00           NPIX     =      NX*NY        ; NUMBER OF PIXELS
   20
   21 0000                    .=     0            ; START PROGRAM AT ZERO
   22
   23                ;        STORAGE FOR SWIRL GENERATOR PROGRAM
   24
   25 0000 01        LINES:   .BYTE  1            ; CONNECTING LINES IF NON-ZERO
   26 0001 127E      FREQ:    .WORD  X'7E12       ; FREQUENCY
   27 0003 007E      DAMP:    .WORD  X'7E00       ; 1-(DAMPING FACTOR)
   28 0005 0078      COSINT:  .WORD  X'7800       ; INITIAL COSINE VALUE
   29                                             ; GOOD VALUE FOR GENERAL USE BUT SHOULD BE
   30                                             ; REDUCED TO X'70 TO PREVENT OVERFLOW WITH
   31                                             ; RANDOMLY SELECTED PARAMETERS
   32 0007           COS:     .=.+   2            ; COSINE VALUE
   33 0009           SIN:     .=.+   2            ; SINE VALUE
   34
   35                ;        GENERAL STORAGE
   36
   37 000B 20        VMORG:   .BYTE  X'20         ; PAGE NUMBER OF FIRST VISIBLE MEMORY
   38                                             ; LOCATION
   39 000C 3412      RANDNO:  .WORD  X'1234       ; INITIAL RANDON NUMBER, MUST NOT BE ZERO
   40 000E           ADP1:    .=.+   2            ; ADDRESS POINTER 1
   41 0010           ADP2:    .=.+   2            ; ADDRESS POINTER 2
   42 0012           BTPT:    .=.+   1            ; BIT NUMBER
   43 0013           X1CORD:  .=.+   2            ; COORDINATE PAIR 1
   44 0015           Y1CORD:  .=.+   2
   45 0017           X2CORD:  .=.+   2            ; COORDINATE PAIR 2
   46 0019           Y2CORD:  .=.+   2
   47
   48                ;        STORAGE FOR ARBITRARY LINE DRAW ROUTINE
   49
   50 001B           DELTAX:  .=.+   2            ; DELTA X
   51 001D           DELTAY:  .=.+   2            ; DELTA Y
   52 001F           ACC:     .=.+   2            ; ACCUMULATOR
   53 0021           XDIR:    .=.+   1            ; X MOVEMENT DIRECTION, ZERO=+
   54 0022           YDIR:    .=.+   1            ; Y MOVEMENT DIRECTION, ZERO=+
   55 0023           XCHFLG:  .=.+   1            ; EXCHANGE X AND Y FLAG, EXCHANGE IF NOT O
   56 0024           COLOR:   .=.+   1            ; COLOR OF LINE DRAWN -1=WHITE
   57 0025           TEMP:    .=.+   2            ; TEMPORARY STORAGE
   58
   59                ;        STORAGE FOR THE ARITHMETIC SUBROUTINES
   60
   61 0027           PROD:    .=.+   4            ; PRODUCT FOR ARITHMETIC ROUTINES
   62 002B           MPCD:    .=.+   2            ; MUPTIPLICAND FOR ARITHMETIC
   63 002D           MPLR     =      PROD         ; MULTIPLIER FOR ARITHMETIC ROUTINES
   64 002D           MPSAVE:  .=.+   2            ; TEMPORARY STORAGE FOR MULTIPLY
   65
                              .PAGE  'MAIN SWIRL GENERATION ROUTINE'
   66                ;        SWIRL ROUTINE FOR STRAIGHT LINES CONNECTING THE POINTS
   67
   68 002F 208D00    SWIRL:   JSR    SWINIT       ; INITIALIZE COS AND SIN
   69 0032 20A500    SWIRL1:  JSR    SCALE        ; SCALE SIN AND COS FOR DISPLAY
   70 0035 A500               LDA    LINES        ; TEST IF LINES BETWEEN POINTS DESIRED
   71 0037 D003               BNE    SWIRL2       ; SKIP IF SO
   72 0039 205D01             JSR    C2TOC1       ; IF NOT, SET LINE LENGTH TO ZERO
   73 003C 202202    SWIRL2:  JSR    DRAW         ; DRAW THE LINE OR POINT
   74 003F 200001             JSR    POINT        ; COMPUTE THE NEXT POINT
   75 0042 4C3200             JMP    SWIRL1
   76
   77                ;        SWIRL ROUTINE WITH RANDOM PARAMETERS
   78
   79 0045 208D00    RSWIRL:  JSR    SWINIT       ; INITIALIZE COS AND SIN
   80 0048 209503    RSWR1:   JSR    RAND         ; INITIALIZE FREQ RANDOMLY WITH UNIFORM
   81 004B 8501               STA    FREQ         ; DISTRIBUTION
   82 004D 209503             JSR    RAND
   83 0050 8502               STA    FREQ+1
   84 0052 20B103             JSR    RNDEXP       ; INITIALIZE DAMP RANDOMLY WITH A NEGATIVE
   85 0055 4A                 LSRA                ; EXPONENTIAL DISTRIBUTION
   86 0056 497F               EOR    #X'7F        ; IN THE UPPER BYTE AND UNIFORM
   87 0058 8504               STA    DAMP+1       ; DISTRIBUTION IN THE LOWER BYTE
   88 005A 209503             JSR    RAND
   89 005D 8503               STA    DAMP
   90 005F 209503             JSR    RAND         ; RANDOMLY DETERMINE PRESENCE OF
   91 0062 2901               AND    #1           ; CONNECTING LINES
   92 0064 8500               STA    LINES
   93 0066 20CB03             JSR    RANGCK       ; VERIFY ACCEPTABLE RANGES OF PARAMETERS
   94 0069 B0DD               BCS    RSWR1        ; TRY AGAIN IF NOT ACCEPTABLE
   95 006B 20A500    RSWR2:   JSR    SCALE        ; SCALE THE CURRENT POINT FOR PLOTTING
   96 006E A500               LDA    LINES        ; TEST IF CONNECTING LINES SPECIFIED
   97 0070 D003               BNE    RSWR3        ; SKIP AHEAD IF SO
   98 0072 205D01             JSR    C2TOC1       ; IF NOT, SET ZERO LINE LENGTH
   99 0075 202202    RSWR3:   JSR    DRAW         ; ORAW A LINE FROM THE LAST POINT PLOTTED
  100 0078 200001             JSR    POINT        ; COMPUTE THE NEXT POINT
  101 007B A50A      RSWR4:   LDA    SIN+1        ; TEST IF PATTERN HAS DECAYED TO NEARLY
  102 007D F004               BEQ    RSWR5        ; ZERO
  103 007F C9FF               CMP    #X'FF
  104 0081 D0E8               BNE    RSWR2
  105 0083 A508      RSWR5:   LDA    COS+1
  106 0085 F0BE               BEQ    RSWIRL       ; GO START A NEW PATTERN IF SO
  107 0087 C9FF               CMP    #X'FF
  108 0089 F0BA               BEQ    RSWIRL
  109 008B D0DE               BNE    RSWR2        ; GO COMPUTE NEXT POINT IF NOT
  110
  111                ;        SWINIT - INITIALIZE COS FROM COSINT, ZERO SIN, CLEAR SCREEN
  112
  113 008D A505      SWINIT:  LDA    COSINT       ; INITIALIZE COS
  114 008F 8507               STA    COS
  115 0091 A506               LDA    COSINT+1
  116 0093 8508               STA    COS+1
  117 0095 A900               LDA    #0           ; ZERO SIN
  118 0097 8509               STA    SIN
  119 0099 850A               STA    SIN+1
  120 009B 200002             JSR    CLEAR        ; CLEAR THE VM SCREEN
  121 009E 20A500             JSR    SCALE        ; SCALE THE INITIAL POINT AND PUT INTO
  122 00A1 205D01             JSR    C2TOC1       ; IN BOTH SETS OF COORDINATES
  123 00A4 60                 RTS                 ; RETURN
  124
  125                ;        SCALE - TAKE VALUE OF SIN, SCALE ACCORDING TO NX, AND PUT INTO
  126                ;        X2CORD. THEN TAKE VALUE OF COS, SCALE ACCORDING TO NY, AND
  127                ;        PUT INTO Y2CORD.
  128                ;        SIN AND COS ARE ASSUMED TO BE DOUBLE LENGTH BINARY FRACTIONS
  129                ;        BETWEEN -1 AND +1.
  130
  131 00A5 A507      SCALE:   LDA    COS          ; X2CORD=NX/2*SIN4NX/2
  132 00A7 852B               STA    MPCD         ; TRANSFER SIN TO MULTIPLICAND
  133 00A9 A508               LDA    COS+1        ; (BINARY FRACTION)
  134 00AB 852C               STA    MPCD+1
  135 00AD A9A0               LDA    #NX/2&X'FF   ; TRANSFER NX/2 TO MULTIPLIER
  136 00AF 8527               STA    MPLR         ; (INTEGER)
  137 00B1 A900               LDA    #NX/2/256
  138 00B3 8528               STA    MPLR+1
  139 00B5 202B03             JSR    SGNMPY       ; PERFORM A SIGNED MULTIPLICATION
  140 00B8 208B03             JSR    SLQL
  141 00BB A529               LDA    PROD+2       ; SIGNED INTEGER RESULT IN PROD+2 (LOW)
  142 00BD 18                 CLC                 ; AND PROD+3 (HIGH)
  143 00BE 69A0               ADC    #NX/2&X'FF   ; ADD NX/2 TO PRODUCT AND PUT INTO X2CORD
  144 00C0 8517               STA    X2CORD
  145 00C2 A52A               LDA    PROD+3
  146 00C4 6900               ADC    #NX/2/256
  147 00C6 8518               STA    X2CORD+1
  148
  149 00C8 A509               LDA    SIN          ; Y2CORD=NY/2*COS+NX/2
  150 00CA 852B               STA    MPCD         ; TRANSFER COS TO MULTIPLICAND
  151 00CC A50A               LDA    SIN+1        ; (BINARY FRACTION)
  152 00CE 852C               STA    MPCD+1
  153 00D0 A964               LDA    #NY/2&X'FF   ; TRANSFER NY/2 TO MULTIPLIER
  154 00D2 8527               STA    MPLR         ; (INTEGER)
  155 00D4 A900               LDA    #NY/2/256
  156 00D6 8528               STA    MPLR+1
  157 00D8 202B03             JSR    SGNMPY       ; PERFORM A SIGNED MULTIPLICATION
  158 00DB 208B03             JSR    SLQL
  159 00DE A529               LDA    PROD+2       ; SIGNED INTEGER RESULT IN PROD+2 (LOW)
  160 00E0 18                 CLC                 ; AND PROD+3 (HIGH)
  161 00E1 6964               ADC    #NY/2&X'FF   ; ADD NY/2 TO PRODUCT AND PUT INTO Y2CORD
  162 00E3 8519               STA    Y2CORD
  163 00E5 A52A               LDA    PROD+3
  164 00E7 6900               ADC    #NY/2/256
  165 00E9 851A               STA    Y2CORD+1
  166 00EB 60                 RTS                 ; RETURN
  167
                              .PAGE  'POINT – COMPUTE NEXT POINT'
  168                ;        POINT - COMPUTE NEXT VALUE OF COS,SIN FROM CURRENT VALUE OF
  169                ;        COS,SIN ACCORDING TO FREQ AND DAMP. DIFFERENCE EQUATION FOR
  170                ;        AN ELIPSE IS USED
  171
  172 00EC                    .=     X'100
  173
  174 0100 A509      POINT:   LDA    SIN          ; FIRST COMPUTE DAMP*SIN AND PUT INTO SIN
  175 0102 852B               STA    MPCD
  176 0104 A50A               LDA    SIN+1
  177 0106 852C               STA    MPCD+1
  178 0108 A503               LDA    DAMP
  179 010A 8527               STA    MPLR
  180 010C A504               LDA    DAMP+1
  181 010E 8528               STA    MPLR+1
  182 0110 202B03             JSR    SGNMPY
  183 0113 208B03             JSR    SLQL         ; SHIFT PRODUCT LEFT ONE FOR FRACTIONAL
  184 0116 A529               LDA    PROD+2       ; RESULT
  185 0118 8509               STA    SIN          ; AND PUT BACK INTO SIN
  186 011A A52A               LDA    PROD+3
  187 011C 850A               STA    SIN+1
  188
  189 011E A507               LDA    COS          ; NEXT COMPUTE COS*FREQ
  190 0120 8527               STA    MPLR
  191 0122 A508               LDA    COS+1
  192 0124 8528               STA    MPLR+1
  193 0126 A501               LDA    FREQ
  194 0128 852B               STA    MPCD
  195 012A A502               LDA    FREQ+1
  196 012C 852C               STA    MPCD+1
  197 012E 202B03             JSR    SGNMPY
  198 0131 208B03             JSR    SLQL
  199 0134 A509               LDA    SIN          ; ADD RESULT TO SIN AND PUT SUM BACK INTO
  200 0136 18                 CLC                 ; SIN
  201 0137 6529               ADC    PROD+2
  202 0139 8509               STA    SIN
  203 013B A50A               LDA    SIN+1
  204 013D 652A               ADC    PROD+3
  205 013F 850A               STA    SIN+1
  206
  207 0141 A509               LDA    SIN          ; NEXT COMPUTE FREQ*SIN
  208 0143 8527               STA    MPLR
  209 0145 A50A               LDA    SIN+1
  210 0147 8528               STA    MPLR+1       ; FREQ ALREADY IN MPCD
  211 0149 202B03             JSR    SGNMPY
  212 014C 208B03             JSR    SLQL
  213
  214 014F A507               LDA    COS          ; SUBSTRACT RESULT FROM COS AND PUT RESULT
  215 0151 38                 SEC                 ; IN COS
  216 0152 E529               SBC    PROD+2
  217 0154 8507               STA    COS
  218 0156 A508               LDA    COS+1
  219 0158 E52A               SBC    PROD+3
  220 015A 8508               STA    COS+1
  221 015C 60                 RTS                 ; RETURN
  222
  223                ;        SUBROUTINE TO MOVE THE CONTENTS OF COORDINATE PAIR 2 TO
  224                ;        COORDINATE PAIR 1.
  225
  226 015D A517      C2TOC1:  LDA    X2CORD       ; DO THE MOVING
  227 015F 8513               STA    X1CORD
  228 0161 A518               LDA    X2CORD+1
  229 0163 8514               STA    X1CORD+1
  230 0165 A519               LDA    Y2CORD
  231 0167 8515               STA    Y1CORD
  232 0169 A51A               LDA    Y2CORD+1
  233 016B 8516               STA    Y1CORD+1
  234 016D 60                 RTS                 ; RETURN
  235
                              .PAGE  'ABBREVIATED GRAPHICS ROUTINES'
  236                ;        PIXADR - FIND THE BYTE ADDRESS AND BIT NUMBER OF PIXEL AT
  237                ;                 X1CORD, Y1CORD
  238                ;        PUTS BYTE ADDRESS IN ADP1 AND BIT NUMBER (BIT 0 IS LEFTMOST)
  239                ;        IN BTPT.
  240                ;        DOES NOT CHECK MAGNITUDE OF COORDINATES FOR MAXIMUM SPEED
  241                ;        PRESERVES X AND Y REGISTERS, DESTROYS A
  242                ;        BYTE ADDRESS = VMORG*256+(199-Y1CORD)*40+INT(XCORD/8)
  243                ;        BIT ADDRESS = REM(XCORD/8)
  244                ;        OPTIMIZED FOR SPEED THEREFORE CALLS TO A DOUBLE SHIFT ROUTINE
  245                ;        ARE NOT DONE
  246
  247 016E A513      PIXADR:  LDA    X1CORD       ; COMPUTE BIT ADDRESS FIRST
  248 0170 850E               STA    ADP1         ; ALSO TRANSFER X1CORD TO ADP1
  249 0172 2907               AND    #X'07        ; WHICH IS SIMPLY THE LOW 3 BITS OF X
  250 0174 8512               STA    BTPT
  251 0176 A514               LDA    X1CORD+1     ; FINISH TRANSFERRING X1CORD TO ADP1
  252 0178 850F               STA    ADP1+1
  253 017A 460F               LSR    ADP1+1       ; DOUBLE SHIFT ADP1 RIGHT 3 TO GET
  254 017C 660E               ROR    ADP1         ; INT(XCORD/8)
  255 017E 460F               LSR    ADP1+1
  256 0180 660E               ROR    ADP1
  257 0182 460F               LSR    ADP1+1
  258 0184 660E               ROR    ADP1
  259 0186 A9C7               LDA    #199         ; TRANSFER (199-Y1CORD) TO ADP2
  260 0188 38                 SEC                 ; AND TEMPORARY STORAGE
  261 0189 E515               SBC    Y1CORD
  262 018B 8510               STA    ADP2
  263 018D 8525               STA    TEMP
  264 018F A900               LDA    #0
  265 0191 E516               SBC    Y1CORD+1
  266 0193 8511               STA    ADP2+1
  267 0195 8526               STA    TEMP+1
  268 0197 0610               ASL    ADP2         ; COMPUTE 40*(199-Y1CORD)
  269 0199 2611               ROL    ADP2+1       ;  2*(199-Y1CORD)
  270 019B 0610               ASL    ADP2
  271 019D 2611               ROL    ADP2+1       ;  4*(199+Y1CORD)
  272 019F A510               LDA    ADP2         ;  ADD IN TEMPORARY SAVE OF (199-Y1CORD)
  273 01A1 18                 CLC                 ;  TO MAKE 5*(199-Y1CORD)
  274 01A2 6525               ADC    TEMP
  275 01A4 8510               STA    ADP2
  276 01A6 A511               LDA    ADP2+1
  277 01A8 6526               ADC    TEMP+1
  278 01AA 8511               STA    ADP2+1       ;  5*(199-Y1CORD)
  279 01AC 0610               ASL    ADP2         ;  10*(199-Y1CORD)
  280 01AE 2611               ROL    ADP2+1
  281 01B0 0610               ASL    ADP2         ;  20*(199-Y1CORD)
  282 01B2 2611               ROL    ADP2+1
  283 01B4 0610               ASL    ADP2         ;  40*(199-Y1CORD)
  284 01B6 2611               ROL    ADP2+1
  285 01B8 A510               LDA    ADP2         ; ADD IN INT(X1CORD/8) COMPUTED EARLIER
  286 01BA 18                 CLC
  287 01BB 650E               ADC    ADP1
  288 01BD 850E               STA    ADP1
  289 01BF A511               LDA    ADP2+1
  290 01C1 650F               ADC    ADP1+1
  291 01C3 650B               ADC    VMORG        ; ADD IN VMORG*256
  292 01C5 850F               STA    ADP1+1       ; FINAL RESULT
  293 01C7 60                 RTS                 ; RETURN
  294
  295                ;        STPIX - SETS THE PIXEL AT X1CORD,Y1CORD TO A ONE (WHITE DOT)
  296                ;        DOES NOT ALTER X1CORD OR Y1CORD
  297                ;        PRESERVES X AND Y
  298                ;        ASSUMES IN RANGE CORRDINATES
  299
  300 01C8 206E01    STPIX:   JSR    PIXADR       ; GET BYTE ADDRESS AND BIT NUMBER OF PIXEL
  301                                             ; INTO ADP1
  302 01CB 98                 TYA                 ; SAVE Y
  303 01CC 48                 PHA
  304 01CD A412               LDY    BTPT         ; GET BIT NUMBER IN Y
  305 01CF B91A02             LDA    MSKTB1,Y     ; GET A BYTE WITH THAT BIT =1, OTHERS =0
  306 01D2 A000               LDY    #0           ; ZERO Y
  307 01D4 110E               ORA    (ADP1),Y     ; COMBINE THE BIT WITH THE ADDRESSED VM
  308 01D6 910E               STA    (ADP1),Y     ; BYTE
  309 01D8 68                 PLA                 ; RESTORE Y
  310 01D9 A8                 TAY
  311 01DA 60                 RTS                 ; AND RETURN
  312
  313 01DB                    .=     X'200
  314
  315                ;        CLEAR DISPLAY MEMORY ROUTINE
  316
  317 0200 A000      CLEAR:   LDY    #0           ; INITIALIZE ADDRESS POINTER
  318 0202 840E               STY    ADP1         ; AND ZERO INDEX Y
  319 0204 A50B               LDA    VMORG
  320 0206 850F               STA    ADP1+1
  321 0208 18                 CLC
  322 0209 6920               ADC    #X'20
  323 020B AA                 TAX
  324 020C 98        CLEAR1:  TYA                 ; CLEAR A BYTE
  325 020D 910E               STA    (ADP1),Y
  326 020F E60E               INC    ADP1         ; INCREMENT ADDRESS POINTER
  327 0211 D0F9               BNE    CLEAR1
  328 0213 E60F               INC    ADP1+1
  329 0215 E40F               CPX    ADP1+1       ; TEST IF DONE
  330 0217 D0F3               BNE    CLEAR1
  331 0219 60                 RTS                 ; RETURN
  332
  333                ;        MASK TABLES FOR INDIVIDUAL PIXEL SUBROUTINES
  334                ;        MSKTB1 IS A TABLE OF 1 BITS CORRESPONDING TO BIT NUMBERS
  335
  336 021A 80402010  MSKTB1:  .BYTE  X'80,X'40,X' 20,X'10
  337 021E 08040201           .BYTE  X'08,X'04,X' 02,X'01
  338
                              .PAGE  'LINE DRAWING ROUTINES'
  339                ;        DRAW - DRAW THE BEST STRAIGHT LINE FROM X1CORD,Y1CORD TO
  340                ;        X2CORD, Y2CORD.
  341                ;        X2CORD,Y2CORD COPIED TO X1CORD,Y1CORD AFTER DRAWING
  342                ;        PRESERVES X AND Y
  343                ;        USES AN ALGORITHM THAT REQUIRES NO MULTIPLICATION OR DIVISON
  344
  345 0222 8A        DRAW:    TXA                 ; SAVE X AND Y
  346 0223 48                 PHA
  347 0224 98                 TYA
  348 0225 48                 PHA
  349
  350                ;        COMPUTE SIGN AND MAGNITUDE OF DELTA X = X2-X1
  351                ;        PUT MAGNITUDE IN DELTAX AND SIGN IN XDIR
  352
  353 0226 A900               LDA    #0           ; FIRST ZERO XDIR
  354 0228 8521               STA    XDIR
  355 022A A517               LDA    X2CORD       ; NEXT COMPUTE TWOS COMPLEMENT DIFFERENCE
  356 022C 38                 SEC
  357 022D E513               SBC    X1CORD
  358 022F 851B               STA    DELTAX
  359 0231 A518               LDA    X2CORD+1
  360 0233 E514               SBC    X1CORD+1
  361 0235 851C               STA    DELTAX+1
  362 0237 100F               BPL    DRAW2        ; SKIP AHEAD IF DIFFERENCE IS POSITIVE
  363 0239 C621               DEC    XDIR         ; SET XDIR TO -1
  364 023B 38                 SEC                 ; NEGATE DELTAX
  365 023C A900               LDA    #0
  366 023E E51B               SBC    DELTAX
  367 0240 851B               STA    DELTAX
  368 0242 A900               LDA    #0
  369 0244 E51C               SBC    DELTAX+1
  370 0246 851C               STA    DELTAX+1
  371
  372                ;        COMPUTE SIGN AND MAGNITUDE OF DELTA Y = Y2-Y1
  373                ;        PUT MAGNITUDE IN DELTAY AND SIGN IN YDIR
  374
  375 0248 A900      DRAW2:   LDA    #0           ; FIRST ZERO YDIR
  376 024A 8522               STA    YDIR
  377 024C A519               LDA    Y2CORD       ; NEXT COMPUTE TWOS COMPLEMENT DIFFERENCE
  378 024E 38                 SEC
  379 024F E515               SBC    Y1CORD
  380 0251 851D               STA    DELTAY
  381 0253 A51A               LDA    Y2CORD+1
  382 0255 E516               SBC    Y1CORD+1
  383 0257 851E               STA    DELTAY+1
  384 0259 100F               BPL    DRAW3        ; SKIP AHEAD IF DIFFERENCE IS POSITIVE
  385 025B C622               DEC    YDIR         ; SET YDIR TO -1
  386 025D 38                 SEC                 ; NEGATE DELTAX
  387 025E A900               LDA    #0
  388 0260 E51D               SBC    DELTAY
  389 0262 851D               STA    DELTAY
  390 0264 A900               LDA    #0
  391 0266 E51E               SBC    DELTAY+1
  392 0268 851E               STA    DELTAY+1
  393
  394                ;        DETERMINE IF DELTAY IS LARGER-THAN DELTAX
  395                ;        IF SO, EXCHANGE DELTAY AND DELTAX AND SET XCHFLG NONZERO
  396                ;        ALSO INITIALIZE ACC TO DELTAX
  397                ;        PUT A DOT AT THE INITIAL ENDPOINT
  398
  399 026A A900      DRAW3:   LDA    #0           ; FIRST ZERO XCHFLG
  400 026C 8523               STA    XCHFLG
  401 026E A51D               LDA    DELTAY       ; COMPARE DELTAY WITH DELTAX
  402 0270 38                 SEC
  403 0271 E51B               SBC    DELTAX
  404 0273 A51E               LDA    DELTAY+1
  405 0275 E51C               SBC    DELTAX+1
  406 0277 9012               BCC    DRAW4        ; SKIP EXCHANGE IF DELTAX IS GREATER THAN
  407                                             ; DELTAY
  408 0279 A61D               LDX    DELTAY       ; EXCHANGE DELTAX AND DELTAY
  409 027B A51B               LDA    DELTAX
  410 027D 851D               STA    DELTAY
  411 027F 861B               STX    DELTAX
  412 0281 A61E               LDX    DELTAY+1
  413 0283 A51C               LDA    DELTAX+1
  414 0285 851E               STA    DELTAY+1
  415 0287 861C               STX    DELTAX+1
  416 0289 C623               DEC    XCHFLG       ; SET XCHFLG TO -1
  417 028B A51B      DRAW4:   LDA    DELTAX       ; INITIALIZE ACC TO DELTAX
  418 028D 851F               STA    ACC
  419 028F A51C               LDA    DELTAX+1
  420 0291 8520               STA    ACC+1
  421 0293 20C801             JSR    STPIX        ; PUT A DOT AT THE INITIAL ENDPOINT;
  422                                             ; X1CORD, Y1CORD
  423
  424                ;        HEAD OF MAIN DRAWING LOOP
  425                ;        TEST IF DONE
  426
  427 0296 A523      DRAW45:  LDA    XCHFLG       ; TEST IF X AND Y EXCHANGED
  428 0298 D00E               BNE    DRAW5        ; JUMP AHEAD IF SO
  429 029A A513               LDA    X1CORD       ; TEST FOR X1CORD=X2CORD
  430 029C C517               CMP    X2CORD
  431 029E D019               BNE    DRAW7        ; GO FOR ANOTHER ITERATION IF NOT
  432 02A0 A514               LDA    X1CORD+1
  433 02A2 C518               CMP    X2CORD+1
  434 02A4 D013               BNE    DRAW7        ; GO FOR ANOTHER ITERATION IF NOT
  435 02A6 F00C               BEQ    DRAW6        ; GO RETURN IF SO
  436 02A8 A515      DRAW5:   LDA    Y1CORD       ; TEST FOR Y1CORD=Y2CORD
  437 02AA C519               CMP    Y2CORD
  438 02AC D00B               BNE    DRAW7        ; GO FOR ANOTHER ITERATION IF NOT
  439 02AE A516               LDA    Y1CORD+1
  440 02B0 C51A               CMP    Y2CORD+1
  441 02B2 D005               BNE    DRAW7        ; GO FOR ANOTHER ITERATION IF NOT
  442 02B4 68        DRAW6:   PLA                 ; RESTORE INDEX REGISTERS
  443 02B5 A8                 TAY
  444 02B6 68                 PLA
  445 02B7 AA                 TAX
  446 02B8 60                 RTS                 ; AND RETURN
  447
  448                ;        DO A CLACULATION TO DETERMINE IF ONE OR BOTH AXES ARE TO BE
  449                ;        BUMPED (INCREMENTED OR DECREMENTED ACCORDING TO XDIR AND YDIR)
  450                ;        AND DO THE BUMPING
  451
  452 02B9 A523      DRAW7:   LDA    XCHFLG       ; TEST IF X AND Y EXCHANGED
  453 02BB D006               BNE    DRAW8        ; JUMP IF SO
  454 02BD 200303             JSR    BMPX         ; BUMP X IF NOT
  455 02C0 4CC602             JMP    DRAW9
  456 02C3 201703    DRAW8:   JSR    BMPY         ; BUMP Y IF SO
  457 02C6 20E702    DRAW9:   JSR    SBDY         ; SUBSTRACT DY FROM ACC TWICE
  458 02C9 20E702             JSR    SBDY
  459 02CC 1013               BPL    DRAW12       ; SKIP AHEAD IF ACC IS NOT NEGATIVE
  460 02CE A523               LDA    XCHFLG       ; TEST IF X AND Y EXCHANGED
  461 02D0 D006               BNE    DRAW10       ; JUMP IF SO
  462 02D2 201703             JSR    BMPY         ; BUMP Y IF NOT
  463 02D5 4CDB02             JMP    DRAW11
  464 02D8 200303    DRAW10:  JSR    BMPX         ; BUMP X IF SO
  465 02DB 20F502    DRAW11:  JSR    ADDX         ; ADD DX TO ACC TWICE
  466 02DE 20F502             JSR    ADDX
  467
  468 02E1 20C801    DRAW12:  JSR    STPIX        ; OUTPUT THE NEW POINT
  469 02E4 4C9602             JMP    DRAW45       ; GO TEST IF DONE
  470
  471                ;        SUBROUTINES FOR DRAW
  472
  473 02E7 A51F      SBDY:    LDA    ACC          ; SUBSTRACT DELTAY FROM ACC AND PUT RESULT
  474 02E9 38                 SEC                 ; IN ACC
  475 02EA E51D               SBC    DELTAY
  476 02EC 851F               STA    ACC
  477 02EE A520               LDA    ACC+1
  478 02F0 E51E               SBC    DELTAY+1
  479 02F2 8520               STA    ACC+1
  480 02F4 60                 RTS
  481
  482
  483 02F5 A51F      ADDX:    LDA    ACC          ; ADD DELTAX TO ACC AND PUT RESULT IN ACC
  484 02F7 18                 CLC
  485 02F8 651B               ADC    DELTAX
  486 02FA 851F               STA    ACC
  487 02FC A520               LDA    ACC+1
  488 02FE 651C               ADC    DELTAX+1
  489 0300 8520               STA    ACC+1
  490 0302 60                 RTS
  491
  492
  493 0303 A521      BMPX:    LDA    XDIR         ; BUMP X1CORD BY +1 OR -1 ACCORDING TO
  494 0305 D007               BNE    BMPX2        ; XDIR
  495 0307 E613               INC    X1CORD       ; DOUBLE INCREMENT X1CORD IF XDIR=0
  496 0309 D002               BNE    BMPX1
  497 030B E614               INC    X1CORD+1
  498 030D 60        BMPX1:   RTS
  499 030E A513      BMPX2:   LDA    X1CORD       ; DOUBLE DECREMENT X1CORD IF XDIR<>0
  500 0310 D002               BNE    BMPX3
  501 0312 C614               DEC    X1CORD+1
  502 0314 C613      BMPX3:   DEC    X1CORD
  503 0316 60                 RTS
  504
  505
  506 0317 A522      BMPY:    LDA    YDIR         ; BUMP Y1CORD BY +1 OR -1 ACCORDING TO
  507 0319 D007               BNE    BMPY2        ; YDIR
  508 031B E615               INC    Y1CORD       ; DOUBLE INCREMENT Y1CORD IF YDIR=0
  509 031D D002               BNE    BMPY1
  510 031F E616               INC    Y1CORD+1
  511 0321 60        BMPY1:   RTS
  512 0322 A515      BMPY2:   LDA    Y1CORD       ; DOUBLE DECREMENT Y1CORD IF YDIR<>0
  513 0324 D002               BNE    BMPY3
  514 0326 C616               DEC    Y1CORD+1
  515 0328 C615      BMPY3:   DEC    Y1CORD
  516 032A 60                 RTS
  517
                              .PAGE  'MULTIPLY, SHIFT, AND RANDOM NUMBER ROUTINES'
  518                ;        SIGNED MULTIPLY SUBROUTINE
  519                ;        ENTER WITH SIGNED MULTIPLIER IN PROD AND PROD+1
  520                ;        ENTER WITH SIGNED MULTIPLICAND IN MPCD AND MPCD+1
  521                ;        RETURN WITH 16 BIT SIGNED PRODUCT IN PROD (LOW) THROUGH
  522                ;        PROD+3 (HIGH)
  523                ;        A DESTROYED, X AND Y PRESERVED
  524
  525 032B A527      SGNMPY:  LDA    PROD         ; GET MULTIPLIER
  526 032D 852D               STA    MPSAVE       ; AND SAVE IT
  527 032F A528               LDA    PROD+1
  528 0331 852E               STA    MPSAVE+1
  529 0333 205903             JSR    UNSMPY       ; DO AN UNSIGNED MULTIPLY
  530 0336 A52C               LDA    MPCD+1       ; TEST SIGN OF MULTIPLICAND
  531 0338 100D               BPL    SGNMP1       ; JUMP IF POSITIVE
  532 033A A529               LDA    PROD+2       ; SUBTRACT MULTIPLIER FROM HIGH PRODUCT IF
  533 033C 38                 SEC                 ; NEGATIVE
  534 033D E52D               SBC    MPSAVE
  535 033F 8529               STA    PROD+2
  536 0341 A52A               LDA    PROD+3
  537 0343 E52E               SBC    MPSAVE+1
  538 0345 852A               STA    PROD+3
  539 0347 A52E      SGNMP1:  LDA    MPSAVE+1     ; TEST SIGN OF MULTIPLIER
  540 0349 100D               BPL    SGNMP2       ; GO RETURN IF POSITIVE
  541 034B A529               LDA    PROD+2       ; SUBTRACT MULTIPLICAND FROM HIGH PRODUCT
  542 034D 38                 SEC                 ; IF NEGATIVE
  543 034E E52B               SBC    MPCD
  544 0350 8529               STA    PROD+2
  545 0352 A52A               LDA    PROD+3
  546 0354 E52C               SBC    MPCD+1
  547 0356 852A               STA    PROD+3
  548 0358 60        SGNMP2:  RTS                 ; RETURN
  549
  550                ;        16 X 16 UNSIGNED MULTIPLY SUBROUTINE
  551                ;        ENTER WITH UNSIGNED MULTIPLIER IN PROD AND PROD+1
  552                ;        ENTER WITH UNSIGNED MULTIPLICAND IN MPCD AND MPCD+1
  553                ;        RETURN WITH 16 BIT UNSIGNED PRODUCT IN PROD (LOW) THROUGH
  554                ;        PROD+3 (HIGH)
  555                ;        A DESTROYED, X AND Y PRESERVED
  556
  557 0359 8A        UNSMPY:  TXA                 ; SAVE X INDEX
  558 035A 48                 PHA
  559 035B A900               LDA    #0           ; CLEAR UPPER PRODUCT
  560 035D 852A               STA    PROD+3
  561 035F 8529               STA    PROD+2
  562 0361 A211               LDX    #17          ; SET 17 MULTIPLY CYCLE COUNT
  563 0363 18                 CLC                 ; INITIALLY CLEAR CARRY
  564 0364 208203    UNSM1:   JSR    SRQL         ; SHIFT MULTIPLIER AND PRODUCT RIGHT 1
  565                                             ; PUTTING A MULTIPLIER BIT IN CARRY
  566 0367 CA                 DEX                 ; DECREMENT AND CHECK CYCLE COUNT
  567 0368 F012               BEQ    UNSM2        ; JUMP OUT IF DONE
  568 036A 90F8               BCC    UNSM1        ; SKIP MULTIPLICAND ADD IF MULTIPLIER BIT
  569                                             ; IS ZERO
  570 036C A529               LDA    PROD+2       ; ADD MULTIPLICAND TO UPPER PRODUCT
  571 036E 18                 CLC
  572 036F 652B               ADC    MPCD
  573 0371 8529               STA    PROD+2
  574 0373 A52A               LDA    PROD+3
  575 0375 652C               ADC    MPCD+1
  576 0377 852A               STA    PROD+3
  577 0379 4C6403             JMP    UNSM1        ; GO FOR NEXT CYCLE
  578 037C 68        UNSM2:   PLA                 ; RESTORE X
  579 037D AA                 TAX
  580 037E 60                 RTS                 ; RETURN
  581
  582                ;        QUAD SHIFT RIGHT SUBROUTINE
  583                ;        ENTER AT SRQA FOR ALGEBRAIC SHIFT RIGHT
  584                ;        ENTER AT SRQL FOR LOGICAL SHIFT
  585                ;        ENTER WITH QUAD PRECISION VALUE TO SHIFT IN PROD THROUGH PROD+3
  586                ;        DESTROYS A, PRESERVES X AND Y, RETURNS BIT SHIFTED OUT IN CARRY
  587
  588 037F A52A      SRQA:    LDA    PROD+3       ; GET SIGN BIT OF PROD IN CARRY
  589 0381 0A                 ASLA
  590 0382 662A      SRQL:    ROR    PROD+3       ; LOGICAL SHIFT RIGHT ENTRY
  591 0384 6629               ROR    PROD+2
  592 0386 6628               ROR    PROD+1
  593 0388 6627               ROR    PROD
  594 038A 60                 RTS                 ; RETURN
  595
  596
  597                ;        QUAD SHIFT LEFT SUBROUTINE
  598                ;        ENTER AT SLQL TO SHIFT IN A ZERO BIT
  599                ;        ENTER AT RLQL TO SHIFT IN THE CARRY
  600                ;        ENTER WITH QUAD PRECISION VALUE TO SHIFT IN PROD THROUGH PROD+3
  601                ;        DESTROYS A, PRESERVES X AND Y, RETURNS BIT SHIFTED OUT IN CARRY
  602
  603 038B 18        SLQL:    CLC                 ; SHIFT IN ZERO BIT ENTRY; CLEAR CARRY
  604 038C 2627      RLQL:    ROL    PROD         ; SHIFT IN CARRY ENTRY
  605 038E 2628               ROL    PROD+1
  606 0390 2629               ROL    PROD+2
  607 0392 262A               ROL    PROD+3
  608 0394 60                 RTS                 ; RETURN
  609
  610                ;        RANDOM NUMBER GENERATOR SUBROUTINE
  611                ;        ENTER WITH SEED IN RANDNO
  612                ;        EXIT WITH NEW RANDOM NUMBER IN RANDNO AND A
  613                ;        USES 16 BIT FEEDBACK SHIFT REGISTER METHOD
  614                ;        DESTROYS REGISTER A AND Y
  615
  616 0395 A008      RAND:    LDY    #8           ; SET COUNTER FOR 8 RANDOM BITS
  617 0397 A50C      RAND1:   LDA    RANDNO       ; EXCLUSIVE-OR BITS 3, 12, 14, AND 15
  618 0399 4A                 LSRA                ; OF SEED
  619 039A 450C               EOR    RANDNO
  620 039C 4A                 LSRA
  621 039D 4A                 LSRA
  622 039E 450C               EOR    RANDNO
  623 03A0 4A                 LSRA
  624 03A1 450D               EOR    RANDNO+1     ; RESULT IS IN BIT 3 OF A
  625 03A3 4A                 LSRA                ; SHIFT INTO CARRY
  626 03A4 4A                 LSRA
  627 03A5 4A                 LSRA
  628 03A6 4A                 LSRA
  629 03A7 260D               ROL    RANDNO+1     ; SHIFT RANDNO LEFT ONE BRINGING IN CARRY
  630 03A9 260C               ROL    RANDNO
  631 03AB 88                 DEY                 ; TEST IF 8 NEW RANDOM BITS COMPUTED
  632 03AC D0E9               BNE    RAND1        ; LOOP FOR MORE IF NOT
  633 03AE A50C               LDA    RANDNO
  634 03B0 60                 RTS                 ; RETURN
  635
  636                ;        EXPONENTIALLY DISTRIBUTED RANDOM NUMBER SUBROUTINE
  637                ;        RULES OF USE SAME AS RAND, 8 BIT RESULT RETURNED IN A
  638                ;        AN EXPONENTIAL DISTRIBUTION MEANS THAT THE PROBABILITY OF A
  639                ;        RESULT BETWEEN 10 AND 20 IS THE SAME AS THE PROBABILITY OF A
  640                ;        RESULT BETWEEN 100 AND 200.
  641                ;        NOTE THAT THE PROBABILITY OF A ZERO RESULT IS ZERO.
  642
  643 03B1 209503    RNDEXP:  JSR    RAND         ; GET TWO NEW RANDOM BYTES
  644 03B4 209503             JSR    RAND
  645 03B7 A50C               LDA    RANDNO       ; CONVERT ONE OF THE BYTES TO A RANDOM
  646 03B9 2907               AND    #7           ; VALUE BETWEEN 0 AND 7 AND PUT IN Y AS A
  647 03BB A8                 TAY                 ; SHIFT COUNT
  648 03BC C8                 INY
  649 03BD A50D               LDA    RANDNO+1     ; GET THE OTHER RANDOM NUMBER AND SHIFT IT
  650 03BF 88        RNDXP1:  DEY                 ; RIGHT ACCORDING TO Y
  651 03C0 F004               BEQ    RNDXP2
  652 03C2 4A                 LSRA
  653 03C3 4CBF03             JMP    RNDXP1
  654 03C6 0900      RNDXP2:  ORA    #0           ; TEST FOR A ZERO RESULT
  655 03C8 F0E7               BEQ    RNDEXP       ; PROHIBIT ZERO RESULTS
  656 03CA 60                 RTS                 ; RETURN
  657
  658                ;        RANGCK - CHECK FOR ACCEPTABLE RANGE OF FREQ AND DAMP PARAMETERS
  659                ;        RETURN WITH CARRY OFF IF OK
  660
  661 03CB A502      RANGCK:  LDA    FREQ+1       ; MINIMUM ABSOLUTE VALUE FOR FREQ IS X'0100
  662 03CD F01C               BEQ    RANGNK       ; GO TO FAILURE RETURN IF HIGH BYTE IS 0
  663 03CF C9FF               CMP    #X'FF
  664 03D1 F018               BEQ    RANGNK       ; GO TO FAILURE RETURN IF HIGH BYTE IS FF
  665 03D3 A504      RANG2:   LDA    DAMP+1       ; CHECK THAT DAMP IS NOT GREATER THAN
  666 03D5 C97F               CMP    #X'7F        ; X'7EFF
  667 03D7 F012               BEQ    RANGNK       ; GO TO FAILURE RETURN IF SO
  668 03D9 A502      RANG3:   LDA    FREQ+1       ; IF FREQ AND DAMP ARE INDIVIDUALLY OK,
  669 03DB 1002               BPL    RANG4        ; VERIFY THAT DAMP IS ACCEPTABLY HIGH IF
  670 03DD 45FF               EOR    X'FF         ; ABSOLUTE VALUE OF FREQ IS SMALL
  671 03DF C908      RANG4:   CMP    #8
  672 03E1 1006               BPL    RANGOK       ; GO TO SUCCESS RETURN IF FREQ IS HIGH
  673 03E3 A504               LDA    DAMP+1       ; IF FREQ IS LOW, REQUIRE DAMP TO BE HIGH
  674 03E5 C97E               CMP    #X'7E
  675 03E7 3002               BMI    RANGNK       ; GO TO FAILURE RETURN IF DAMP NOT HIGH
  676                                             ; ENOUGH WHEN FREQ IS LESS THAN X'10
  677 03E9 18        RANGOK:  CLC                 ; CLEAR CARRY TO INDICATE SUCCESS
  678 03EA 60                 RTS                 ; RETURN
  679 03EB 38        RANGNK:  SEC                 ; SET CARRY TO INDICATE FAILURE
  680 03EC 60                 RTS                 ; RETURN
  681
  682
  683 0000                    .END
